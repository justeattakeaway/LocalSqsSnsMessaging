using System.Text;
using System.Text.Json;

namespace GenerateHandlers;

/// <summary>
/// Generates AOT-friendly JSON protocol serializers for AWS services.
/// </summary>
internal sealed class JsonCodeGenerator
{
    private readonly string _serviceName;
    private readonly string _sdkNamespace;
    private readonly JsonElement _shapes;

    public JsonCodeGenerator(string serviceName, string sdkNamespace, JsonElement shapes)
    {
        _serviceName = serviceName;
        _sdkNamespace = sdkNamespace;
        _shapes = shapes;
    }

    public string GenerateSerializers(JsonElement operations)
    {
        var code = new StringBuilder();

        // File header
        code.AppendLine("// <auto-generated/>");
        code.AppendLine($"// Generated JSON protocol serializers for {_serviceName}");
        code.AppendLine("#nullable enable");
        code.AppendLine("#pragma warning disable CS0618 // Type or member is obsolete");
        code.AppendLine();
        code.AppendLine("using System.Text.Json;");
        code.AppendLine($"using {_sdkNamespace}.Model;");
        code.AppendLine();
        code.AppendLine("namespace LocalSqsSnsMessaging.Http.Handlers;");
        code.AppendLine();
        code.AppendLine("/// <summary>");
        code.AppendLine($"/// Generated JSON protocol serializers for {_serviceName} operations.");
        code.AppendLine("/// </summary>");
        code.AppendLine($"internal static class {_serviceName}JsonSerializers");
        code.AppendLine("{");

        // Generate operation-specific deserializers and serializers
        foreach (var operation in operations.EnumerateObject())
        {
            var opName = operation.Name;
            var opValue = operation.Value;

            if (opValue.TryGetProperty("input", out var inputProp))
            {
                var inputShapeName = inputProp.GetProperty("shape").GetString()!;
                var inputShape = _shapes.GetProperty(inputShapeName);
                GenerateRequestDeserializer(code, opName, inputShape);
            }

            if (opValue.TryGetProperty("output", out var outputProp))
            {
                var outputShapeName = outputProp.GetProperty("shape").GetString()!;
                var outputShape = _shapes.GetProperty(outputShapeName);
                GenerateResponseSerializer(code, opName, outputShape);
            }
            else
            {
                // Generate empty response serializer for operations without output
                GenerateEmptyResponseSerializer(code, opName);
            }
        }

        code.AppendLine("}");
        return code.ToString();
    }

    private void GenerateRequestDeserializer(StringBuilder code, string opName, JsonElement inputShape)
    {
        code.AppendLine($"    internal static {opName}Request Deserialize{opName}Request(Stream stream)");
        code.AppendLine("    {");
        code.AppendLine("        using var doc = JsonDocument.Parse(stream);");
        code.AppendLine("        var root = doc.RootElement;");
        code.AppendLine($"        var request = new {opName}Request();");
        code.AppendLine();

        if (inputShape.TryGetProperty("members", out var members))
        {
            foreach (var member in members.EnumerateObject())
            {
                var memberName = member.Name;
                var shapeName = member.Value.GetProperty("shape").GetString()!;
                var shape = _shapes.GetProperty(shapeName);
                var shapeType = shape.GetProperty("type").GetString()!;

                code.AppendLine($"        // {memberName}");
                GenerateDeserializeMember(code, memberName, shapeName, shape, shapeType);
                code.AppendLine();
            }
        }

        code.AppendLine("        return request;");
        code.AppendLine("    }");
        code.AppendLine();
    }

    private void GenerateResponseSerializer(StringBuilder code, string opName, JsonElement outputShape)
    {
        _itemCounter = 0; // Reset counter for each response serializer

        code.AppendLine($"    internal static void Serialize{opName}Response({opName}Response response, Stream stream)");
        code.AppendLine("    {");
        code.AppendLine("        using var writer = new Utf8JsonWriter(stream, new JsonWriterOptions { SkipValidation = true });");
        code.AppendLine("        writer.WriteStartObject();");
        code.AppendLine();

        if (outputShape.TryGetProperty("members", out var members))
        {
            foreach (var member in members.EnumerateObject())
            {
                var memberName = member.Name;
                var shapeName = member.Value.GetProperty("shape").GetString()!;
                var shape = _shapes.GetProperty(shapeName);
                var shapeType = shape.GetProperty("type").GetString()!;

                code.AppendLine($"        // {memberName}");
                GenerateSerializeMember(code, memberName, shapeName, shape, shapeType, "response");
                code.AppendLine();
            }
        }

        code.AppendLine("        writer.WriteEndObject();");
        code.AppendLine("        writer.Flush();");
        code.AppendLine("    }");
        code.AppendLine();
    }

    private static void GenerateEmptyResponseSerializer(StringBuilder code, string opName)
    {
        code.AppendLine($"    internal static void Serialize{opName}Response({opName}Response response, Stream stream)");
        code.AppendLine("    {");
        code.AppendLine("        using var writer = new Utf8JsonWriter(stream, new JsonWriterOptions { SkipValidation = true });");
        code.AppendLine("        writer.WriteStartObject();");
        code.AppendLine("        writer.WriteEndObject();");
        code.AppendLine("        writer.Flush();");
        code.AppendLine("    }");
        code.AppendLine();
    }

    private void GenerateSerializeMember(StringBuilder code, string memberName, string shapeName, JsonElement shape, string shapeType, string sourceVar)
    {
        var csharpPropertyName = ToPascalCase(memberName);
        var jsonPropertyName = ToCamelCase(memberName);

        switch (shapeType)
        {
            case "string":
                code.AppendLine($"        if ({sourceVar}.{csharpPropertyName} != null)");
                code.AppendLine($"            writer.WriteString(\"{jsonPropertyName}\", {sourceVar}.{csharpPropertyName});");
                break;

            case "integer":
                code.AppendLine($"        if ({sourceVar}.{csharpPropertyName}.HasValue)");
                code.AppendLine($"            writer.WriteNumber(\"{jsonPropertyName}\", {sourceVar}.{csharpPropertyName}.Value);");
                break;

            case "long":
                code.AppendLine($"        if ({sourceVar}.{csharpPropertyName}.HasValue)");
                code.AppendLine($"            writer.WriteNumber(\"{jsonPropertyName}\", {sourceVar}.{csharpPropertyName}.Value);");
                break;

            case "boolean":
                code.AppendLine($"        if ({sourceVar}.{csharpPropertyName}.HasValue)");
                code.AppendLine($"            writer.WriteBoolean(\"{jsonPropertyName}\", {sourceVar}.{csharpPropertyName}.Value);");
                break;

            case "double":
            case "float":
                code.AppendLine($"        if ({sourceVar}.{csharpPropertyName}.HasValue)");
                code.AppendLine($"            writer.WriteNumber(\"{jsonPropertyName}\", {sourceVar}.{csharpPropertyName}.Value);");
                break;

            case "timestamp":
                code.AppendLine($"        if ({sourceVar}.{csharpPropertyName}.HasValue)");
                code.AppendLine($"            writer.WriteString(\"{jsonPropertyName}\", {sourceVar}.{csharpPropertyName}.Value.ToString(\"O\"));");
                break;

            case "list":
                code.AppendLine($"        if ({sourceVar}.{csharpPropertyName} != null && {sourceVar}.{csharpPropertyName}.Count > 0)");
                code.AppendLine("        {");
                code.AppendLine($"            writer.WritePropertyName(\"{jsonPropertyName}\");");
                code.AppendLine("            writer.WriteStartArray();");

                // Get list member type
                var memberShape = shape.GetProperty("member").GetProperty("shape").GetString()!;
                var memberType = _shapes.GetProperty(memberShape).GetProperty("type").GetString()!;

                code.AppendLine($"            foreach (var item in {sourceVar}.{csharpPropertyName})");
                code.AppendLine("            {");

                if (memberType == "string")
                {
                    code.AppendLine("                writer.WriteStringValue(item);");
                }
                else if (memberType == "structure")
                {
                    // Serialize structure inline
                    code.AppendLine("                writer.WriteStartObject();");
                    GenerateStructureMembers(code, memberShape, "item", "                ");
                    code.AppendLine("                writer.WriteEndObject();");
                }
                else
                {
                    code.AppendLine($"                // TODO: Serialize {memberType}");
                }

                code.AppendLine("            }");
                code.AppendLine("            writer.WriteEndArray();");
                code.AppendLine("        }");
                break;

            case "map":
                code.AppendLine($"        if ({sourceVar}.{csharpPropertyName} != null && {sourceVar}.{csharpPropertyName}.Count > 0)");
                code.AppendLine("        {");
                code.AppendLine($"            writer.WritePropertyName(\"{jsonPropertyName}\");");
                code.AppendLine("            writer.WriteStartObject();");

                // Get map value type
                var valueShape = shape.GetProperty("value").GetProperty("shape").GetString()!;
                var valueType = _shapes.GetProperty(valueShape).GetProperty("type").GetString()!;

                code.AppendLine($"            foreach (var kvp in {sourceVar}.{csharpPropertyName})");
                code.AppendLine("            {");

                if (valueType == "string")
                {
                    code.AppendLine("                writer.WriteString(kvp.Key, kvp.Value);");
                }
                else
                {
                    code.AppendLine($"                // TODO: Serialize {valueType} value");
                }

                code.AppendLine("            }");
                code.AppendLine("            writer.WriteEndObject();");
                code.AppendLine("        }");
                break;

            case "structure":
                code.AppendLine($"        // TODO: Implement structure serialization for {csharpPropertyName} ({shapeName})");
                break;

            default:
                code.AppendLine($"        // TODO: Implement {shapeType} serialization for {csharpPropertyName}");
                break;
        }
    }

    private void GenerateDeserializeMember(StringBuilder code, string memberName, string shapeName, JsonElement shape, string shapeType)
    {
        var csharpPropertyName = ToPascalCase(memberName);
        var jsonPropertyName = ToCamelCase(memberName);

        switch (shapeType)
        {
            case "string":
                code.AppendLine($"        if (root.TryGetProperty(\"{jsonPropertyName}\", out var {jsonPropertyName}Elem))");
                code.AppendLine($"            request.{csharpPropertyName} = {jsonPropertyName}Elem.GetString();");
                break;

            case "integer":
                code.AppendLine($"        if (root.TryGetProperty(\"{jsonPropertyName}\", out var {jsonPropertyName}Elem) && {jsonPropertyName}Elem.TryGetInt32(out var {jsonPropertyName}Val))");
                code.AppendLine($"            request.{csharpPropertyName} = {jsonPropertyName}Val;");
                break;

            case "long":
                code.AppendLine($"        if (root.TryGetProperty(\"{jsonPropertyName}\", out var {jsonPropertyName}Elem) && {jsonPropertyName}Elem.TryGetInt64(out var {jsonPropertyName}Val))");
                code.AppendLine($"            request.{csharpPropertyName} = {jsonPropertyName}Val;");
                break;

            case "boolean":
                code.AppendLine($"        if (root.TryGetProperty(\"{jsonPropertyName}\", out var {jsonPropertyName}Elem) && {jsonPropertyName}Elem.ValueKind == JsonValueKind.True || {jsonPropertyName}Elem.ValueKind == JsonValueKind.False)");
                code.AppendLine($"            request.{csharpPropertyName} = {jsonPropertyName}Elem.GetBoolean();");
                break;

            case "double":
            case "float":
                code.AppendLine($"        if (root.TryGetProperty(\"{jsonPropertyName}\", out var {jsonPropertyName}Elem) && {jsonPropertyName}Elem.TryGetDouble(out var {jsonPropertyName}Val))");
                code.AppendLine($"            request.{csharpPropertyName} = {jsonPropertyName}Val;");
                break;

            case "timestamp":
                code.AppendLine($"        if (root.TryGetProperty(\"{jsonPropertyName}\", out var {jsonPropertyName}Elem) && {jsonPropertyName}Elem.TryGetDateTime(out var {jsonPropertyName}Val))");
                code.AppendLine($"            request.{csharpPropertyName} = {jsonPropertyName}Val;");
                break;

            case "list":
                var memberShape = shape.GetProperty("member").GetProperty("shape").GetString()!;
                var memberType = _shapes.GetProperty(memberShape).GetProperty("type").GetString()!;

                code.AppendLine($"        if (root.TryGetProperty(\"{jsonPropertyName}\", out var {jsonPropertyName}Elem) && {jsonPropertyName}Elem.ValueKind == JsonValueKind.Array)");
                code.AppendLine("        {");
                code.AppendLine($"            request.{csharpPropertyName} = new List<{GetCSharpType(memberShape, memberType)}>();");
                code.AppendLine($"            foreach (var item in {jsonPropertyName}Elem.EnumerateArray())");
                code.AppendLine("            {");

                if (memberType == "string")
                {
                    code.AppendLine($"                request.{csharpPropertyName}.Add(item.GetString()!);");
                }
                else if (memberType == "structure")
                {
                    code.AppendLine($"                // TODO: Deserialize {memberShape} structure");
                }
                else
                {
                    code.AppendLine($"                // TODO: Deserialize {memberType}");
                }

                code.AppendLine("            }");
                code.AppendLine("        }");
                break;

            case "map":
                var valueShape = shape.GetProperty("value").GetProperty("shape").GetString()!;
                var valueType = _shapes.GetProperty(valueShape).GetProperty("type").GetString()!;

                code.AppendLine($"        if (root.TryGetProperty(\"{jsonPropertyName}\", out var {jsonPropertyName}Elem) && {jsonPropertyName}Elem.ValueKind == JsonValueKind.Object)");
                code.AppendLine("        {");
                code.AppendLine($"            request.{csharpPropertyName} = new Dictionary<string, {GetCSharpType(valueShape, valueType)}>();");
                code.AppendLine($"            foreach (var prop in {jsonPropertyName}Elem.EnumerateObject())");
                code.AppendLine("            {");

                if (valueType == "string")
                {
                    code.AppendLine($"                request.{csharpPropertyName}[prop.Name] = prop.Value.GetString()!;");
                }
                else if (valueType == "structure")
                {
                    code.AppendLine($"                // TODO: Deserialize {valueShape} structure");
                }
                else
                {
                    code.AppendLine($"                // TODO: Deserialize {valueType} value");
                }

                code.AppendLine("            }");
                code.AppendLine("        }");
                break;

            case "blob":
                code.AppendLine($"        if (root.TryGetProperty(\"{jsonPropertyName}\", out var {jsonPropertyName}Elem))");
                code.AppendLine("        {");
                code.AppendLine($"            var base64 = {jsonPropertyName}Elem.GetString();");
                code.AppendLine("            if (base64 != null)");
                code.AppendLine($"                request.{csharpPropertyName} = new MemoryStream(Convert.FromBase64String(base64));");
                code.AppendLine("        }");
                break;

            case "structure":
                code.AppendLine($"        // TODO: Implement structure deserialization for {csharpPropertyName} ({shapeName})");
                break;

            default:
                code.AppendLine($"        // TODO: Implement {shapeType} deserialization for {csharpPropertyName}");
                break;
        }
    }

    private static string GetCSharpType(string shapeName, string shapeType)
    {
        return shapeType switch
        {
            "string" => "string",
            "integer" => "int",
            "long" => "long",
            "boolean" => "bool",
            "double" => "double",
            "float" => "float",
            "timestamp" => "DateTime",
            "blob" => "MemoryStream",
            "structure" => shapeName,
            _ => "object"
        };
    }

    private int _itemCounter;

    private void GenerateStructureMembers(StringBuilder code, string shapeName, string sourceVar, string indent)
    {
        if (!_shapes.TryGetProperty(shapeName, out var shape))
        {
            code.AppendLine($"{indent}// Shape {shapeName} not found");
            return;
        }

        if (!shape.TryGetProperty("members", out var members))
        {
            return;
        }

        foreach (var member in members.EnumerateObject())
        {
            var memberName = member.Name;
            var memberShapeName = member.Value.GetProperty("shape").GetString()!;
            var memberShape = _shapes.GetProperty(memberShapeName);
            var memberType = memberShape.GetProperty("type").GetString()!;

            var csharpPropertyName = ToPascalCase(memberName);
            var jsonPropertyName = ToCamelCase(memberName);

            switch (memberType)
            {
                case "string":
                    code.AppendLine($"{indent}if ({sourceVar}.{csharpPropertyName} != null)");
                    code.AppendLine($"{indent}    writer.WriteString(\"{jsonPropertyName}\", {sourceVar}.{csharpPropertyName});");
                    break;

                case "integer":
                case "long":
                    code.AppendLine($"{indent}if ({sourceVar}.{csharpPropertyName}.HasValue)");
                    code.AppendLine($"{indent}    writer.WriteNumber(\"{jsonPropertyName}\", {sourceVar}.{csharpPropertyName}.Value);");
                    break;

                case "boolean":
                    code.AppendLine($"{indent}if ({sourceVar}.{csharpPropertyName}.HasValue)");
                    code.AppendLine($"{indent}    writer.WriteBoolean(\"{jsonPropertyName}\", {sourceVar}.{csharpPropertyName}.Value);");
                    break;

                case "double":
                case "float":
                    code.AppendLine($"{indent}if ({sourceVar}.{csharpPropertyName}.HasValue)");
                    code.AppendLine($"{indent}    writer.WriteNumber(\"{jsonPropertyName}\", {sourceVar}.{csharpPropertyName}.Value);");
                    break;

                case "timestamp":
                    code.AppendLine($"{indent}if ({sourceVar}.{csharpPropertyName}.HasValue)");
                    code.AppendLine($"{indent}    writer.WriteString(\"{jsonPropertyName}\", {sourceVar}.{csharpPropertyName}.Value.ToString(\"O\"));");
                    break;

                case "map":
                    var valueShape = memberShape.GetProperty("value").GetProperty("shape").GetString()!;
                    var valueType = _shapes.GetProperty(valueShape).GetProperty("type").GetString()!;

                    code.AppendLine($"{indent}if ({sourceVar}.{csharpPropertyName} != null && {sourceVar}.{csharpPropertyName}.Count > 0)");
                    code.AppendLine($"{indent}{{");
                    code.AppendLine($"{indent}    writer.WritePropertyName(\"{jsonPropertyName}\");");
                    code.AppendLine($"{indent}    writer.WriteStartObject();");
                    code.AppendLine($"{indent}    foreach (var kvp in {sourceVar}.{csharpPropertyName})");
                    code.AppendLine($"{indent}    {{");

                    if (valueType == "string")
                    {
                        code.AppendLine($"{indent}        writer.WriteString(kvp.Key, kvp.Value);");
                    }
                    else if (valueType == "structure")
                    {
                        code.AppendLine($"{indent}        writer.WritePropertyName(kvp.Key);");
                        code.AppendLine($"{indent}        writer.WriteStartObject();");
                        GenerateStructureMembers(code, valueShape, "kvp.Value", $"{indent}        ");
                        code.AppendLine($"{indent}        writer.WriteEndObject();");
                    }
                    else
                    {
                        code.AppendLine($"{indent}        // TODO: Serialize {valueType} value");
                    }

                    code.AppendLine($"{indent}    }}");
                    code.AppendLine($"{indent}    writer.WriteEndObject();");
                    code.AppendLine($"{indent}}}");
                    break;

                case "list":
                    var listMemberShape = memberShape.GetProperty("member").GetProperty("shape").GetString()!;
                    var listMemberType = _shapes.GetProperty(listMemberShape).GetProperty("type").GetString()!;
                    var itemVarName = $"item{_itemCounter++}";

                    code.AppendLine($"{indent}if ({sourceVar}.{csharpPropertyName} != null && {sourceVar}.{csharpPropertyName}.Count > 0)");
                    code.AppendLine($"{indent}{{");
                    code.AppendLine($"{indent}    writer.WritePropertyName(\"{jsonPropertyName}\");");
                    code.AppendLine($"{indent}    writer.WriteStartArray();");
                    code.AppendLine($"{indent}    foreach (var {itemVarName} in {sourceVar}.{csharpPropertyName})");
                    code.AppendLine($"{indent}    {{");

                    if (listMemberType == "string")
                    {
                        code.AppendLine($"{indent}        writer.WriteStringValue({itemVarName});");
                    }
                    else if (listMemberType == "structure")
                    {
                        code.AppendLine($"{indent}        writer.WriteStartObject();");
                        GenerateStructureMembers(code, listMemberShape, itemVarName, $"{indent}        ");
                        code.AppendLine($"{indent}        writer.WriteEndObject();");
                    }
                    else if (listMemberType == "blob")
                    {
                        code.AppendLine($"{indent}        writer.WriteStringValue(Convert.ToBase64String({itemVarName}.ToArray()));");
                    }
                    else
                    {
                        code.AppendLine($"{indent}        // TODO: Serialize {listMemberType}");
                    }

                    code.AppendLine($"{indent}    }}");
                    code.AppendLine($"{indent}    writer.WriteEndArray();");
                    code.AppendLine($"{indent}}}");
                    break;

                case "structure":
                    code.AppendLine($"{indent}if ({sourceVar}.{csharpPropertyName} != null)");
                    code.AppendLine($"{indent}{{");
                    code.AppendLine($"{indent}    writer.WritePropertyName(\"{jsonPropertyName}\");");
                    code.AppendLine($"{indent}    writer.WriteStartObject();");
                    GenerateStructureMembers(code, memberShapeName, $"{sourceVar}.{csharpPropertyName}", $"{indent}    ");
                    code.AppendLine($"{indent}    writer.WriteEndObject();");
                    code.AppendLine($"{indent}}}");
                    break;

                case "blob":
                    code.AppendLine($"{indent}if ({sourceVar}.{csharpPropertyName} != null)");
                    code.AppendLine($"{indent}    writer.WriteString(\"{jsonPropertyName}\", Convert.ToBase64String({sourceVar}.{csharpPropertyName}.ToArray()));");
                    break;

                default:
                    code.AppendLine($"{indent}// TODO: Serialize {memberType} for {csharpPropertyName}");
                    break;
            }
        }
    }

    private static string ToCamelCase(string str)
    {
        if (string.IsNullOrEmpty(str) || char.IsLower(str[0]))
            return str;
        return char.ToLowerInvariant(str[0]) + str.Substring(1);
    }

    private static string ToPascalCase(string str)
    {
        if (string.IsNullOrEmpty(str) || char.IsUpper(str[0]))
            return str;
        return char.ToUpperInvariant(str[0]) + str.Substring(1);
    }
}
