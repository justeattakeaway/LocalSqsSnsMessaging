using System.Text;
using System.Text.Json;
using GenerateHandlers;

if (args.Length == 0)
{
    Console.Error.WriteLine("Usage: GenerateHandlers <project-directory>");
    return 1;
}

var projectDir = args[0];
var serviceModelsDir = Path.Combine(projectDir, "ServiceModels");
var outputDir = Path.Combine(projectDir, "Http", "Handlers", "Generated");

Directory.CreateDirectory(outputDir);

Console.WriteLine("Generating operation handlers from AWS service models...");

// Generate SQS handler (JSON protocol)
GenerateJsonProtocolHandler(
    Path.Combine(serviceModelsDir, "sqs-2012-11-05.normal.json"),
    "Sqs",
    "Amazon.SQS",
    "IAmazonSQS",
    outputDir);

// Generate SNS handler (Query protocol)
GenerateQueryProtocolHandler(
    Path.Combine(serviceModelsDir, "sns-2010-03-31.normal.json"),
    "Sns",
    "Amazon.SimpleNotificationService",
    "IAmazonSimpleNotificationService",
    outputDir);

Console.WriteLine("Code generation completed successfully!");
return 0;

static void GenerateJsonProtocolHandler(string modelPath, string serviceName, string sdkNamespace, string clientType, string outputDir)
{
    Console.WriteLine($"  Processing {serviceName} (JSON protocol)...");

    var json = File.ReadAllText(modelPath);
    using var doc = JsonDocument.Parse(json);
    var root = doc.RootElement;

    var operations = root.GetProperty("operations");
    var shapes = root.GetProperty("shapes");

    // Generate the handler
    GenerateJsonHandler(serviceName, sdkNamespace, clientType, operations, outputDir);

    // Generate the serializers using the new generator
    var generator = new JsonCodeGenerator(serviceName, sdkNamespace, shapes);
    var serializersCode = generator.GenerateSerializers(operations);

    var outputPath = Path.Combine(outputDir, $"{serviceName}JsonSerializers.g.cs");
    File.WriteAllText(outputPath, serializersCode);

    Console.WriteLine($"    Generated JSON protocol handler and serializers for {serviceName}");
}

static void GenerateJsonHandler(string serviceName, string sdkNamespace, string clientType, JsonElement operations, string outputDir)
{
    var code = new StringBuilder();
    code.AppendLine("// <auto-generated/>");
    code.AppendLine($"// Generated JSON protocol handler for {serviceName}");
    code.AppendLine();
    code.AppendLine("using System.Net;");
    code.AppendLine("using System.Net.Http.Json;");
    code.AppendLine("using System.Text;");
    code.AppendLine("using System.Text.Json;");
    code.AppendLine($"using {sdkNamespace};");
    code.AppendLine($"using {sdkNamespace}.Model;");
    code.AppendLine("using Amazon.Runtime;");
    code.AppendLine("using LocalSqsSnsMessaging.Http.Serialization;");
    code.AppendLine();
    code.AppendLine("namespace LocalSqsSnsMessaging.Http.Handlers;");
    code.AppendLine();
    code.AppendLine("/// <summary>");
    code.AppendLine($"/// Handles {serviceName} operations using JSON protocol.");
    code.AppendLine("/// </summary>");
    code.AppendLine($"internal static partial class {serviceName}OperationHandler");
    code.AppendLine("{");
    code.AppendLine("    private static readonly JsonSerializerOptions JsonOptions = new()");
    code.AppendLine("    {");
    code.AppendLine("        PropertyNamingPolicy = JsonNamingPolicy.CamelCase,");
    code.AppendLine("        PropertyNameCaseInsensitive = true,");
    code.AppendLine("        DefaultIgnoreCondition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull,");
    code.AppendLine("        Converters = { new MemoryStreamJsonConverter() }");
    code.AppendLine("    };");
    code.AppendLine();
    code.AppendLine("    public static async Task<HttpResponseMessage> HandleAsync(");
    code.AppendLine("        HttpRequestMessage request,");
    code.AppendLine("        string operationName,");
    code.AppendLine("        InMemoryAwsBus bus,");
    code.AppendLine("        CancellationToken cancellationToken)");
    code.AppendLine("    {");
    code.AppendLine("        ArgumentNullException.ThrowIfNull(request);");
    code.AppendLine("        ArgumentNullException.ThrowIfNull(operationName);");
    code.AppendLine("        ArgumentNullException.ThrowIfNull(bus);");
    code.AppendLine();
    code.AppendLine($"        using {clientType} client = bus.CreateRaw{serviceName}Client();");
    code.AppendLine();
    code.AppendLine("        return operationName switch");
    code.AppendLine("        {");

    // Generate switch cases for each operation
    foreach (var operation in operations.EnumerateObject())
    {
        var opName = operation.Name;
        if (!operation.Value.TryGetProperty("input", out var input))
        {
            continue;
        }

        code.AppendLine($"            \"{opName}\" => await Handle{opName}Async(request, client, cancellationToken),");
    }

    code.AppendLine($"            _ => throw new NotSupportedException($\"{serviceName} operation '{{operationName}}' is not supported.\")");
    code.AppendLine("        };");
    code.AppendLine("    }");
    code.AppendLine();

    // Generate individual handler methods
    foreach (var operation in operations.EnumerateObject())
    {
        var opName = operation.Name;
        if (!operation.Value.TryGetProperty("input", out var input))
        {
            continue;
        }

        var requestTypeName = $"{opName}Request";
        var responseTypeName = $"{opName}Response";

        code.AppendLine($"    private static async Task<HttpResponseMessage> Handle{opName}Async(");
        code.AppendLine("        HttpRequestMessage request,");
        code.AppendLine($"        {clientType} client,");
        code.AppendLine("        CancellationToken cancellationToken)");
        code.AppendLine("    {");
        code.AppendLine("        try");
        code.AppendLine("        {");
        code.AppendLine($"            var requestObject = await request.Content!.ReadFromJsonAsync<{requestTypeName}>(JsonOptions, cancellationToken).ConfigureAwait(false);");
        code.AppendLine($"            var result = await client.{opName}Async(requestObject, cancellationToken).ConfigureAwait(false);");
        code.AppendLine();
        code.AppendLine("            var response = new HttpResponseMessage(HttpStatusCode.OK)");
        code.AppendLine("            {");
        code.AppendLine("                Content = JsonContent.Create(result, options: JsonOptions)");
        code.AppendLine("            };");
        code.AppendLine("            response.Content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(\"application/x-amz-json-1.0\");");
        code.AppendLine("            return response;");
        code.AppendLine("        }");
        code.AppendLine("        catch (OperationCanceledException)");
        code.AppendLine("        {");
        code.AppendLine("            throw;");
        code.AppendLine("        }");
        code.AppendLine("        catch (AmazonServiceException ex)");
        code.AppendLine("        {");
        code.AppendLine("            return CreateErrorResponse(ex);");
        code.AppendLine("        }");
        code.AppendLine("    }");
        code.AppendLine();
    }

    // Generate error response helper
    code.AppendLine("    private static HttpResponseMessage CreateErrorResponse(Exception exception)");
    code.AppendLine("    {");
    code.AppendLine("        // Extract error code from AmazonServiceException if available");
    code.AppendLine("        string errorCode;");
    code.AppendLine("        string errorMessage;");
    code.AppendLine("        HttpStatusCode statusCode;");
    code.AppendLine();
    code.AppendLine("        if (exception is AmazonServiceException awsException)");
    code.AppendLine("        {");
    code.AppendLine("            errorCode = awsException.ErrorCode ?? exception.GetType().Name.Replace(\"Exception\", \"\");");
    code.AppendLine("            errorMessage = awsException.Message;");
    code.AppendLine("            statusCode = awsException.StatusCode;");
    code.AppendLine("        }");
    code.AppendLine("        else");
    code.AppendLine("        {");
    code.AppendLine("            errorCode = exception.GetType().Name.Replace(\"Exception\", \"\");");
    code.AppendLine("            errorMessage = exception.Message;");
    code.AppendLine("            statusCode = HttpStatusCode.InternalServerError;");
    code.AppendLine("        }");
    code.AppendLine();
    code.AppendLine("        // Format error code in AWS format: com.amazonaws.sqs#ErrorCode");
    code.AppendLine("        var errorType = $\"com.amazonaws.sqs#{errorCode}\";");
    code.AppendLine();
    code.AppendLine("        var errorJson = $$\"\"\"");
    code.AppendLine("        {");
    code.AppendLine("            \"__type\": \"{{errorType}}\",");
    code.AppendLine("            \"message\": \"{{errorMessage.Replace(\"\\\"\", \"\\\\\\\"\", StringComparison.Ordinal)}}\"");
    code.AppendLine("        }");
    code.AppendLine("        \"\"\";");
    code.AppendLine();
    code.AppendLine("        return new HttpResponseMessage(statusCode)");
    code.AppendLine("        {");
    code.AppendLine("            Content = new StringContent(errorJson, Encoding.UTF8, \"application/x-amz-json-1.0\")");
    code.AppendLine("        };");
    code.AppendLine("    }");

    code.AppendLine("}");

    var outputPath = Path.Combine(outputDir, $"{serviceName}OperationHandler.g.cs");
    File.WriteAllText(outputPath, code.ToString());
}

static void GenerateQueryProtocolHandler(string modelPath, string serviceName, string sdkNamespace, string clientType, string outputDir)
{
    Console.WriteLine($"  Processing {serviceName} (Query protocol)...");

    var json = File.ReadAllText(modelPath);
    using var doc = JsonDocument.Parse(json);
    var root = doc.RootElement;

    var metadata = root.GetProperty("metadata");
    var operations = root.GetProperty("operations");
    var shapes = root.GetProperty("shapes");
    var xmlNamespace = metadata.GetProperty("xmlNamespace").GetString() ?? "";

    // Generate the handler
    GenerateQueryHandler(serviceName, sdkNamespace, clientType, operations, outputDir);

    // Generate the serializers using the new generator
    var generator = new QueryCodeGenerator(serviceName, sdkNamespace, xmlNamespace, shapes);
    var serializersCode = generator.GenerateSerializers(operations);

    var outputPath = Path.Combine(outputDir, $"{serviceName}QuerySerializers.g.cs");
    File.WriteAllText(outputPath, serializersCode);

    Console.WriteLine($"    Generated Query protocol handler and serializers for {serviceName}");
}

static void GenerateQueryHandler(string serviceName, string sdkNamespace, string clientType, JsonElement operations, string outputDir)
{
    var code = new StringBuilder();
    code.AppendLine("// <auto-generated/>");
    code.AppendLine($"// Generated Query protocol handler for {serviceName}");
    code.AppendLine();
    code.AppendLine("using System.Net;");
    code.AppendLine("using System.Text;");
    code.AppendLine($"using {sdkNamespace};");
    code.AppendLine($"using {sdkNamespace}.Model;");
    code.AppendLine("using Amazon.Runtime;");
    code.AppendLine();
    code.AppendLine("namespace LocalSqsSnsMessaging.Http.Handlers;");
    code.AppendLine();
    code.AppendLine("/// <summary>");
    code.AppendLine($"/// Handles {serviceName} operations using Query protocol.");
    code.AppendLine("/// </summary>");
    code.AppendLine($"internal static partial class {serviceName}OperationHandler");
    code.AppendLine("{");
    code.AppendLine("    public static async Task<HttpResponseMessage> HandleAsync(");
    code.AppendLine("        HttpRequestMessage request,");
    code.AppendLine("        string operationName,");
    code.AppendLine("        InMemoryAwsBus bus,");
    code.AppendLine("        CancellationToken cancellationToken)");
    code.AppendLine("    {");
    code.AppendLine("        ArgumentNullException.ThrowIfNull(request);");
    code.AppendLine("        ArgumentNullException.ThrowIfNull(operationName);");
    code.AppendLine("        ArgumentNullException.ThrowIfNull(bus);");
    code.AppendLine();
    code.AppendLine($"        using {clientType} client = bus.CreateRaw{serviceName}Client();");
    code.AppendLine();
    code.AppendLine("        return operationName switch");
    code.AppendLine("        {");

    // Generate switch cases for each operation
    foreach (var operation in operations.EnumerateObject())
    {
        var opName = operation.Name;
        if (!operation.Value.TryGetProperty("input", out var input))
        {
            continue;
        }

        code.AppendLine($"            \"{opName}\" => await Handle{opName}Async(request, client, cancellationToken),");
    }

    code.AppendLine($"            _ => throw new NotSupportedException($\"{serviceName} operation '{{operationName}}' is not supported.\")");
    code.AppendLine("        };");
    code.AppendLine("    }");
    code.AppendLine();

    // Generate individual handler methods
    foreach (var operation in operations.EnumerateObject())
    {
        var opName = operation.Name;
        if (!operation.Value.TryGetProperty("input", out var input))
        {
            continue;
        }

        var requestTypeName = $"{opName}Request";

        code.AppendLine($"    private static async Task<HttpResponseMessage> Handle{opName}Async(");
        code.AppendLine("        HttpRequestMessage request,");
        code.AppendLine($"        {clientType} client,");
        code.AppendLine("        CancellationToken cancellationToken)");
        code.AppendLine("    {");
        code.AppendLine("        try");
        code.AppendLine("        {");
        code.AppendLine($"            var requestBody = request.Content != null ? await request.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false) : string.Empty;");
        code.AppendLine($"            var requestObject = {serviceName}QuerySerializers.Deserialize{opName}Request(requestBody);");
        code.AppendLine($"            var result = await client.{opName}Async(requestObject, cancellationToken).ConfigureAwait(false);");
        code.AppendLine();
        code.AppendLine("            var responseStream = new MemoryStream();");
        code.AppendLine($"            {serviceName}QuerySerializers.Serialize{opName}Response(result, responseStream);");
        code.AppendLine("            var responseXml = Encoding.UTF8.GetString(responseStream.ToArray());");
        code.AppendLine();
        code.AppendLine("            var response = new HttpResponseMessage(HttpStatusCode.OK)");
        code.AppendLine("            {");
        code.AppendLine("                Content = new StringContent(responseXml, Encoding.UTF8, \"text/xml\")");
        code.AppendLine("            };");
        code.AppendLine("            return response;");
        code.AppendLine("        }");
        code.AppendLine("        catch (OperationCanceledException)");
        code.AppendLine("        {");
        code.AppendLine("            throw;");
        code.AppendLine("        }");
        code.AppendLine("        catch (AmazonServiceException ex)");
        code.AppendLine("        {");
        code.AppendLine("            return CreateErrorResponse(ex);");
        code.AppendLine("        }");
        code.AppendLine("    }");
        code.AppendLine();
    }

    // Generate error response helper
    code.AppendLine("    private static HttpResponseMessage CreateErrorResponse(Exception exception)");
    code.AppendLine("    {");
    code.AppendLine("        // Extract error code from AmazonServiceException if available");
    code.AppendLine("        string errorCode;");
    code.AppendLine("        string errorMessage;");
    code.AppendLine("        HttpStatusCode statusCode;");
    code.AppendLine();
    code.AppendLine("        if (exception is AmazonServiceException awsException)");
    code.AppendLine("        {");
    code.AppendLine("            errorCode = awsException.ErrorCode ?? exception.GetType().Name.Replace(\"Exception\", \"\");");
    code.AppendLine("            errorMessage = awsException.Message;");
    code.AppendLine("            statusCode = awsException.StatusCode;");
    code.AppendLine("        }");
    code.AppendLine("        else");
    code.AppendLine("        {");
    code.AppendLine("            errorCode = exception.GetType().Name.Replace(\"Exception\", \"\");");
    code.AppendLine("            errorMessage = exception.Message;");
    code.AppendLine("            statusCode = HttpStatusCode.InternalServerError;");
    code.AppendLine("        }");
    code.AppendLine();
    code.AppendLine("        var errorXml = $\"\"\"");
    code.AppendLine("        <?xml version=\"1.0\" encoding=\"UTF-8\"?>");
    code.AppendLine("        <ErrorResponse xmlns=\"http://sns.amazonaws.com/doc/2010-03-31/\">");
    code.AppendLine("            <Error>");
    code.AppendLine("                <Type>Sender</Type>");
    code.AppendLine("                <Code>{errorCode}</Code>");
    code.AppendLine("                <Message>{System.Security.SecurityElement.Escape(errorMessage)}</Message>");
    code.AppendLine("            </Error>");
    code.AppendLine("            <RequestId>{Guid.NewGuid()}</RequestId>");
    code.AppendLine("        </ErrorResponse>");
    code.AppendLine("        \"\"\";");
    code.AppendLine();
    code.AppendLine("        return new HttpResponseMessage(statusCode)");
    code.AppendLine("        {");
    code.AppendLine("            Content = new StringContent(errorXml, Encoding.UTF8, \"text/xml\")");
    code.AppendLine("        };");
    code.AppendLine("    }");

    code.AppendLine("}");

    var outputPath = Path.Combine(outputDir, $"{serviceName}OperationHandler.g.cs");
    File.WriteAllText(outputPath, code.ToString());
}
