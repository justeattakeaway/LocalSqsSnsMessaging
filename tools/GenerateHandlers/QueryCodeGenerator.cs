using System.Text;
using System.Text.Json;

namespace GenerateHandlers;

/// <summary>
/// Generates AOT-friendly Query protocol serializers and deserializers for AWS services.
/// </summary>
internal sealed class QueryCodeGenerator
{
    private readonly string _serviceName;
    private readonly string _sdkNamespace;
    private readonly string _xmlNamespace;
    private readonly JsonElement _shapes;
    private readonly HashSet<string> _generatedHelpers = new();

    public QueryCodeGenerator(string serviceName, string sdkNamespace, string xmlNamespace, JsonElement shapes)
    {
        _serviceName = serviceName;
        _sdkNamespace = sdkNamespace;
        _xmlNamespace = xmlNamespace;
        _shapes = shapes;
    }

    public string GenerateSerializers(JsonElement operations)
    {
        var code = new StringBuilder();

        // File header
        code.AppendLine("// <auto-generated/>");
        code.AppendLine($"// Generated Query protocol serializers for {_serviceName}");
        code.AppendLine("#nullable enable");
        code.AppendLine("#pragma warning disable CS0162 // Unreachable code detected");
        code.AppendLine("#pragma warning disable CS8600, CS8601, CS8602, CS8603, CS8604 // Null reference warnings");
        code.AppendLine();
        code.AppendLine("using System.Collections.Specialized;");
        code.AppendLine("using System.Globalization;");
        code.AppendLine("using System.Text;");
        code.AppendLine("using System.Xml;");
        code.AppendLine($"using {_sdkNamespace}.Model;");
        code.AppendLine();
        code.AppendLine("namespace LocalSqsSnsMessaging.Http.Handlers;");
        code.AppendLine();
        code.AppendLine("/// <summary>");
        code.AppendLine($"/// Generated Query protocol serializers for {_serviceName} operations.");
        code.AppendLine("/// </summary>");
        code.AppendLine($"internal static class {_serviceName}QuerySerializers");
        code.AppendLine("{");

        // Generate operation-specific serializers/deserializers
        foreach (var operation in operations.EnumerateObject())
        {
            var opName = operation.Name;
            var opValue = operation.Value;

            if (opValue.TryGetProperty("input", out var inputProp))
            {
                var inputShapeName = inputProp.GetProperty("shape").GetString()!;
                var inputShape = _shapes.GetProperty(inputShapeName);
                GenerateRequestDeserializer(code, opName, inputShape);
            }

            if (opValue.TryGetProperty("output", out var outputProp))
            {
                var outputShapeName = outputProp.GetProperty("shape").GetString()!;
                var outputShape = _shapes.GetProperty(outputShapeName);
                var resultWrapper = outputProp.TryGetProperty("resultWrapper", out var wrapper)
                    ? wrapper.GetString() ?? $"{opName}Result"
                    : $"{opName}Result";
                GenerateResponseSerializer(code, opName, outputShape, resultWrapper);
            }
            else
            {
                // Generate empty response serializer for operations without output
                GenerateEmptyResponseSerializer(code, opName);
            }
        }

        // Generate response dispatcher
        GenerateResponseDispatcher(code, operations);

        // Generate helper methods for complex types (lists, maps, structures)
        GenerateHelperMethods(code);

        code.AppendLine("}");
        return code.ToString();
    }

    private static void GenerateResponseDispatcher(StringBuilder code, JsonElement operations)
    {
        code.AppendLine("    /// <summary>");
        code.AppendLine("    /// Dispatches response serialization to the appropriate operation-specific serializer.");
        code.AppendLine("    /// </summary>");
        code.AppendLine("    internal static string SerializeResponse(object response, string operationName)");
        code.AppendLine("    {");
        code.AppendLine("        return operationName switch");
        code.AppendLine("        {");

        foreach (var operation in operations.EnumerateObject())
        {
            var opName = operation.Name;
            // Include all operations in the dispatcher (both with and without output)
            code.AppendLine($"            \"{opName}\" => Serialize{opName}Response(({opName}Response)response),");
        }

        code.AppendLine($"            _ => throw new NotSupportedException($\"Operation '{{operationName}}' does not have a response serializer.\")");
        code.AppendLine("        };");
        code.AppendLine("    }");
        code.AppendLine();
    }

    private void GenerateRequestDeserializer(StringBuilder code, string opName, JsonElement inputShape)
    {
        code.AppendLine($"    internal static {opName}Request Deserialize{opName}Request(string requestBody)");
        code.AppendLine("    {");
        code.AppendLine("        var queryParams = System.Web.HttpUtility.ParseQueryString(requestBody);");
        code.AppendLine($"        var request = new {opName}Request();");
        code.AppendLine();

        if (inputShape.TryGetProperty("members", out var members))
        {
            foreach (var member in members.EnumerateObject())
            {
                var memberName = member.Name;
                var shapeName = member.Value.GetProperty("shape").GetString()!;
                var shape = _shapes.GetProperty(shapeName);
                var shapeType = shape.GetProperty("type").GetString()!;

                code.AppendLine($"        // {memberName}");
                GenerateDeserializeMember(code, memberName, shapeName, shape, shapeType, "queryParams", "request");
                code.AppendLine();
            }
        }

        code.AppendLine("        return request;");
        code.AppendLine("    }");
        code.AppendLine();
    }

    private void GenerateDeserializeMember(StringBuilder code, string memberName, string shapeName, JsonElement shape, string shapeType, string sourceVar, string targetVar)
    {
        var csharpPropertyName = ToPascalCase(memberName);
        var variableName = ToCamelCase(memberName);

        switch (shapeType)
        {
            case "string":
                code.AppendLine($"        var {variableName}Value = {sourceVar}[\"{memberName}\"];");
                code.AppendLine($"        if ({variableName}Value != null)");
                code.AppendLine($"            {targetVar}.{csharpPropertyName} = {variableName}Value;");
                break;

            case "integer":
                code.AppendLine($"        var {variableName}Value = {sourceVar}[\"{memberName}\"];");
                code.AppendLine($"        if ({variableName}Value != null && int.TryParse({variableName}Value, out var {variableName}Parsed))");
                code.AppendLine($"            {targetVar}.{csharpPropertyName} = {variableName}Parsed;");
                break;

            case "long":
                code.AppendLine($"        var {variableName}Value = {sourceVar}[\"{memberName}\"];");
                code.AppendLine($"        if ({variableName}Value != null && long.TryParse({variableName}Value, out var {variableName}Parsed))");
                code.AppendLine($"            {targetVar}.{csharpPropertyName} = {variableName}Parsed;");
                break;

            case "boolean":
                code.AppendLine($"        var {variableName}Value = {sourceVar}[\"{memberName}\"];");
                code.AppendLine($"        if ({variableName}Value != null && bool.TryParse({variableName}Value, out var {variableName}Parsed))");
                code.AppendLine($"            {targetVar}.{csharpPropertyName} = {variableName}Parsed;");
                break;

            case "double":
                code.AppendLine($"        var {variableName}Value = {sourceVar}[\"{memberName}\"];");
                code.AppendLine($"        if ({variableName}Value != null && double.TryParse({variableName}Value, CultureInfo.InvariantCulture, out var {variableName}Parsed))");
                code.AppendLine($"            {targetVar}.{csharpPropertyName} = {variableName}Parsed;");
                break;

            case "list":
                code.AppendLine($"        {targetVar}.{csharpPropertyName} = DeserializeList_{shapeName}({sourceVar}, \"{memberName}\");");
                _generatedHelpers.Add($"DeserializeList_{shapeName}");
                break;

            case "map":
                code.AppendLine($"        {targetVar}.{csharpPropertyName} = DeserializeMap_{shapeName}({sourceVar}, \"{memberName}\");");
                _generatedHelpers.Add($"DeserializeMap_{shapeName}");
                break;

            case "structure":
                // TODO: Implement if needed
                code.AppendLine($"        // TODO: Implement structure deserialization for {csharpPropertyName} ({shapeName})");
                break;
        }
    }

    private void GenerateResponseSerializer(StringBuilder code, string opName, JsonElement outputShape, string resultWrapper)
    {
        code.AppendLine($"    internal static string Serialize{opName}Response({opName}Response response)");
        code.AppendLine("    {");
        code.AppendLine("        var sb = new StringBuilder();");
        code.AppendLine("        using (var writer = XmlWriter.Create(sb, new XmlWriterSettings { OmitXmlDeclaration = false, Encoding = Encoding.UTF8 }))");
        code.AppendLine("        {");
        code.AppendLine($"            writer.WriteStartElement(\"{opName}Response\", \"{_xmlNamespace}\");");
        code.AppendLine($"            writer.WriteStartElement(\"{resultWrapper}\");");

        if (outputShape.TryGetProperty("members", out var members))
        {
            foreach (var member in members.EnumerateObject())
            {
                var memberName = member.Name;
                var shapeName = member.Value.GetProperty("shape").GetString()!;
                var shape = _shapes.GetProperty(shapeName);
                var shapeType = shape.GetProperty("type").GetString()!;

                code.AppendLine($"            // {memberName}");
                GenerateSerializeMember(code, memberName, shapeName, shape, shapeType, "response");
            }
        }

        code.AppendLine("            writer.WriteEndElement(); // Result");
        code.AppendLine("            writer.WriteStartElement(\"ResponseMetadata\");");
        code.AppendLine("            writer.WriteElementString(\"RequestId\", System.Guid.NewGuid().ToString());");
        code.AppendLine("            writer.WriteEndElement(); // ResponseMetadata");
        code.AppendLine("            writer.WriteEndElement(); // Response");
        code.AppendLine("        }");
        code.AppendLine("        return sb.ToString();");
        code.AppendLine("    }");
        code.AppendLine();
    }

    private void GenerateEmptyResponseSerializer(StringBuilder code, string opName)
    {
        code.AppendLine($"    internal static string Serialize{opName}Response({opName}Response response)");
        code.AppendLine("    {");
        code.AppendLine("        var sb = new StringBuilder();");
        code.AppendLine("        using (var writer = XmlWriter.Create(sb, new XmlWriterSettings { OmitXmlDeclaration = false, Encoding = Encoding.UTF8 }))");
        code.AppendLine("        {");
        code.AppendLine($"            writer.WriteStartElement(\"{opName}Response\", \"{_xmlNamespace}\");");
        code.AppendLine("            writer.WriteStartElement(\"ResponseMetadata\");");
        code.AppendLine("            writer.WriteElementString(\"RequestId\", System.Guid.NewGuid().ToString());");
        code.AppendLine("            writer.WriteEndElement(); // ResponseMetadata");
        code.AppendLine("            writer.WriteEndElement(); // Response");
        code.AppendLine("        }");
        code.AppendLine("        return sb.ToString();");
        code.AppendLine("    }");
        code.AppendLine();
    }

    private void GenerateSerializeMember(StringBuilder code, string memberName, string shapeName, JsonElement shape, string shapeType, string sourceVar)
    {
        var csharpPropertyName = ToPascalCase(memberName);

        switch (shapeType)
        {
            case "string":
            case "integer":
            case "long":
            case "boolean":
            case "double":
            case "timestamp":
                code.AppendLine($"            if ({sourceVar}.{csharpPropertyName} != null)");
                code.AppendLine($"                writer.WriteElementString(\"{memberName}\", {sourceVar}.{csharpPropertyName}.ToString());");
                break;

            case "list":
                code.AppendLine($"            if ({sourceVar}.{csharpPropertyName} != null)");
                code.AppendLine($"                SerializeList_{shapeName}(writer, \"{memberName}\", {sourceVar}.{csharpPropertyName});");
                _generatedHelpers.Add($"SerializeList_{shapeName}");
                break;

            case "map":
                code.AppendLine($"            if ({sourceVar}.{csharpPropertyName} != null)");
                code.AppendLine($"                SerializeMap_{shapeName}(writer, \"{memberName}\", {sourceVar}.{csharpPropertyName});");
                _generatedHelpers.Add($"SerializeMap_{shapeName}");
                break;

            case "structure":
                code.AppendLine($"            if ({sourceVar}.{csharpPropertyName} != null)");
                code.AppendLine($"                SerializeStructure_{shapeName}(writer, \"{memberName}\", {sourceVar}.{csharpPropertyName});");
                _generatedHelpers.Add($"SerializeStructure_{shapeName}");
                break;
        }
    }

    private void GenerateHelperMethods(StringBuilder code)
    {
        code.AppendLine("    // Helper methods");
        code.AppendLine();

        // Generate all the list/map/structure helpers that were referenced
        // Keep iterating until no new helpers are added (for structures referenced by lists/maps)
        var generatedHelpers = new HashSet<string>();
        while (_generatedHelpers.Count > generatedHelpers.Count)
        {
            var helpersToGenerate = _generatedHelpers.Except(generatedHelpers).OrderBy(x => x).ToList();

            foreach (var helperName in helpersToGenerate)
            {
                generatedHelpers.Add(helperName);

                if (helperName.StartsWith("DeserializeList_", StringComparison.Ordinal))
                {
                    var shapeName = helperName.Substring("DeserializeList_".Length);
                    GenerateListDeserializer(code, shapeName);
                }
                else if (helperName.StartsWith("DeserializeMap_", StringComparison.Ordinal))
                {
                    var shapeName = helperName.Substring("DeserializeMap_".Length);
                    GenerateMapDeserializer(code, shapeName);
                }
                else if (helperName.StartsWith("SerializeList_", StringComparison.Ordinal))
                {
                    var shapeName = helperName.Substring("SerializeList_".Length);
                    GenerateListSerializer(code, shapeName);
                }
                else if (helperName.StartsWith("SerializeMap_", StringComparison.Ordinal))
                {
                    var shapeName = helperName.Substring("SerializeMap_".Length);
                    GenerateMapSerializer(code, shapeName);
                }
                else if (helperName.StartsWith("SerializeStructure_", StringComparison.Ordinal))
                {
                    var shapeName = helperName.Substring("SerializeStructure_".Length);
                    GenerateStructureSerializer(code, shapeName);
                }
                else if (helperName.StartsWith("DeserializeStructure_", StringComparison.Ordinal))
                {
                    var shapeName = helperName.Substring("DeserializeStructure_".Length);
                    GenerateStructureDeserializer(code, shapeName);
                }
            }
        }
    }

    private void GenerateListDeserializer(StringBuilder code, string shapeName)
    {
        if (!_shapes.TryGetProperty(shapeName, out var shape))
        {
            code.AppendLine($"    // TODO: Shape {shapeName} not found");
            code.AppendLine();
            return;
        }

        var memberShape = shape.GetProperty("member").GetProperty("shape").GetString()!;
        var memberType = _shapes.GetProperty(memberShape).GetProperty("type").GetString()!;

        // Determine the C# type
        string csharpType = GetCSharpType(memberShape, memberType);

        code.AppendLine($"    private static List<{csharpType}>? DeserializeList_{shapeName}(NameValueCollection queryParams, string prefix)");
        code.AppendLine("    {");
        code.AppendLine($"        var list = new List<{csharpType}>();");
        code.AppendLine("        int index = 1;");
        code.AppendLine("        while (true)");
        code.AppendLine("        {");
        code.AppendLine($"            var key = $\"{{prefix}}.member.{{index}}\";");

        if (memberType == "string")
        {
            code.AppendLine("            var value = queryParams[key];");
            code.AppendLine("            if (value != null)");
            code.AppendLine("                list.Add(value);");
            code.AppendLine("            else");
            code.AppendLine("                break;");
        }
        else if (memberType == "structure")
        {
            code.AppendLine("            // TODO: Deserialize structure from queryParams with prefix");
            code.AppendLine("            break;");
        }
        else
        {
            code.AppendLine("            // TODO: Handle other types");
            code.AppendLine("            break;");
        }

        code.AppendLine("            index++;");
        code.AppendLine("        }");
        code.AppendLine("        return list.Count > 0 ? list : null;");
        code.AppendLine("    }");
        code.AppendLine();
    }

    private void GenerateMapDeserializer(StringBuilder code, string shapeName)
    {
        if (!_shapes.TryGetProperty(shapeName, out var shape))
        {
            code.AppendLine($"    // TODO: Shape {shapeName} not found");
            code.AppendLine();
            return;
        }

        var keyShape = shape.GetProperty("key").GetProperty("shape").GetString()!;
        var valueShape = shape.GetProperty("value").GetProperty("shape").GetString()!;
        var valueType = _shapes.GetProperty(valueShape).GetProperty("type").GetString()!;

        string valueCSharType = GetCSharpType(valueShape, valueType);

        code.AppendLine($"    private static Dictionary<string, {valueCSharType}>? DeserializeMap_{shapeName}(NameValueCollection queryParams, string prefix)");
        code.AppendLine("    {");
        code.AppendLine($"        var map = new Dictionary<string, {valueCSharType}>();");
        code.AppendLine("        int index = 1;");
        code.AppendLine("        while (true)");
        code.AppendLine("        {");
        code.AppendLine($"            var keyParam = $\"{{prefix}}.entry.{{index}}.key\";");
        code.AppendLine($"            var valueParam = $\"{{prefix}}.entry.{{index}}.value\";");
        code.AppendLine("            var key = queryParams[keyParam];");

        if (valueType == "string")
        {
            code.AppendLine("            var value = queryParams[valueParam];");
            code.AppendLine("            if (key != null && value != null)");
            code.AppendLine("            {");
            code.AppendLine("                map[key] = value;");
            code.AppendLine("            }");
            code.AppendLine("            else");
            code.AppendLine("                break;");
        }
        else if (valueType == "structure")
        {
            code.AppendLine("            if (key != null)");
            code.AppendLine("            {");
            code.AppendLine($"                var structure = DeserializeStructure_{valueShape}(queryParams, valueParam);");
            code.AppendLine("                if (structure != null)");
            code.AppendLine("                {");
            code.AppendLine("                    map[key] = structure;");
            code.AppendLine("                }");
            code.AppendLine("                else");
            code.AppendLine("                {");
            code.AppendLine("                    break;");
            code.AppendLine("                }");
            code.AppendLine("            }");
            code.AppendLine("            else");
            code.AppendLine("                break;");
            _generatedHelpers.Add($"DeserializeStructure_{valueShape}");
        }
        else
        {
            code.AppendLine("            var value = queryParams[valueParam];");
            code.AppendLine("            if (key != null && value != null)");
            code.AppendLine("            {");
            code.AppendLine("                // TODO: Handle other value types");
            code.AppendLine("            }");
            code.AppendLine("            else");
            code.AppendLine("                break;");
        }
        code.AppendLine("            index++;");
        code.AppendLine("        }");
        code.AppendLine("        return map.Count > 0 ? map : null;");
        code.AppendLine("    }");
        code.AppendLine();
    }

    private void GenerateListSerializer(StringBuilder code, string shapeName)
    {
        if (!_shapes.TryGetProperty(shapeName, out var shape))
        {
            code.AppendLine($"    // TODO: Shape {shapeName} not found");
            code.AppendLine();
            return;
        }

        var memberShape = shape.GetProperty("member").GetProperty("shape").GetString()!;
        var memberType = _shapes.GetProperty(memberShape).GetProperty("type").GetString()!;
        string csharpType = GetCSharpType(memberShape, memberType);

        code.AppendLine($"    private static void SerializeList_{shapeName}(XmlWriter writer, string elementName, List<{csharpType}> list)");
        code.AppendLine("    {");
        code.AppendLine("        writer.WriteStartElement(elementName);");
        code.AppendLine("        foreach (var item in list)");
        code.AppendLine("        {");

        if (memberType == "string")
        {
            code.AppendLine("            writer.WriteElementString(\"member\", item);");
        }
        else if (memberType == "structure")
        {
            code.AppendLine($"            SerializeStructure_{memberShape}(writer, \"member\", item);");
            _generatedHelpers.Add($"SerializeStructure_{memberShape}");
        }
        else
        {
            code.AppendLine("            writer.WriteElementString(\"member\", item?.ToString() ?? \"\");");
        }

        code.AppendLine("        }");
        code.AppendLine("        writer.WriteEndElement();");
        code.AppendLine("    }");
        code.AppendLine();
    }

    private void GenerateMapSerializer(StringBuilder code, string shapeName)
    {
        if (!_shapes.TryGetProperty(shapeName, out var shape))
        {
            code.AppendLine($"    // TODO: Shape {shapeName} not found");
            code.AppendLine();
            return;
        }

        var valueShape = shape.GetProperty("value").GetProperty("shape").GetString()!;
        var valueType = _shapes.GetProperty(valueShape).GetProperty("type").GetString()!;
        string valueCSharType = GetCSharpType(valueShape, valueType);

        code.AppendLine($"    private static void SerializeMap_{shapeName}(XmlWriter writer, string elementName, Dictionary<string, {valueCSharType}> map)");
        code.AppendLine("    {");
        code.AppendLine("        writer.WriteStartElement(elementName);");
        code.AppendLine("        foreach (var kvp in map)");
        code.AppendLine("        {");
        code.AppendLine("            writer.WriteStartElement(\"entry\");");
        code.AppendLine("            writer.WriteElementString(\"key\", kvp.Key);");

        if (valueType == "string")
        {
            code.AppendLine("            writer.WriteElementString(\"value\", kvp.Value);");
        }
        else if (valueType == "structure")
        {
            code.AppendLine($"            SerializeStructure_{valueShape}(writer, \"value\", kvp.Value);");
            _generatedHelpers.Add($"SerializeStructure_{valueShape}");
        }
        else
        {
            code.AppendLine("            writer.WriteElementString(\"value\", kvp.Value?.ToString() ?? \"\");");
        }

        code.AppendLine("            writer.WriteEndElement();");
        code.AppendLine("        }");
        code.AppendLine("        writer.WriteEndElement();");
        code.AppendLine("    }");
        code.AppendLine();
    }

    private void GenerateStructureSerializer(StringBuilder code, string shapeName)
    {
        if (!_shapes.TryGetProperty(shapeName, out var shape))
        {
            code.AppendLine($"    // TODO: Shape {shapeName} not found");
            code.AppendLine();
            return;
        }

        code.AppendLine($"    private static void SerializeStructure_{shapeName}(XmlWriter writer, string elementName, {shapeName} structure)");
        code.AppendLine("    {");
        code.AppendLine("        writer.WriteStartElement(elementName);");

        if (shape.TryGetProperty("members", out var members))
        {
            foreach (var member in members.EnumerateObject())
            {
                var memberName = member.Name;
                var csharpPropertyName = ToPascalCase(memberName);
                var memberShapeName = member.Value.GetProperty("shape").GetString()!;
                var memberShape = _shapes.GetProperty(memberShapeName);
                var memberType = memberShape.GetProperty("type").GetString()!;

                if (memberType == "string")
                {
                    code.AppendLine($"        if (structure.{csharpPropertyName} != null)");
                    code.AppendLine($"            writer.WriteElementString(\"{memberName}\", structure.{csharpPropertyName});");
                }
                else if (memberType == "integer" || memberType == "long" || memberType == "boolean" || memberType == "double")
                {
                    code.AppendLine($"        if (structure.{csharpPropertyName} != null)");
                    code.AppendLine($"            writer.WriteElementString(\"{memberName}\", structure.{csharpPropertyName}.ToString());");
                }
                else if (memberType == "blob")
                {
                    code.AppendLine($"        if (structure.{csharpPropertyName} != null)");
                    code.AppendLine($"            writer.WriteElementString(\"{memberName}\", Convert.ToBase64String(structure.{csharpPropertyName}.ToArray()));");
                }
                // Add more types as needed
            }
        }

        code.AppendLine("        writer.WriteEndElement();");
        code.AppendLine("    }");
        code.AppendLine();
    }

    private void GenerateStructureDeserializer(StringBuilder code, string shapeName)
    {
        if (!_shapes.TryGetProperty(shapeName, out var shape))
        {
            code.AppendLine($"    // TODO: Shape {shapeName} not found");
            code.AppendLine();
            return;
        }

        code.AppendLine($"    private static {shapeName}? DeserializeStructure_{shapeName}(NameValueCollection queryParams, string prefix)");
        code.AppendLine("    {");
        code.AppendLine($"        var structure = new {shapeName}();");
        code.AppendLine("        var hasAnyValue = false;");
        code.AppendLine();

        if (shape.TryGetProperty("members", out var members))
        {
            foreach (var member in members.EnumerateObject())
            {
                var memberName = member.Name;
                var csharpPropertyName = ToPascalCase(memberName);
                var memberShapeName = member.Value.GetProperty("shape").GetString()!;
                var memberShape = _shapes.GetProperty(memberShapeName);
                var memberType = memberShape.GetProperty("type").GetString()!;

                code.AppendLine($"        // {memberName}");
                code.AppendLine($"        var {ToCamelCase(memberName)}Param = $\"{{prefix}}.{memberName}\";");
                code.AppendLine($"        var {ToCamelCase(memberName)}Value = queryParams[{ToCamelCase(memberName)}Param];");

                if (memberType == "string")
                {
                    code.AppendLine($"        if ({ToCamelCase(memberName)}Value != null)");
                    code.AppendLine("        {");
                    code.AppendLine($"            structure.{csharpPropertyName} = {ToCamelCase(memberName)}Value;");
                    code.AppendLine("            hasAnyValue = true;");
                    code.AppendLine("        }");
                }
                else if (memberType == "integer" || memberType == "long" || memberType == "boolean" || memberType == "double")
                {
                    string parseMethod = memberType switch
                    {
                        "integer" => "int.TryParse",
                        "long" => "long.TryParse",
                        "boolean" => "bool.TryParse",
                        "double" => "double.TryParse",
                        _ => "int.TryParse"
                    };

                    code.AppendLine($"        if ({ToCamelCase(memberName)}Value != null && {parseMethod}({ToCamelCase(memberName)}Value, out var {ToCamelCase(memberName)}Parsed))");
                    code.AppendLine("        {");
                    code.AppendLine($"            structure.{csharpPropertyName} = {ToCamelCase(memberName)}Parsed;");
                    code.AppendLine("            hasAnyValue = true;");
                    code.AppendLine("        }");
                }
                else if (memberType == "blob")
                {
                    code.AppendLine($"        if ({ToCamelCase(memberName)}Value != null)");
                    code.AppendLine("        {");
                    code.AppendLine($"            structure.{csharpPropertyName} = new MemoryStream(Convert.FromBase64String({ToCamelCase(memberName)}Value));");
                    code.AppendLine("            hasAnyValue = true;");
                    code.AppendLine("        }");
                }
                // Add more types as needed

                code.AppendLine();
            }
        }

        code.AppendLine("        return hasAnyValue ? structure : null;");
        code.AppendLine("    }");
        code.AppendLine();
    }

    private static string GetCSharpType(string shapeName, string shapeType)
    {
        return shapeType switch
        {
            "string" => "string",
            "integer" => "int",
            "long" => "long",
            "boolean" => "bool",
            "double" => "double",
            "structure" => shapeName,
            _ => "object"
        };
    }

    private static string ToCamelCase(string str)
    {
        if (string.IsNullOrEmpty(str) || char.IsLower(str[0]))
            return str;
        return char.ToLowerInvariant(str[0]) + str.Substring(1);
    }

    private static string ToPascalCase(string str)
    {
        if (string.IsNullOrEmpty(str) || char.IsUpper(str[0]))
            return str;
        return char.ToUpperInvariant(str[0]) + str.Substring(1);
    }
}
