// <auto-generated/>
// Generated Query protocol handler for Sns

using System.Buffers;
using System.Net;
using System.Net.Http.Headers;
using Amazon.SimpleNotificationService;
using Amazon.SimpleNotificationService.Model;
using Amazon.Runtime;
using LocalSqsSnsMessaging.Http;

namespace LocalSqsSnsMessaging.Http.Handlers;

/// <summary>
/// Handles Sns operations using Query protocol.
/// </summary>
internal static partial class SnsOperationHandler
{
    public static async Task<HttpResponseMessage> HandleAsync(
        HttpRequestMessage request,
        string operationName,
        InMemoryAwsBus bus,
        CancellationToken cancellationToken)
    {
        ArgumentNullException.ThrowIfNull(request);
        ArgumentNullException.ThrowIfNull(operationName);
        ArgumentNullException.ThrowIfNull(bus);

        using IAmazonSimpleNotificationService client = bus.CreateRawSnsClient();

        return operationName switch
        {
            "AddPermission" => await HandleAddPermissionAsync(request, client, cancellationToken),
            "CheckIfPhoneNumberIsOptedOut" => await HandleCheckIfPhoneNumberIsOptedOutAsync(request, client, cancellationToken),
            "ConfirmSubscription" => await HandleConfirmSubscriptionAsync(request, client, cancellationToken),
            "CreatePlatformApplication" => await HandleCreatePlatformApplicationAsync(request, client, cancellationToken),
            "CreatePlatformEndpoint" => await HandleCreatePlatformEndpointAsync(request, client, cancellationToken),
            "CreateSMSSandboxPhoneNumber" => await HandleCreateSMSSandboxPhoneNumberAsync(request, client, cancellationToken),
            "CreateTopic" => await HandleCreateTopicAsync(request, client, cancellationToken),
            "DeleteEndpoint" => await HandleDeleteEndpointAsync(request, client, cancellationToken),
            "DeletePlatformApplication" => await HandleDeletePlatformApplicationAsync(request, client, cancellationToken),
            "DeleteSMSSandboxPhoneNumber" => await HandleDeleteSMSSandboxPhoneNumberAsync(request, client, cancellationToken),
            "DeleteTopic" => await HandleDeleteTopicAsync(request, client, cancellationToken),
            "GetDataProtectionPolicy" => await HandleGetDataProtectionPolicyAsync(request, client, cancellationToken),
            "GetEndpointAttributes" => await HandleGetEndpointAttributesAsync(request, client, cancellationToken),
            "GetPlatformApplicationAttributes" => await HandleGetPlatformApplicationAttributesAsync(request, client, cancellationToken),
            "GetSMSAttributes" => await HandleGetSMSAttributesAsync(request, client, cancellationToken),
            "GetSMSSandboxAccountStatus" => await HandleGetSMSSandboxAccountStatusAsync(request, client, cancellationToken),
            "GetSubscriptionAttributes" => await HandleGetSubscriptionAttributesAsync(request, client, cancellationToken),
            "GetTopicAttributes" => await HandleGetTopicAttributesAsync(request, client, cancellationToken),
            "ListEndpointsByPlatformApplication" => await HandleListEndpointsByPlatformApplicationAsync(request, client, cancellationToken),
            "ListOriginationNumbers" => await HandleListOriginationNumbersAsync(request, client, cancellationToken),
            "ListPhoneNumbersOptedOut" => await HandleListPhoneNumbersOptedOutAsync(request, client, cancellationToken),
            "ListPlatformApplications" => await HandleListPlatformApplicationsAsync(request, client, cancellationToken),
            "ListSMSSandboxPhoneNumbers" => await HandleListSMSSandboxPhoneNumbersAsync(request, client, cancellationToken),
            "ListSubscriptions" => await HandleListSubscriptionsAsync(request, client, cancellationToken),
            "ListSubscriptionsByTopic" => await HandleListSubscriptionsByTopicAsync(request, client, cancellationToken),
            "ListTagsForResource" => await HandleListTagsForResourceAsync(request, client, cancellationToken),
            "ListTopics" => await HandleListTopicsAsync(request, client, cancellationToken),
            "OptInPhoneNumber" => await HandleOptInPhoneNumberAsync(request, client, cancellationToken),
            "Publish" => await HandlePublishAsync(request, client, cancellationToken),
            "PublishBatch" => await HandlePublishBatchAsync(request, client, cancellationToken),
            "PutDataProtectionPolicy" => await HandlePutDataProtectionPolicyAsync(request, client, cancellationToken),
            "RemovePermission" => await HandleRemovePermissionAsync(request, client, cancellationToken),
            "SetEndpointAttributes" => await HandleSetEndpointAttributesAsync(request, client, cancellationToken),
            "SetPlatformApplicationAttributes" => await HandleSetPlatformApplicationAttributesAsync(request, client, cancellationToken),
            "SetSMSAttributes" => await HandleSetSMSAttributesAsync(request, client, cancellationToken),
            "SetSubscriptionAttributes" => await HandleSetSubscriptionAttributesAsync(request, client, cancellationToken),
            "SetTopicAttributes" => await HandleSetTopicAttributesAsync(request, client, cancellationToken),
            "Subscribe" => await HandleSubscribeAsync(request, client, cancellationToken),
            "TagResource" => await HandleTagResourceAsync(request, client, cancellationToken),
            "Unsubscribe" => await HandleUnsubscribeAsync(request, client, cancellationToken),
            "UntagResource" => await HandleUntagResourceAsync(request, client, cancellationToken),
            "VerifySMSSandboxPhoneNumber" => await HandleVerifySMSSandboxPhoneNumberAsync(request, client, cancellationToken),
            _ => throw new NotSupportedException($"Sns operation '{operationName}' is not supported.")
        };
    }

    private static async Task<HttpResponseMessage> HandleAddPermissionAsync(
        HttpRequestMessage request,
        IAmazonSimpleNotificationService client,
        CancellationToken cancellationToken)
    {
        try
        {
            var requestBytes = request.Content != null ? await request.Content.ReadAsByteArrayAsync(cancellationToken).ConfigureAwait(false) : [];
            var requestObject = SnsQuerySerializers.DeserializeAddPermissionRequest(requestBytes);
            var result = await client.AddPermissionAsync(requestObject, cancellationToken).ConfigureAwait(false);

            using var pooledBuffer = PooledArrayBufferWriter.Rent();
            SnsQuerySerializers.SerializeAddPermissionResponse(result, pooledBuffer.Writer);

            var response = new HttpResponseMessage(HttpStatusCode.OK)
            {
                Content = new ByteArrayContent(pooledBuffer.Writer.WrittenMemory.ToArray())
                {
                    Headers = { ContentType = new MediaTypeHeaderValue("text/xml") { CharSet = "utf-8" } }
                }
            };
            return response;
        }
        catch (OperationCanceledException)
        {
            throw;
        }
        catch (AmazonServiceException ex)
        {
            return CreateErrorResponse(ex);
        }
    }

    private static async Task<HttpResponseMessage> HandleCheckIfPhoneNumberIsOptedOutAsync(
        HttpRequestMessage request,
        IAmazonSimpleNotificationService client,
        CancellationToken cancellationToken)
    {
        try
        {
            var requestBytes = request.Content != null ? await request.Content.ReadAsByteArrayAsync(cancellationToken).ConfigureAwait(false) : [];
            var requestObject = SnsQuerySerializers.DeserializeCheckIfPhoneNumberIsOptedOutRequest(requestBytes);
            var result = await client.CheckIfPhoneNumberIsOptedOutAsync(requestObject, cancellationToken).ConfigureAwait(false);

            using var pooledBuffer = PooledArrayBufferWriter.Rent();
            SnsQuerySerializers.SerializeCheckIfPhoneNumberIsOptedOutResponse(result, pooledBuffer.Writer);

            var response = new HttpResponseMessage(HttpStatusCode.OK)
            {
                Content = new ByteArrayContent(pooledBuffer.Writer.WrittenMemory.ToArray())
                {
                    Headers = { ContentType = new MediaTypeHeaderValue("text/xml") { CharSet = "utf-8" } }
                }
            };
            return response;
        }
        catch (OperationCanceledException)
        {
            throw;
        }
        catch (AmazonServiceException ex)
        {
            return CreateErrorResponse(ex);
        }
    }

    private static async Task<HttpResponseMessage> HandleConfirmSubscriptionAsync(
        HttpRequestMessage request,
        IAmazonSimpleNotificationService client,
        CancellationToken cancellationToken)
    {
        try
        {
            var requestBytes = request.Content != null ? await request.Content.ReadAsByteArrayAsync(cancellationToken).ConfigureAwait(false) : [];
            var requestObject = SnsQuerySerializers.DeserializeConfirmSubscriptionRequest(requestBytes);
            var result = await client.ConfirmSubscriptionAsync(requestObject, cancellationToken).ConfigureAwait(false);

            using var pooledBuffer = PooledArrayBufferWriter.Rent();
            SnsQuerySerializers.SerializeConfirmSubscriptionResponse(result, pooledBuffer.Writer);

            var response = new HttpResponseMessage(HttpStatusCode.OK)
            {
                Content = new ByteArrayContent(pooledBuffer.Writer.WrittenMemory.ToArray())
                {
                    Headers = { ContentType = new MediaTypeHeaderValue("text/xml") { CharSet = "utf-8" } }
                }
            };
            return response;
        }
        catch (OperationCanceledException)
        {
            throw;
        }
        catch (AmazonServiceException ex)
        {
            return CreateErrorResponse(ex);
        }
    }

    private static async Task<HttpResponseMessage> HandleCreatePlatformApplicationAsync(
        HttpRequestMessage request,
        IAmazonSimpleNotificationService client,
        CancellationToken cancellationToken)
    {
        try
        {
            var requestBytes = request.Content != null ? await request.Content.ReadAsByteArrayAsync(cancellationToken).ConfigureAwait(false) : [];
            var requestObject = SnsQuerySerializers.DeserializeCreatePlatformApplicationRequest(requestBytes);
            var result = await client.CreatePlatformApplicationAsync(requestObject, cancellationToken).ConfigureAwait(false);

            using var pooledBuffer = PooledArrayBufferWriter.Rent();
            SnsQuerySerializers.SerializeCreatePlatformApplicationResponse(result, pooledBuffer.Writer);

            var response = new HttpResponseMessage(HttpStatusCode.OK)
            {
                Content = new ByteArrayContent(pooledBuffer.Writer.WrittenMemory.ToArray())
                {
                    Headers = { ContentType = new MediaTypeHeaderValue("text/xml") { CharSet = "utf-8" } }
                }
            };
            return response;
        }
        catch (OperationCanceledException)
        {
            throw;
        }
        catch (AmazonServiceException ex)
        {
            return CreateErrorResponse(ex);
        }
    }

    private static async Task<HttpResponseMessage> HandleCreatePlatformEndpointAsync(
        HttpRequestMessage request,
        IAmazonSimpleNotificationService client,
        CancellationToken cancellationToken)
    {
        try
        {
            var requestBytes = request.Content != null ? await request.Content.ReadAsByteArrayAsync(cancellationToken).ConfigureAwait(false) : [];
            var requestObject = SnsQuerySerializers.DeserializeCreatePlatformEndpointRequest(requestBytes);
            var result = await client.CreatePlatformEndpointAsync(requestObject, cancellationToken).ConfigureAwait(false);

            using var pooledBuffer = PooledArrayBufferWriter.Rent();
            SnsQuerySerializers.SerializeCreatePlatformEndpointResponse(result, pooledBuffer.Writer);

            var response = new HttpResponseMessage(HttpStatusCode.OK)
            {
                Content = new ByteArrayContent(pooledBuffer.Writer.WrittenMemory.ToArray())
                {
                    Headers = { ContentType = new MediaTypeHeaderValue("text/xml") { CharSet = "utf-8" } }
                }
            };
            return response;
        }
        catch (OperationCanceledException)
        {
            throw;
        }
        catch (AmazonServiceException ex)
        {
            return CreateErrorResponse(ex);
        }
    }

    private static async Task<HttpResponseMessage> HandleCreateSMSSandboxPhoneNumberAsync(
        HttpRequestMessage request,
        IAmazonSimpleNotificationService client,
        CancellationToken cancellationToken)
    {
        try
        {
            var requestBytes = request.Content != null ? await request.Content.ReadAsByteArrayAsync(cancellationToken).ConfigureAwait(false) : [];
            var requestObject = SnsQuerySerializers.DeserializeCreateSMSSandboxPhoneNumberRequest(requestBytes);
            var result = await client.CreateSMSSandboxPhoneNumberAsync(requestObject, cancellationToken).ConfigureAwait(false);

            using var pooledBuffer = PooledArrayBufferWriter.Rent();
            SnsQuerySerializers.SerializeCreateSMSSandboxPhoneNumberResponse(result, pooledBuffer.Writer);

            var response = new HttpResponseMessage(HttpStatusCode.OK)
            {
                Content = new ByteArrayContent(pooledBuffer.Writer.WrittenMemory.ToArray())
                {
                    Headers = { ContentType = new MediaTypeHeaderValue("text/xml") { CharSet = "utf-8" } }
                }
            };
            return response;
        }
        catch (OperationCanceledException)
        {
            throw;
        }
        catch (AmazonServiceException ex)
        {
            return CreateErrorResponse(ex);
        }
    }

    private static async Task<HttpResponseMessage> HandleCreateTopicAsync(
        HttpRequestMessage request,
        IAmazonSimpleNotificationService client,
        CancellationToken cancellationToken)
    {
        try
        {
            var requestBytes = request.Content != null ? await request.Content.ReadAsByteArrayAsync(cancellationToken).ConfigureAwait(false) : [];
            var requestObject = SnsQuerySerializers.DeserializeCreateTopicRequest(requestBytes);
            var result = await client.CreateTopicAsync(requestObject, cancellationToken).ConfigureAwait(false);

            using var pooledBuffer = PooledArrayBufferWriter.Rent();
            SnsQuerySerializers.SerializeCreateTopicResponse(result, pooledBuffer.Writer);

            var response = new HttpResponseMessage(HttpStatusCode.OK)
            {
                Content = new ByteArrayContent(pooledBuffer.Writer.WrittenMemory.ToArray())
                {
                    Headers = { ContentType = new MediaTypeHeaderValue("text/xml") { CharSet = "utf-8" } }
                }
            };
            return response;
        }
        catch (OperationCanceledException)
        {
            throw;
        }
        catch (AmazonServiceException ex)
        {
            return CreateErrorResponse(ex);
        }
    }

    private static async Task<HttpResponseMessage> HandleDeleteEndpointAsync(
        HttpRequestMessage request,
        IAmazonSimpleNotificationService client,
        CancellationToken cancellationToken)
    {
        try
        {
            var requestBytes = request.Content != null ? await request.Content.ReadAsByteArrayAsync(cancellationToken).ConfigureAwait(false) : [];
            var requestObject = SnsQuerySerializers.DeserializeDeleteEndpointRequest(requestBytes);
            var result = await client.DeleteEndpointAsync(requestObject, cancellationToken).ConfigureAwait(false);

            using var pooledBuffer = PooledArrayBufferWriter.Rent();
            SnsQuerySerializers.SerializeDeleteEndpointResponse(result, pooledBuffer.Writer);

            var response = new HttpResponseMessage(HttpStatusCode.OK)
            {
                Content = new ByteArrayContent(pooledBuffer.Writer.WrittenMemory.ToArray())
                {
                    Headers = { ContentType = new MediaTypeHeaderValue("text/xml") { CharSet = "utf-8" } }
                }
            };
            return response;
        }
        catch (OperationCanceledException)
        {
            throw;
        }
        catch (AmazonServiceException ex)
        {
            return CreateErrorResponse(ex);
        }
    }

    private static async Task<HttpResponseMessage> HandleDeletePlatformApplicationAsync(
        HttpRequestMessage request,
        IAmazonSimpleNotificationService client,
        CancellationToken cancellationToken)
    {
        try
        {
            var requestBytes = request.Content != null ? await request.Content.ReadAsByteArrayAsync(cancellationToken).ConfigureAwait(false) : [];
            var requestObject = SnsQuerySerializers.DeserializeDeletePlatformApplicationRequest(requestBytes);
            var result = await client.DeletePlatformApplicationAsync(requestObject, cancellationToken).ConfigureAwait(false);

            using var pooledBuffer = PooledArrayBufferWriter.Rent();
            SnsQuerySerializers.SerializeDeletePlatformApplicationResponse(result, pooledBuffer.Writer);

            var response = new HttpResponseMessage(HttpStatusCode.OK)
            {
                Content = new ByteArrayContent(pooledBuffer.Writer.WrittenMemory.ToArray())
                {
                    Headers = { ContentType = new MediaTypeHeaderValue("text/xml") { CharSet = "utf-8" } }
                }
            };
            return response;
        }
        catch (OperationCanceledException)
        {
            throw;
        }
        catch (AmazonServiceException ex)
        {
            return CreateErrorResponse(ex);
        }
    }

    private static async Task<HttpResponseMessage> HandleDeleteSMSSandboxPhoneNumberAsync(
        HttpRequestMessage request,
        IAmazonSimpleNotificationService client,
        CancellationToken cancellationToken)
    {
        try
        {
            var requestBytes = request.Content != null ? await request.Content.ReadAsByteArrayAsync(cancellationToken).ConfigureAwait(false) : [];
            var requestObject = SnsQuerySerializers.DeserializeDeleteSMSSandboxPhoneNumberRequest(requestBytes);
            var result = await client.DeleteSMSSandboxPhoneNumberAsync(requestObject, cancellationToken).ConfigureAwait(false);

            using var pooledBuffer = PooledArrayBufferWriter.Rent();
            SnsQuerySerializers.SerializeDeleteSMSSandboxPhoneNumberResponse(result, pooledBuffer.Writer);

            var response = new HttpResponseMessage(HttpStatusCode.OK)
            {
                Content = new ByteArrayContent(pooledBuffer.Writer.WrittenMemory.ToArray())
                {
                    Headers = { ContentType = new MediaTypeHeaderValue("text/xml") { CharSet = "utf-8" } }
                }
            };
            return response;
        }
        catch (OperationCanceledException)
        {
            throw;
        }
        catch (AmazonServiceException ex)
        {
            return CreateErrorResponse(ex);
        }
    }

    private static async Task<HttpResponseMessage> HandleDeleteTopicAsync(
        HttpRequestMessage request,
        IAmazonSimpleNotificationService client,
        CancellationToken cancellationToken)
    {
        try
        {
            var requestBytes = request.Content != null ? await request.Content.ReadAsByteArrayAsync(cancellationToken).ConfigureAwait(false) : [];
            var requestObject = SnsQuerySerializers.DeserializeDeleteTopicRequest(requestBytes);
            var result = await client.DeleteTopicAsync(requestObject, cancellationToken).ConfigureAwait(false);

            using var pooledBuffer = PooledArrayBufferWriter.Rent();
            SnsQuerySerializers.SerializeDeleteTopicResponse(result, pooledBuffer.Writer);

            var response = new HttpResponseMessage(HttpStatusCode.OK)
            {
                Content = new ByteArrayContent(pooledBuffer.Writer.WrittenMemory.ToArray())
                {
                    Headers = { ContentType = new MediaTypeHeaderValue("text/xml") { CharSet = "utf-8" } }
                }
            };
            return response;
        }
        catch (OperationCanceledException)
        {
            throw;
        }
        catch (AmazonServiceException ex)
        {
            return CreateErrorResponse(ex);
        }
    }

    private static async Task<HttpResponseMessage> HandleGetDataProtectionPolicyAsync(
        HttpRequestMessage request,
        IAmazonSimpleNotificationService client,
        CancellationToken cancellationToken)
    {
        try
        {
            var requestBytes = request.Content != null ? await request.Content.ReadAsByteArrayAsync(cancellationToken).ConfigureAwait(false) : [];
            var requestObject = SnsQuerySerializers.DeserializeGetDataProtectionPolicyRequest(requestBytes);
            var result = await client.GetDataProtectionPolicyAsync(requestObject, cancellationToken).ConfigureAwait(false);

            using var pooledBuffer = PooledArrayBufferWriter.Rent();
            SnsQuerySerializers.SerializeGetDataProtectionPolicyResponse(result, pooledBuffer.Writer);

            var response = new HttpResponseMessage(HttpStatusCode.OK)
            {
                Content = new ByteArrayContent(pooledBuffer.Writer.WrittenMemory.ToArray())
                {
                    Headers = { ContentType = new MediaTypeHeaderValue("text/xml") { CharSet = "utf-8" } }
                }
            };
            return response;
        }
        catch (OperationCanceledException)
        {
            throw;
        }
        catch (AmazonServiceException ex)
        {
            return CreateErrorResponse(ex);
        }
    }

    private static async Task<HttpResponseMessage> HandleGetEndpointAttributesAsync(
        HttpRequestMessage request,
        IAmazonSimpleNotificationService client,
        CancellationToken cancellationToken)
    {
        try
        {
            var requestBytes = request.Content != null ? await request.Content.ReadAsByteArrayAsync(cancellationToken).ConfigureAwait(false) : [];
            var requestObject = SnsQuerySerializers.DeserializeGetEndpointAttributesRequest(requestBytes);
            var result = await client.GetEndpointAttributesAsync(requestObject, cancellationToken).ConfigureAwait(false);

            using var pooledBuffer = PooledArrayBufferWriter.Rent();
            SnsQuerySerializers.SerializeGetEndpointAttributesResponse(result, pooledBuffer.Writer);

            var response = new HttpResponseMessage(HttpStatusCode.OK)
            {
                Content = new ByteArrayContent(pooledBuffer.Writer.WrittenMemory.ToArray())
                {
                    Headers = { ContentType = new MediaTypeHeaderValue("text/xml") { CharSet = "utf-8" } }
                }
            };
            return response;
        }
        catch (OperationCanceledException)
        {
            throw;
        }
        catch (AmazonServiceException ex)
        {
            return CreateErrorResponse(ex);
        }
    }

    private static async Task<HttpResponseMessage> HandleGetPlatformApplicationAttributesAsync(
        HttpRequestMessage request,
        IAmazonSimpleNotificationService client,
        CancellationToken cancellationToken)
    {
        try
        {
            var requestBytes = request.Content != null ? await request.Content.ReadAsByteArrayAsync(cancellationToken).ConfigureAwait(false) : [];
            var requestObject = SnsQuerySerializers.DeserializeGetPlatformApplicationAttributesRequest(requestBytes);
            var result = await client.GetPlatformApplicationAttributesAsync(requestObject, cancellationToken).ConfigureAwait(false);

            using var pooledBuffer = PooledArrayBufferWriter.Rent();
            SnsQuerySerializers.SerializeGetPlatformApplicationAttributesResponse(result, pooledBuffer.Writer);

            var response = new HttpResponseMessage(HttpStatusCode.OK)
            {
                Content = new ByteArrayContent(pooledBuffer.Writer.WrittenMemory.ToArray())
                {
                    Headers = { ContentType = new MediaTypeHeaderValue("text/xml") { CharSet = "utf-8" } }
                }
            };
            return response;
        }
        catch (OperationCanceledException)
        {
            throw;
        }
        catch (AmazonServiceException ex)
        {
            return CreateErrorResponse(ex);
        }
    }

    private static async Task<HttpResponseMessage> HandleGetSMSAttributesAsync(
        HttpRequestMessage request,
        IAmazonSimpleNotificationService client,
        CancellationToken cancellationToken)
    {
        try
        {
            var requestBytes = request.Content != null ? await request.Content.ReadAsByteArrayAsync(cancellationToken).ConfigureAwait(false) : [];
            var requestObject = SnsQuerySerializers.DeserializeGetSMSAttributesRequest(requestBytes);
            var result = await client.GetSMSAttributesAsync(requestObject, cancellationToken).ConfigureAwait(false);

            using var pooledBuffer = PooledArrayBufferWriter.Rent();
            SnsQuerySerializers.SerializeGetSMSAttributesResponse(result, pooledBuffer.Writer);

            var response = new HttpResponseMessage(HttpStatusCode.OK)
            {
                Content = new ByteArrayContent(pooledBuffer.Writer.WrittenMemory.ToArray())
                {
                    Headers = { ContentType = new MediaTypeHeaderValue("text/xml") { CharSet = "utf-8" } }
                }
            };
            return response;
        }
        catch (OperationCanceledException)
        {
            throw;
        }
        catch (AmazonServiceException ex)
        {
            return CreateErrorResponse(ex);
        }
    }

    private static async Task<HttpResponseMessage> HandleGetSMSSandboxAccountStatusAsync(
        HttpRequestMessage request,
        IAmazonSimpleNotificationService client,
        CancellationToken cancellationToken)
    {
        try
        {
            var requestBytes = request.Content != null ? await request.Content.ReadAsByteArrayAsync(cancellationToken).ConfigureAwait(false) : [];
            var requestObject = SnsQuerySerializers.DeserializeGetSMSSandboxAccountStatusRequest(requestBytes);
            var result = await client.GetSMSSandboxAccountStatusAsync(requestObject, cancellationToken).ConfigureAwait(false);

            using var pooledBuffer = PooledArrayBufferWriter.Rent();
            SnsQuerySerializers.SerializeGetSMSSandboxAccountStatusResponse(result, pooledBuffer.Writer);

            var response = new HttpResponseMessage(HttpStatusCode.OK)
            {
                Content = new ByteArrayContent(pooledBuffer.Writer.WrittenMemory.ToArray())
                {
                    Headers = { ContentType = new MediaTypeHeaderValue("text/xml") { CharSet = "utf-8" } }
                }
            };
            return response;
        }
        catch (OperationCanceledException)
        {
            throw;
        }
        catch (AmazonServiceException ex)
        {
            return CreateErrorResponse(ex);
        }
    }

    private static async Task<HttpResponseMessage> HandleGetSubscriptionAttributesAsync(
        HttpRequestMessage request,
        IAmazonSimpleNotificationService client,
        CancellationToken cancellationToken)
    {
        try
        {
            var requestBytes = request.Content != null ? await request.Content.ReadAsByteArrayAsync(cancellationToken).ConfigureAwait(false) : [];
            var requestObject = SnsQuerySerializers.DeserializeGetSubscriptionAttributesRequest(requestBytes);
            var result = await client.GetSubscriptionAttributesAsync(requestObject, cancellationToken).ConfigureAwait(false);

            using var pooledBuffer = PooledArrayBufferWriter.Rent();
            SnsQuerySerializers.SerializeGetSubscriptionAttributesResponse(result, pooledBuffer.Writer);

            var response = new HttpResponseMessage(HttpStatusCode.OK)
            {
                Content = new ByteArrayContent(pooledBuffer.Writer.WrittenMemory.ToArray())
                {
                    Headers = { ContentType = new MediaTypeHeaderValue("text/xml") { CharSet = "utf-8" } }
                }
            };
            return response;
        }
        catch (OperationCanceledException)
        {
            throw;
        }
        catch (AmazonServiceException ex)
        {
            return CreateErrorResponse(ex);
        }
    }

    private static async Task<HttpResponseMessage> HandleGetTopicAttributesAsync(
        HttpRequestMessage request,
        IAmazonSimpleNotificationService client,
        CancellationToken cancellationToken)
    {
        try
        {
            var requestBytes = request.Content != null ? await request.Content.ReadAsByteArrayAsync(cancellationToken).ConfigureAwait(false) : [];
            var requestObject = SnsQuerySerializers.DeserializeGetTopicAttributesRequest(requestBytes);
            var result = await client.GetTopicAttributesAsync(requestObject, cancellationToken).ConfigureAwait(false);

            using var pooledBuffer = PooledArrayBufferWriter.Rent();
            SnsQuerySerializers.SerializeGetTopicAttributesResponse(result, pooledBuffer.Writer);

            var response = new HttpResponseMessage(HttpStatusCode.OK)
            {
                Content = new ByteArrayContent(pooledBuffer.Writer.WrittenMemory.ToArray())
                {
                    Headers = { ContentType = new MediaTypeHeaderValue("text/xml") { CharSet = "utf-8" } }
                }
            };
            return response;
        }
        catch (OperationCanceledException)
        {
            throw;
        }
        catch (AmazonServiceException ex)
        {
            return CreateErrorResponse(ex);
        }
    }

    private static async Task<HttpResponseMessage> HandleListEndpointsByPlatformApplicationAsync(
        HttpRequestMessage request,
        IAmazonSimpleNotificationService client,
        CancellationToken cancellationToken)
    {
        try
        {
            var requestBytes = request.Content != null ? await request.Content.ReadAsByteArrayAsync(cancellationToken).ConfigureAwait(false) : [];
            var requestObject = SnsQuerySerializers.DeserializeListEndpointsByPlatformApplicationRequest(requestBytes);
            var result = await client.ListEndpointsByPlatformApplicationAsync(requestObject, cancellationToken).ConfigureAwait(false);

            using var pooledBuffer = PooledArrayBufferWriter.Rent();
            SnsQuerySerializers.SerializeListEndpointsByPlatformApplicationResponse(result, pooledBuffer.Writer);

            var response = new HttpResponseMessage(HttpStatusCode.OK)
            {
                Content = new ByteArrayContent(pooledBuffer.Writer.WrittenMemory.ToArray())
                {
                    Headers = { ContentType = new MediaTypeHeaderValue("text/xml") { CharSet = "utf-8" } }
                }
            };
            return response;
        }
        catch (OperationCanceledException)
        {
            throw;
        }
        catch (AmazonServiceException ex)
        {
            return CreateErrorResponse(ex);
        }
    }

    private static async Task<HttpResponseMessage> HandleListOriginationNumbersAsync(
        HttpRequestMessage request,
        IAmazonSimpleNotificationService client,
        CancellationToken cancellationToken)
    {
        try
        {
            var requestBytes = request.Content != null ? await request.Content.ReadAsByteArrayAsync(cancellationToken).ConfigureAwait(false) : [];
            var requestObject = SnsQuerySerializers.DeserializeListOriginationNumbersRequest(requestBytes);
            var result = await client.ListOriginationNumbersAsync(requestObject, cancellationToken).ConfigureAwait(false);

            using var pooledBuffer = PooledArrayBufferWriter.Rent();
            SnsQuerySerializers.SerializeListOriginationNumbersResponse(result, pooledBuffer.Writer);

            var response = new HttpResponseMessage(HttpStatusCode.OK)
            {
                Content = new ByteArrayContent(pooledBuffer.Writer.WrittenMemory.ToArray())
                {
                    Headers = { ContentType = new MediaTypeHeaderValue("text/xml") { CharSet = "utf-8" } }
                }
            };
            return response;
        }
        catch (OperationCanceledException)
        {
            throw;
        }
        catch (AmazonServiceException ex)
        {
            return CreateErrorResponse(ex);
        }
    }

    private static async Task<HttpResponseMessage> HandleListPhoneNumbersOptedOutAsync(
        HttpRequestMessage request,
        IAmazonSimpleNotificationService client,
        CancellationToken cancellationToken)
    {
        try
        {
            var requestBytes = request.Content != null ? await request.Content.ReadAsByteArrayAsync(cancellationToken).ConfigureAwait(false) : [];
            var requestObject = SnsQuerySerializers.DeserializeListPhoneNumbersOptedOutRequest(requestBytes);
            var result = await client.ListPhoneNumbersOptedOutAsync(requestObject, cancellationToken).ConfigureAwait(false);

            using var pooledBuffer = PooledArrayBufferWriter.Rent();
            SnsQuerySerializers.SerializeListPhoneNumbersOptedOutResponse(result, pooledBuffer.Writer);

            var response = new HttpResponseMessage(HttpStatusCode.OK)
            {
                Content = new ByteArrayContent(pooledBuffer.Writer.WrittenMemory.ToArray())
                {
                    Headers = { ContentType = new MediaTypeHeaderValue("text/xml") { CharSet = "utf-8" } }
                }
            };
            return response;
        }
        catch (OperationCanceledException)
        {
            throw;
        }
        catch (AmazonServiceException ex)
        {
            return CreateErrorResponse(ex);
        }
    }

    private static async Task<HttpResponseMessage> HandleListPlatformApplicationsAsync(
        HttpRequestMessage request,
        IAmazonSimpleNotificationService client,
        CancellationToken cancellationToken)
    {
        try
        {
            var requestBytes = request.Content != null ? await request.Content.ReadAsByteArrayAsync(cancellationToken).ConfigureAwait(false) : [];
            var requestObject = SnsQuerySerializers.DeserializeListPlatformApplicationsRequest(requestBytes);
            var result = await client.ListPlatformApplicationsAsync(requestObject, cancellationToken).ConfigureAwait(false);

            using var pooledBuffer = PooledArrayBufferWriter.Rent();
            SnsQuerySerializers.SerializeListPlatformApplicationsResponse(result, pooledBuffer.Writer);

            var response = new HttpResponseMessage(HttpStatusCode.OK)
            {
                Content = new ByteArrayContent(pooledBuffer.Writer.WrittenMemory.ToArray())
                {
                    Headers = { ContentType = new MediaTypeHeaderValue("text/xml") { CharSet = "utf-8" } }
                }
            };
            return response;
        }
        catch (OperationCanceledException)
        {
            throw;
        }
        catch (AmazonServiceException ex)
        {
            return CreateErrorResponse(ex);
        }
    }

    private static async Task<HttpResponseMessage> HandleListSMSSandboxPhoneNumbersAsync(
        HttpRequestMessage request,
        IAmazonSimpleNotificationService client,
        CancellationToken cancellationToken)
    {
        try
        {
            var requestBytes = request.Content != null ? await request.Content.ReadAsByteArrayAsync(cancellationToken).ConfigureAwait(false) : [];
            var requestObject = SnsQuerySerializers.DeserializeListSMSSandboxPhoneNumbersRequest(requestBytes);
            var result = await client.ListSMSSandboxPhoneNumbersAsync(requestObject, cancellationToken).ConfigureAwait(false);

            using var pooledBuffer = PooledArrayBufferWriter.Rent();
            SnsQuerySerializers.SerializeListSMSSandboxPhoneNumbersResponse(result, pooledBuffer.Writer);

            var response = new HttpResponseMessage(HttpStatusCode.OK)
            {
                Content = new ByteArrayContent(pooledBuffer.Writer.WrittenMemory.ToArray())
                {
                    Headers = { ContentType = new MediaTypeHeaderValue("text/xml") { CharSet = "utf-8" } }
                }
            };
            return response;
        }
        catch (OperationCanceledException)
        {
            throw;
        }
        catch (AmazonServiceException ex)
        {
            return CreateErrorResponse(ex);
        }
    }

    private static async Task<HttpResponseMessage> HandleListSubscriptionsAsync(
        HttpRequestMessage request,
        IAmazonSimpleNotificationService client,
        CancellationToken cancellationToken)
    {
        try
        {
            var requestBytes = request.Content != null ? await request.Content.ReadAsByteArrayAsync(cancellationToken).ConfigureAwait(false) : [];
            var requestObject = SnsQuerySerializers.DeserializeListSubscriptionsRequest(requestBytes);
            var result = await client.ListSubscriptionsAsync(requestObject, cancellationToken).ConfigureAwait(false);

            using var pooledBuffer = PooledArrayBufferWriter.Rent();
            SnsQuerySerializers.SerializeListSubscriptionsResponse(result, pooledBuffer.Writer);

            var response = new HttpResponseMessage(HttpStatusCode.OK)
            {
                Content = new ByteArrayContent(pooledBuffer.Writer.WrittenMemory.ToArray())
                {
                    Headers = { ContentType = new MediaTypeHeaderValue("text/xml") { CharSet = "utf-8" } }
                }
            };
            return response;
        }
        catch (OperationCanceledException)
        {
            throw;
        }
        catch (AmazonServiceException ex)
        {
            return CreateErrorResponse(ex);
        }
    }

    private static async Task<HttpResponseMessage> HandleListSubscriptionsByTopicAsync(
        HttpRequestMessage request,
        IAmazonSimpleNotificationService client,
        CancellationToken cancellationToken)
    {
        try
        {
            var requestBytes = request.Content != null ? await request.Content.ReadAsByteArrayAsync(cancellationToken).ConfigureAwait(false) : [];
            var requestObject = SnsQuerySerializers.DeserializeListSubscriptionsByTopicRequest(requestBytes);
            var result = await client.ListSubscriptionsByTopicAsync(requestObject, cancellationToken).ConfigureAwait(false);

            using var pooledBuffer = PooledArrayBufferWriter.Rent();
            SnsQuerySerializers.SerializeListSubscriptionsByTopicResponse(result, pooledBuffer.Writer);

            var response = new HttpResponseMessage(HttpStatusCode.OK)
            {
                Content = new ByteArrayContent(pooledBuffer.Writer.WrittenMemory.ToArray())
                {
                    Headers = { ContentType = new MediaTypeHeaderValue("text/xml") { CharSet = "utf-8" } }
                }
            };
            return response;
        }
        catch (OperationCanceledException)
        {
            throw;
        }
        catch (AmazonServiceException ex)
        {
            return CreateErrorResponse(ex);
        }
    }

    private static async Task<HttpResponseMessage> HandleListTagsForResourceAsync(
        HttpRequestMessage request,
        IAmazonSimpleNotificationService client,
        CancellationToken cancellationToken)
    {
        try
        {
            var requestBytes = request.Content != null ? await request.Content.ReadAsByteArrayAsync(cancellationToken).ConfigureAwait(false) : [];
            var requestObject = SnsQuerySerializers.DeserializeListTagsForResourceRequest(requestBytes);
            var result = await client.ListTagsForResourceAsync(requestObject, cancellationToken).ConfigureAwait(false);

            using var pooledBuffer = PooledArrayBufferWriter.Rent();
            SnsQuerySerializers.SerializeListTagsForResourceResponse(result, pooledBuffer.Writer);

            var response = new HttpResponseMessage(HttpStatusCode.OK)
            {
                Content = new ByteArrayContent(pooledBuffer.Writer.WrittenMemory.ToArray())
                {
                    Headers = { ContentType = new MediaTypeHeaderValue("text/xml") { CharSet = "utf-8" } }
                }
            };
            return response;
        }
        catch (OperationCanceledException)
        {
            throw;
        }
        catch (AmazonServiceException ex)
        {
            return CreateErrorResponse(ex);
        }
    }

    private static async Task<HttpResponseMessage> HandleListTopicsAsync(
        HttpRequestMessage request,
        IAmazonSimpleNotificationService client,
        CancellationToken cancellationToken)
    {
        try
        {
            var requestBytes = request.Content != null ? await request.Content.ReadAsByteArrayAsync(cancellationToken).ConfigureAwait(false) : [];
            var requestObject = SnsQuerySerializers.DeserializeListTopicsRequest(requestBytes);
            var result = await client.ListTopicsAsync(requestObject, cancellationToken).ConfigureAwait(false);

            using var pooledBuffer = PooledArrayBufferWriter.Rent();
            SnsQuerySerializers.SerializeListTopicsResponse(result, pooledBuffer.Writer);

            var response = new HttpResponseMessage(HttpStatusCode.OK)
            {
                Content = new ByteArrayContent(pooledBuffer.Writer.WrittenMemory.ToArray())
                {
                    Headers = { ContentType = new MediaTypeHeaderValue("text/xml") { CharSet = "utf-8" } }
                }
            };
            return response;
        }
        catch (OperationCanceledException)
        {
            throw;
        }
        catch (AmazonServiceException ex)
        {
            return CreateErrorResponse(ex);
        }
    }

    private static async Task<HttpResponseMessage> HandleOptInPhoneNumberAsync(
        HttpRequestMessage request,
        IAmazonSimpleNotificationService client,
        CancellationToken cancellationToken)
    {
        try
        {
            var requestBytes = request.Content != null ? await request.Content.ReadAsByteArrayAsync(cancellationToken).ConfigureAwait(false) : [];
            var requestObject = SnsQuerySerializers.DeserializeOptInPhoneNumberRequest(requestBytes);
            var result = await client.OptInPhoneNumberAsync(requestObject, cancellationToken).ConfigureAwait(false);

            using var pooledBuffer = PooledArrayBufferWriter.Rent();
            SnsQuerySerializers.SerializeOptInPhoneNumberResponse(result, pooledBuffer.Writer);

            var response = new HttpResponseMessage(HttpStatusCode.OK)
            {
                Content = new ByteArrayContent(pooledBuffer.Writer.WrittenMemory.ToArray())
                {
                    Headers = { ContentType = new MediaTypeHeaderValue("text/xml") { CharSet = "utf-8" } }
                }
            };
            return response;
        }
        catch (OperationCanceledException)
        {
            throw;
        }
        catch (AmazonServiceException ex)
        {
            return CreateErrorResponse(ex);
        }
    }

    private static async Task<HttpResponseMessage> HandlePublishAsync(
        HttpRequestMessage request,
        IAmazonSimpleNotificationService client,
        CancellationToken cancellationToken)
    {
        try
        {
            var requestBytes = request.Content != null ? await request.Content.ReadAsByteArrayAsync(cancellationToken).ConfigureAwait(false) : [];
            var requestObject = SnsQuerySerializers.DeserializePublishRequest(requestBytes);
            var result = await client.PublishAsync(requestObject, cancellationToken).ConfigureAwait(false);

            using var pooledBuffer = PooledArrayBufferWriter.Rent();
            SnsQuerySerializers.SerializePublishResponse(result, pooledBuffer.Writer);

            var response = new HttpResponseMessage(HttpStatusCode.OK)
            {
                Content = new ByteArrayContent(pooledBuffer.Writer.WrittenMemory.ToArray())
                {
                    Headers = { ContentType = new MediaTypeHeaderValue("text/xml") { CharSet = "utf-8" } }
                }
            };
            return response;
        }
        catch (OperationCanceledException)
        {
            throw;
        }
        catch (AmazonServiceException ex)
        {
            return CreateErrorResponse(ex);
        }
    }

    private static async Task<HttpResponseMessage> HandlePublishBatchAsync(
        HttpRequestMessage request,
        IAmazonSimpleNotificationService client,
        CancellationToken cancellationToken)
    {
        try
        {
            var requestBytes = request.Content != null ? await request.Content.ReadAsByteArrayAsync(cancellationToken).ConfigureAwait(false) : [];
            var requestObject = SnsQuerySerializers.DeserializePublishBatchRequest(requestBytes);
            var result = await client.PublishBatchAsync(requestObject, cancellationToken).ConfigureAwait(false);

            using var pooledBuffer = PooledArrayBufferWriter.Rent();
            SnsQuerySerializers.SerializePublishBatchResponse(result, pooledBuffer.Writer);

            var response = new HttpResponseMessage(HttpStatusCode.OK)
            {
                Content = new ByteArrayContent(pooledBuffer.Writer.WrittenMemory.ToArray())
                {
                    Headers = { ContentType = new MediaTypeHeaderValue("text/xml") { CharSet = "utf-8" } }
                }
            };
            return response;
        }
        catch (OperationCanceledException)
        {
            throw;
        }
        catch (AmazonServiceException ex)
        {
            return CreateErrorResponse(ex);
        }
    }

    private static async Task<HttpResponseMessage> HandlePutDataProtectionPolicyAsync(
        HttpRequestMessage request,
        IAmazonSimpleNotificationService client,
        CancellationToken cancellationToken)
    {
        try
        {
            var requestBytes = request.Content != null ? await request.Content.ReadAsByteArrayAsync(cancellationToken).ConfigureAwait(false) : [];
            var requestObject = SnsQuerySerializers.DeserializePutDataProtectionPolicyRequest(requestBytes);
            var result = await client.PutDataProtectionPolicyAsync(requestObject, cancellationToken).ConfigureAwait(false);

            using var pooledBuffer = PooledArrayBufferWriter.Rent();
            SnsQuerySerializers.SerializePutDataProtectionPolicyResponse(result, pooledBuffer.Writer);

            var response = new HttpResponseMessage(HttpStatusCode.OK)
            {
                Content = new ByteArrayContent(pooledBuffer.Writer.WrittenMemory.ToArray())
                {
                    Headers = { ContentType = new MediaTypeHeaderValue("text/xml") { CharSet = "utf-8" } }
                }
            };
            return response;
        }
        catch (OperationCanceledException)
        {
            throw;
        }
        catch (AmazonServiceException ex)
        {
            return CreateErrorResponse(ex);
        }
    }

    private static async Task<HttpResponseMessage> HandleRemovePermissionAsync(
        HttpRequestMessage request,
        IAmazonSimpleNotificationService client,
        CancellationToken cancellationToken)
    {
        try
        {
            var requestBytes = request.Content != null ? await request.Content.ReadAsByteArrayAsync(cancellationToken).ConfigureAwait(false) : [];
            var requestObject = SnsQuerySerializers.DeserializeRemovePermissionRequest(requestBytes);
            var result = await client.RemovePermissionAsync(requestObject, cancellationToken).ConfigureAwait(false);

            using var pooledBuffer = PooledArrayBufferWriter.Rent();
            SnsQuerySerializers.SerializeRemovePermissionResponse(result, pooledBuffer.Writer);

            var response = new HttpResponseMessage(HttpStatusCode.OK)
            {
                Content = new ByteArrayContent(pooledBuffer.Writer.WrittenMemory.ToArray())
                {
                    Headers = { ContentType = new MediaTypeHeaderValue("text/xml") { CharSet = "utf-8" } }
                }
            };
            return response;
        }
        catch (OperationCanceledException)
        {
            throw;
        }
        catch (AmazonServiceException ex)
        {
            return CreateErrorResponse(ex);
        }
    }

    private static async Task<HttpResponseMessage> HandleSetEndpointAttributesAsync(
        HttpRequestMessage request,
        IAmazonSimpleNotificationService client,
        CancellationToken cancellationToken)
    {
        try
        {
            var requestBytes = request.Content != null ? await request.Content.ReadAsByteArrayAsync(cancellationToken).ConfigureAwait(false) : [];
            var requestObject = SnsQuerySerializers.DeserializeSetEndpointAttributesRequest(requestBytes);
            var result = await client.SetEndpointAttributesAsync(requestObject, cancellationToken).ConfigureAwait(false);

            using var pooledBuffer = PooledArrayBufferWriter.Rent();
            SnsQuerySerializers.SerializeSetEndpointAttributesResponse(result, pooledBuffer.Writer);

            var response = new HttpResponseMessage(HttpStatusCode.OK)
            {
                Content = new ByteArrayContent(pooledBuffer.Writer.WrittenMemory.ToArray())
                {
                    Headers = { ContentType = new MediaTypeHeaderValue("text/xml") { CharSet = "utf-8" } }
                }
            };
            return response;
        }
        catch (OperationCanceledException)
        {
            throw;
        }
        catch (AmazonServiceException ex)
        {
            return CreateErrorResponse(ex);
        }
    }

    private static async Task<HttpResponseMessage> HandleSetPlatformApplicationAttributesAsync(
        HttpRequestMessage request,
        IAmazonSimpleNotificationService client,
        CancellationToken cancellationToken)
    {
        try
        {
            var requestBytes = request.Content != null ? await request.Content.ReadAsByteArrayAsync(cancellationToken).ConfigureAwait(false) : [];
            var requestObject = SnsQuerySerializers.DeserializeSetPlatformApplicationAttributesRequest(requestBytes);
            var result = await client.SetPlatformApplicationAttributesAsync(requestObject, cancellationToken).ConfigureAwait(false);

            using var pooledBuffer = PooledArrayBufferWriter.Rent();
            SnsQuerySerializers.SerializeSetPlatformApplicationAttributesResponse(result, pooledBuffer.Writer);

            var response = new HttpResponseMessage(HttpStatusCode.OK)
            {
                Content = new ByteArrayContent(pooledBuffer.Writer.WrittenMemory.ToArray())
                {
                    Headers = { ContentType = new MediaTypeHeaderValue("text/xml") { CharSet = "utf-8" } }
                }
            };
            return response;
        }
        catch (OperationCanceledException)
        {
            throw;
        }
        catch (AmazonServiceException ex)
        {
            return CreateErrorResponse(ex);
        }
    }

    private static async Task<HttpResponseMessage> HandleSetSMSAttributesAsync(
        HttpRequestMessage request,
        IAmazonSimpleNotificationService client,
        CancellationToken cancellationToken)
    {
        try
        {
            var requestBytes = request.Content != null ? await request.Content.ReadAsByteArrayAsync(cancellationToken).ConfigureAwait(false) : [];
            var requestObject = SnsQuerySerializers.DeserializeSetSMSAttributesRequest(requestBytes);
            var result = await client.SetSMSAttributesAsync(requestObject, cancellationToken).ConfigureAwait(false);

            using var pooledBuffer = PooledArrayBufferWriter.Rent();
            SnsQuerySerializers.SerializeSetSMSAttributesResponse(result, pooledBuffer.Writer);

            var response = new HttpResponseMessage(HttpStatusCode.OK)
            {
                Content = new ByteArrayContent(pooledBuffer.Writer.WrittenMemory.ToArray())
                {
                    Headers = { ContentType = new MediaTypeHeaderValue("text/xml") { CharSet = "utf-8" } }
                }
            };
            return response;
        }
        catch (OperationCanceledException)
        {
            throw;
        }
        catch (AmazonServiceException ex)
        {
            return CreateErrorResponse(ex);
        }
    }

    private static async Task<HttpResponseMessage> HandleSetSubscriptionAttributesAsync(
        HttpRequestMessage request,
        IAmazonSimpleNotificationService client,
        CancellationToken cancellationToken)
    {
        try
        {
            var requestBytes = request.Content != null ? await request.Content.ReadAsByteArrayAsync(cancellationToken).ConfigureAwait(false) : [];
            var requestObject = SnsQuerySerializers.DeserializeSetSubscriptionAttributesRequest(requestBytes);
            var result = await client.SetSubscriptionAttributesAsync(requestObject, cancellationToken).ConfigureAwait(false);

            using var pooledBuffer = PooledArrayBufferWriter.Rent();
            SnsQuerySerializers.SerializeSetSubscriptionAttributesResponse(result, pooledBuffer.Writer);

            var response = new HttpResponseMessage(HttpStatusCode.OK)
            {
                Content = new ByteArrayContent(pooledBuffer.Writer.WrittenMemory.ToArray())
                {
                    Headers = { ContentType = new MediaTypeHeaderValue("text/xml") { CharSet = "utf-8" } }
                }
            };
            return response;
        }
        catch (OperationCanceledException)
        {
            throw;
        }
        catch (AmazonServiceException ex)
        {
            return CreateErrorResponse(ex);
        }
    }

    private static async Task<HttpResponseMessage> HandleSetTopicAttributesAsync(
        HttpRequestMessage request,
        IAmazonSimpleNotificationService client,
        CancellationToken cancellationToken)
    {
        try
        {
            var requestBytes = request.Content != null ? await request.Content.ReadAsByteArrayAsync(cancellationToken).ConfigureAwait(false) : [];
            var requestObject = SnsQuerySerializers.DeserializeSetTopicAttributesRequest(requestBytes);
            var result = await client.SetTopicAttributesAsync(requestObject, cancellationToken).ConfigureAwait(false);

            using var pooledBuffer = PooledArrayBufferWriter.Rent();
            SnsQuerySerializers.SerializeSetTopicAttributesResponse(result, pooledBuffer.Writer);

            var response = new HttpResponseMessage(HttpStatusCode.OK)
            {
                Content = new ByteArrayContent(pooledBuffer.Writer.WrittenMemory.ToArray())
                {
                    Headers = { ContentType = new MediaTypeHeaderValue("text/xml") { CharSet = "utf-8" } }
                }
            };
            return response;
        }
        catch (OperationCanceledException)
        {
            throw;
        }
        catch (AmazonServiceException ex)
        {
            return CreateErrorResponse(ex);
        }
    }

    private static async Task<HttpResponseMessage> HandleSubscribeAsync(
        HttpRequestMessage request,
        IAmazonSimpleNotificationService client,
        CancellationToken cancellationToken)
    {
        try
        {
            var requestBytes = request.Content != null ? await request.Content.ReadAsByteArrayAsync(cancellationToken).ConfigureAwait(false) : [];
            var requestObject = SnsQuerySerializers.DeserializeSubscribeRequest(requestBytes);
            var result = await client.SubscribeAsync(requestObject, cancellationToken).ConfigureAwait(false);

            using var pooledBuffer = PooledArrayBufferWriter.Rent();
            SnsQuerySerializers.SerializeSubscribeResponse(result, pooledBuffer.Writer);

            var response = new HttpResponseMessage(HttpStatusCode.OK)
            {
                Content = new ByteArrayContent(pooledBuffer.Writer.WrittenMemory.ToArray())
                {
                    Headers = { ContentType = new MediaTypeHeaderValue("text/xml") { CharSet = "utf-8" } }
                }
            };
            return response;
        }
        catch (OperationCanceledException)
        {
            throw;
        }
        catch (AmazonServiceException ex)
        {
            return CreateErrorResponse(ex);
        }
    }

    private static async Task<HttpResponseMessage> HandleTagResourceAsync(
        HttpRequestMessage request,
        IAmazonSimpleNotificationService client,
        CancellationToken cancellationToken)
    {
        try
        {
            var requestBytes = request.Content != null ? await request.Content.ReadAsByteArrayAsync(cancellationToken).ConfigureAwait(false) : [];
            var requestObject = SnsQuerySerializers.DeserializeTagResourceRequest(requestBytes);
            var result = await client.TagResourceAsync(requestObject, cancellationToken).ConfigureAwait(false);

            using var pooledBuffer = PooledArrayBufferWriter.Rent();
            SnsQuerySerializers.SerializeTagResourceResponse(result, pooledBuffer.Writer);

            var response = new HttpResponseMessage(HttpStatusCode.OK)
            {
                Content = new ByteArrayContent(pooledBuffer.Writer.WrittenMemory.ToArray())
                {
                    Headers = { ContentType = new MediaTypeHeaderValue("text/xml") { CharSet = "utf-8" } }
                }
            };
            return response;
        }
        catch (OperationCanceledException)
        {
            throw;
        }
        catch (AmazonServiceException ex)
        {
            return CreateErrorResponse(ex);
        }
    }

    private static async Task<HttpResponseMessage> HandleUnsubscribeAsync(
        HttpRequestMessage request,
        IAmazonSimpleNotificationService client,
        CancellationToken cancellationToken)
    {
        try
        {
            var requestBytes = request.Content != null ? await request.Content.ReadAsByteArrayAsync(cancellationToken).ConfigureAwait(false) : [];
            var requestObject = SnsQuerySerializers.DeserializeUnsubscribeRequest(requestBytes);
            var result = await client.UnsubscribeAsync(requestObject, cancellationToken).ConfigureAwait(false);

            using var pooledBuffer = PooledArrayBufferWriter.Rent();
            SnsQuerySerializers.SerializeUnsubscribeResponse(result, pooledBuffer.Writer);

            var response = new HttpResponseMessage(HttpStatusCode.OK)
            {
                Content = new ByteArrayContent(pooledBuffer.Writer.WrittenMemory.ToArray())
                {
                    Headers = { ContentType = new MediaTypeHeaderValue("text/xml") { CharSet = "utf-8" } }
                }
            };
            return response;
        }
        catch (OperationCanceledException)
        {
            throw;
        }
        catch (AmazonServiceException ex)
        {
            return CreateErrorResponse(ex);
        }
    }

    private static async Task<HttpResponseMessage> HandleUntagResourceAsync(
        HttpRequestMessage request,
        IAmazonSimpleNotificationService client,
        CancellationToken cancellationToken)
    {
        try
        {
            var requestBytes = request.Content != null ? await request.Content.ReadAsByteArrayAsync(cancellationToken).ConfigureAwait(false) : [];
            var requestObject = SnsQuerySerializers.DeserializeUntagResourceRequest(requestBytes);
            var result = await client.UntagResourceAsync(requestObject, cancellationToken).ConfigureAwait(false);

            using var pooledBuffer = PooledArrayBufferWriter.Rent();
            SnsQuerySerializers.SerializeUntagResourceResponse(result, pooledBuffer.Writer);

            var response = new HttpResponseMessage(HttpStatusCode.OK)
            {
                Content = new ByteArrayContent(pooledBuffer.Writer.WrittenMemory.ToArray())
                {
                    Headers = { ContentType = new MediaTypeHeaderValue("text/xml") { CharSet = "utf-8" } }
                }
            };
            return response;
        }
        catch (OperationCanceledException)
        {
            throw;
        }
        catch (AmazonServiceException ex)
        {
            return CreateErrorResponse(ex);
        }
    }

    private static async Task<HttpResponseMessage> HandleVerifySMSSandboxPhoneNumberAsync(
        HttpRequestMessage request,
        IAmazonSimpleNotificationService client,
        CancellationToken cancellationToken)
    {
        try
        {
            var requestBytes = request.Content != null ? await request.Content.ReadAsByteArrayAsync(cancellationToken).ConfigureAwait(false) : [];
            var requestObject = SnsQuerySerializers.DeserializeVerifySMSSandboxPhoneNumberRequest(requestBytes);
            var result = await client.VerifySMSSandboxPhoneNumberAsync(requestObject, cancellationToken).ConfigureAwait(false);

            using var pooledBuffer = PooledArrayBufferWriter.Rent();
            SnsQuerySerializers.SerializeVerifySMSSandboxPhoneNumberResponse(result, pooledBuffer.Writer);

            var response = new HttpResponseMessage(HttpStatusCode.OK)
            {
                Content = new ByteArrayContent(pooledBuffer.Writer.WrittenMemory.ToArray())
                {
                    Headers = { ContentType = new MediaTypeHeaderValue("text/xml") { CharSet = "utf-8" } }
                }
            };
            return response;
        }
        catch (OperationCanceledException)
        {
            throw;
        }
        catch (AmazonServiceException ex)
        {
            return CreateErrorResponse(ex);
        }
    }

    private static HttpResponseMessage CreateErrorResponse(Exception exception)
    {
        // Extract error code from AmazonServiceException if available
        string errorCode;
        string errorMessage;
        HttpStatusCode statusCode;

        if (exception is AmazonServiceException awsException)
        {
            errorCode = awsException.ErrorCode ?? exception.GetType().Name.Replace("Exception", "");
            errorMessage = awsException.Message;
            statusCode = awsException.StatusCode;
        }
        else
        {
            errorCode = exception.GetType().Name.Replace("Exception", "");
            errorMessage = exception.Message;
            statusCode = HttpStatusCode.InternalServerError;
        }

        var errorXml = $"""
        <?xml version="1.0" encoding="UTF-8"?>
        <ErrorResponse xmlns="http://sns.amazonaws.com/doc/2010-03-31/">
            <Error>
                <Type>Sender</Type>
                <Code>{errorCode}</Code>
                <Message>{System.Security.SecurityElement.Escape(errorMessage)}</Message>
            </Error>
            <RequestId>{Guid.NewGuid()}</RequestId>
        </ErrorResponse>
        """;

        return new HttpResponseMessage(statusCode)
        {
            Content = new StringContent(errorXml, Encoding.UTF8, "text/xml")
        };
    }
}
