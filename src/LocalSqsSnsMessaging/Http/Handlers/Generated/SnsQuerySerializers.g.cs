// <auto-generated/>
// Generated Query protocol serializers for Sns
#nullable enable
#pragma warning disable CS0162 // Unreachable code detected
#pragma warning disable CS8600, CS8601, CS8602, CS8603, CS8604 // Null reference warnings

using System.Buffers;
using System.Globalization;
using System.Text;
using System.Xml;
using Amazon.SimpleNotificationService.Model;
using LocalSqsSnsMessaging.Http;

namespace LocalSqsSnsMessaging.Http.Handlers;

/// <summary>
/// Generated Query protocol serializers for Sns operations.
/// </summary>
internal static class SnsQuerySerializers
{
    internal static AddPermissionRequest DeserializeAddPermissionRequest(ReadOnlySpan<byte> requestBytes)
    {
        var queryParams = QueryStringParser.Parse(requestBytes);
        var request = new AddPermissionRequest();

        // TopicArn
        if (queryParams.TryGetValue("TopicArn", out var topicArnValue))
            request.TopicArn = topicArnValue;

        // Label
        if (queryParams.TryGetValue("Label", out var labelValue))
            request.Label = labelValue;

        // AWSAccountId
        request.AWSAccountId = DeserializeList_DelegatesList(queryParams, "AWSAccountId");

        // ActionName
        request.ActionName = DeserializeList_ActionsList(queryParams, "ActionName");

        return request;
    }

    internal static void SerializeAddPermissionResponse(AddPermissionResponse response, IBufferWriter<byte> buffer)
    {
        using var stream = new BufferWriterStream(buffer);
        var settings = new XmlWriterSettings { OmitXmlDeclaration = false, Encoding = new System.Text.UTF8Encoding(false), CloseOutput = false };
        using var writer = XmlWriter.Create(stream, settings);
        writer.WriteStartElement("AddPermissionResponse", "http://sns.amazonaws.com/doc/2010-03-31/");
        writer.WriteStartElement("ResponseMetadata");
        writer.WriteElementString("RequestId", System.Guid.NewGuid().ToString());
        writer.WriteEndElement(); // ResponseMetadata
        writer.WriteEndElement(); // Response
        writer.Flush();
    }

    internal static CheckIfPhoneNumberIsOptedOutRequest DeserializeCheckIfPhoneNumberIsOptedOutRequest(ReadOnlySpan<byte> requestBytes)
    {
        var queryParams = QueryStringParser.Parse(requestBytes);
        var request = new CheckIfPhoneNumberIsOptedOutRequest();

        // phoneNumber
        if (queryParams.TryGetValue("phoneNumber", out var phoneNumberValue))
            request.PhoneNumber = phoneNumberValue;

        return request;
    }

    internal static void SerializeCheckIfPhoneNumberIsOptedOutResponse(CheckIfPhoneNumberIsOptedOutResponse response, IBufferWriter<byte> buffer)
    {
        using var stream = new BufferWriterStream(buffer);
        var settings = new XmlWriterSettings { OmitXmlDeclaration = false, Encoding = new System.Text.UTF8Encoding(false), CloseOutput = false };
        using var writer = XmlWriter.Create(stream, settings);
        writer.WriteStartElement("CheckIfPhoneNumberIsOptedOutResponse", "http://sns.amazonaws.com/doc/2010-03-31/");
        writer.WriteStartElement("CheckIfPhoneNumberIsOptedOutResult");
            // isOptedOut
            if (response.IsOptedOut != null)
                writer.WriteElementString("isOptedOut", response.IsOptedOut.ToString());
        writer.WriteEndElement(); // Result
        writer.WriteStartElement("ResponseMetadata");
        writer.WriteElementString("RequestId", System.Guid.NewGuid().ToString());
        writer.WriteEndElement(); // ResponseMetadata
        writer.WriteEndElement(); // Response
        writer.Flush();
    }

    internal static ConfirmSubscriptionRequest DeserializeConfirmSubscriptionRequest(ReadOnlySpan<byte> requestBytes)
    {
        var queryParams = QueryStringParser.Parse(requestBytes);
        var request = new ConfirmSubscriptionRequest();

        // TopicArn
        if (queryParams.TryGetValue("TopicArn", out var topicArnValue))
            request.TopicArn = topicArnValue;

        // Token
        if (queryParams.TryGetValue("Token", out var tokenValue))
            request.Token = tokenValue;

        // AuthenticateOnUnsubscribe
        if (queryParams.TryGetValue("AuthenticateOnUnsubscribe", out var authenticateOnUnsubscribeValue))
            request.AuthenticateOnUnsubscribe = authenticateOnUnsubscribeValue;

        return request;
    }

    internal static void SerializeConfirmSubscriptionResponse(ConfirmSubscriptionResponse response, IBufferWriter<byte> buffer)
    {
        using var stream = new BufferWriterStream(buffer);
        var settings = new XmlWriterSettings { OmitXmlDeclaration = false, Encoding = new System.Text.UTF8Encoding(false), CloseOutput = false };
        using var writer = XmlWriter.Create(stream, settings);
        writer.WriteStartElement("ConfirmSubscriptionResponse", "http://sns.amazonaws.com/doc/2010-03-31/");
        writer.WriteStartElement("ConfirmSubscriptionResult");
            // SubscriptionArn
            if (response.SubscriptionArn != null)
                writer.WriteElementString("SubscriptionArn", response.SubscriptionArn.ToString());
        writer.WriteEndElement(); // Result
        writer.WriteStartElement("ResponseMetadata");
        writer.WriteElementString("RequestId", System.Guid.NewGuid().ToString());
        writer.WriteEndElement(); // ResponseMetadata
        writer.WriteEndElement(); // Response
        writer.Flush();
    }

    internal static CreatePlatformApplicationRequest DeserializeCreatePlatformApplicationRequest(ReadOnlySpan<byte> requestBytes)
    {
        var queryParams = QueryStringParser.Parse(requestBytes);
        var request = new CreatePlatformApplicationRequest();

        // Name
        if (queryParams.TryGetValue("Name", out var nameValue))
            request.Name = nameValue;

        // Platform
        if (queryParams.TryGetValue("Platform", out var platformValue))
            request.Platform = platformValue;

        // Attributes
        request.Attributes = DeserializeMap_MapStringToString(queryParams, "Attributes");

        return request;
    }

    internal static void SerializeCreatePlatformApplicationResponse(CreatePlatformApplicationResponse response, IBufferWriter<byte> buffer)
    {
        using var stream = new BufferWriterStream(buffer);
        var settings = new XmlWriterSettings { OmitXmlDeclaration = false, Encoding = new System.Text.UTF8Encoding(false), CloseOutput = false };
        using var writer = XmlWriter.Create(stream, settings);
        writer.WriteStartElement("CreatePlatformApplicationResponse", "http://sns.amazonaws.com/doc/2010-03-31/");
        writer.WriteStartElement("CreatePlatformApplicationResult");
            // PlatformApplicationArn
            if (response.PlatformApplicationArn != null)
                writer.WriteElementString("PlatformApplicationArn", response.PlatformApplicationArn.ToString());
        writer.WriteEndElement(); // Result
        writer.WriteStartElement("ResponseMetadata");
        writer.WriteElementString("RequestId", System.Guid.NewGuid().ToString());
        writer.WriteEndElement(); // ResponseMetadata
        writer.WriteEndElement(); // Response
        writer.Flush();
    }

    internal static CreatePlatformEndpointRequest DeserializeCreatePlatformEndpointRequest(ReadOnlySpan<byte> requestBytes)
    {
        var queryParams = QueryStringParser.Parse(requestBytes);
        var request = new CreatePlatformEndpointRequest();

        // PlatformApplicationArn
        if (queryParams.TryGetValue("PlatformApplicationArn", out var platformApplicationArnValue))
            request.PlatformApplicationArn = platformApplicationArnValue;

        // Token
        if (queryParams.TryGetValue("Token", out var tokenValue))
            request.Token = tokenValue;

        // CustomUserData
        if (queryParams.TryGetValue("CustomUserData", out var customUserDataValue))
            request.CustomUserData = customUserDataValue;

        // Attributes
        request.Attributes = DeserializeMap_MapStringToString(queryParams, "Attributes");

        return request;
    }

    internal static void SerializeCreatePlatformEndpointResponse(CreatePlatformEndpointResponse response, IBufferWriter<byte> buffer)
    {
        using var stream = new BufferWriterStream(buffer);
        var settings = new XmlWriterSettings { OmitXmlDeclaration = false, Encoding = new System.Text.UTF8Encoding(false), CloseOutput = false };
        using var writer = XmlWriter.Create(stream, settings);
        writer.WriteStartElement("CreatePlatformEndpointResponse", "http://sns.amazonaws.com/doc/2010-03-31/");
        writer.WriteStartElement("CreatePlatformEndpointResult");
            // EndpointArn
            if (response.EndpointArn != null)
                writer.WriteElementString("EndpointArn", response.EndpointArn.ToString());
        writer.WriteEndElement(); // Result
        writer.WriteStartElement("ResponseMetadata");
        writer.WriteElementString("RequestId", System.Guid.NewGuid().ToString());
        writer.WriteEndElement(); // ResponseMetadata
        writer.WriteEndElement(); // Response
        writer.Flush();
    }

    internal static CreateSMSSandboxPhoneNumberRequest DeserializeCreateSMSSandboxPhoneNumberRequest(ReadOnlySpan<byte> requestBytes)
    {
        var queryParams = QueryStringParser.Parse(requestBytes);
        var request = new CreateSMSSandboxPhoneNumberRequest();

        // PhoneNumber
        if (queryParams.TryGetValue("PhoneNumber", out var phoneNumberValue))
            request.PhoneNumber = phoneNumberValue;

        // LanguageCode
        if (queryParams.TryGetValue("LanguageCode", out var languageCodeValue))
            request.LanguageCode = languageCodeValue;

        return request;
    }

    internal static void SerializeCreateSMSSandboxPhoneNumberResponse(CreateSMSSandboxPhoneNumberResponse response, IBufferWriter<byte> buffer)
    {
        using var stream = new BufferWriterStream(buffer);
        var settings = new XmlWriterSettings { OmitXmlDeclaration = false, Encoding = new System.Text.UTF8Encoding(false), CloseOutput = false };
        using var writer = XmlWriter.Create(stream, settings);
        writer.WriteStartElement("CreateSMSSandboxPhoneNumberResponse", "http://sns.amazonaws.com/doc/2010-03-31/");
        writer.WriteStartElement("CreateSMSSandboxPhoneNumberResult");
        writer.WriteEndElement(); // Result
        writer.WriteStartElement("ResponseMetadata");
        writer.WriteElementString("RequestId", System.Guid.NewGuid().ToString());
        writer.WriteEndElement(); // ResponseMetadata
        writer.WriteEndElement(); // Response
        writer.Flush();
    }

    internal static CreateTopicRequest DeserializeCreateTopicRequest(ReadOnlySpan<byte> requestBytes)
    {
        var queryParams = QueryStringParser.Parse(requestBytes);
        var request = new CreateTopicRequest();

        // Name
        if (queryParams.TryGetValue("Name", out var nameValue))
            request.Name = nameValue;

        // Attributes
        request.Attributes = DeserializeMap_TopicAttributesMap(queryParams, "Attributes");

        // Tags
        request.Tags = DeserializeList_TagList(queryParams, "Tags");

        // DataProtectionPolicy
        if (queryParams.TryGetValue("DataProtectionPolicy", out var dataProtectionPolicyValue))
            request.DataProtectionPolicy = dataProtectionPolicyValue;

        return request;
    }

    internal static void SerializeCreateTopicResponse(CreateTopicResponse response, IBufferWriter<byte> buffer)
    {
        using var stream = new BufferWriterStream(buffer);
        var settings = new XmlWriterSettings { OmitXmlDeclaration = false, Encoding = new System.Text.UTF8Encoding(false), CloseOutput = false };
        using var writer = XmlWriter.Create(stream, settings);
        writer.WriteStartElement("CreateTopicResponse", "http://sns.amazonaws.com/doc/2010-03-31/");
        writer.WriteStartElement("CreateTopicResult");
            // TopicArn
            if (response.TopicArn != null)
                writer.WriteElementString("TopicArn", response.TopicArn.ToString());
        writer.WriteEndElement(); // Result
        writer.WriteStartElement("ResponseMetadata");
        writer.WriteElementString("RequestId", System.Guid.NewGuid().ToString());
        writer.WriteEndElement(); // ResponseMetadata
        writer.WriteEndElement(); // Response
        writer.Flush();
    }

    internal static DeleteEndpointRequest DeserializeDeleteEndpointRequest(ReadOnlySpan<byte> requestBytes)
    {
        var queryParams = QueryStringParser.Parse(requestBytes);
        var request = new DeleteEndpointRequest();

        // EndpointArn
        if (queryParams.TryGetValue("EndpointArn", out var endpointArnValue))
            request.EndpointArn = endpointArnValue;

        return request;
    }

    internal static void SerializeDeleteEndpointResponse(DeleteEndpointResponse response, IBufferWriter<byte> buffer)
    {
        using var stream = new BufferWriterStream(buffer);
        var settings = new XmlWriterSettings { OmitXmlDeclaration = false, Encoding = new System.Text.UTF8Encoding(false), CloseOutput = false };
        using var writer = XmlWriter.Create(stream, settings);
        writer.WriteStartElement("DeleteEndpointResponse", "http://sns.amazonaws.com/doc/2010-03-31/");
        writer.WriteStartElement("ResponseMetadata");
        writer.WriteElementString("RequestId", System.Guid.NewGuid().ToString());
        writer.WriteEndElement(); // ResponseMetadata
        writer.WriteEndElement(); // Response
        writer.Flush();
    }

    internal static DeletePlatformApplicationRequest DeserializeDeletePlatformApplicationRequest(ReadOnlySpan<byte> requestBytes)
    {
        var queryParams = QueryStringParser.Parse(requestBytes);
        var request = new DeletePlatformApplicationRequest();

        // PlatformApplicationArn
        if (queryParams.TryGetValue("PlatformApplicationArn", out var platformApplicationArnValue))
            request.PlatformApplicationArn = platformApplicationArnValue;

        return request;
    }

    internal static void SerializeDeletePlatformApplicationResponse(DeletePlatformApplicationResponse response, IBufferWriter<byte> buffer)
    {
        using var stream = new BufferWriterStream(buffer);
        var settings = new XmlWriterSettings { OmitXmlDeclaration = false, Encoding = new System.Text.UTF8Encoding(false), CloseOutput = false };
        using var writer = XmlWriter.Create(stream, settings);
        writer.WriteStartElement("DeletePlatformApplicationResponse", "http://sns.amazonaws.com/doc/2010-03-31/");
        writer.WriteStartElement("ResponseMetadata");
        writer.WriteElementString("RequestId", System.Guid.NewGuid().ToString());
        writer.WriteEndElement(); // ResponseMetadata
        writer.WriteEndElement(); // Response
        writer.Flush();
    }

    internal static DeleteSMSSandboxPhoneNumberRequest DeserializeDeleteSMSSandboxPhoneNumberRequest(ReadOnlySpan<byte> requestBytes)
    {
        var queryParams = QueryStringParser.Parse(requestBytes);
        var request = new DeleteSMSSandboxPhoneNumberRequest();

        // PhoneNumber
        if (queryParams.TryGetValue("PhoneNumber", out var phoneNumberValue))
            request.PhoneNumber = phoneNumberValue;

        return request;
    }

    internal static void SerializeDeleteSMSSandboxPhoneNumberResponse(DeleteSMSSandboxPhoneNumberResponse response, IBufferWriter<byte> buffer)
    {
        using var stream = new BufferWriterStream(buffer);
        var settings = new XmlWriterSettings { OmitXmlDeclaration = false, Encoding = new System.Text.UTF8Encoding(false), CloseOutput = false };
        using var writer = XmlWriter.Create(stream, settings);
        writer.WriteStartElement("DeleteSMSSandboxPhoneNumberResponse", "http://sns.amazonaws.com/doc/2010-03-31/");
        writer.WriteStartElement("DeleteSMSSandboxPhoneNumberResult");
        writer.WriteEndElement(); // Result
        writer.WriteStartElement("ResponseMetadata");
        writer.WriteElementString("RequestId", System.Guid.NewGuid().ToString());
        writer.WriteEndElement(); // ResponseMetadata
        writer.WriteEndElement(); // Response
        writer.Flush();
    }

    internal static DeleteTopicRequest DeserializeDeleteTopicRequest(ReadOnlySpan<byte> requestBytes)
    {
        var queryParams = QueryStringParser.Parse(requestBytes);
        var request = new DeleteTopicRequest();

        // TopicArn
        if (queryParams.TryGetValue("TopicArn", out var topicArnValue))
            request.TopicArn = topicArnValue;

        return request;
    }

    internal static void SerializeDeleteTopicResponse(DeleteTopicResponse response, IBufferWriter<byte> buffer)
    {
        using var stream = new BufferWriterStream(buffer);
        var settings = new XmlWriterSettings { OmitXmlDeclaration = false, Encoding = new System.Text.UTF8Encoding(false), CloseOutput = false };
        using var writer = XmlWriter.Create(stream, settings);
        writer.WriteStartElement("DeleteTopicResponse", "http://sns.amazonaws.com/doc/2010-03-31/");
        writer.WriteStartElement("ResponseMetadata");
        writer.WriteElementString("RequestId", System.Guid.NewGuid().ToString());
        writer.WriteEndElement(); // ResponseMetadata
        writer.WriteEndElement(); // Response
        writer.Flush();
    }

    internal static GetDataProtectionPolicyRequest DeserializeGetDataProtectionPolicyRequest(ReadOnlySpan<byte> requestBytes)
    {
        var queryParams = QueryStringParser.Parse(requestBytes);
        var request = new GetDataProtectionPolicyRequest();

        // ResourceArn
        if (queryParams.TryGetValue("ResourceArn", out var resourceArnValue))
            request.ResourceArn = resourceArnValue;

        return request;
    }

    internal static void SerializeGetDataProtectionPolicyResponse(GetDataProtectionPolicyResponse response, IBufferWriter<byte> buffer)
    {
        using var stream = new BufferWriterStream(buffer);
        var settings = new XmlWriterSettings { OmitXmlDeclaration = false, Encoding = new System.Text.UTF8Encoding(false), CloseOutput = false };
        using var writer = XmlWriter.Create(stream, settings);
        writer.WriteStartElement("GetDataProtectionPolicyResponse", "http://sns.amazonaws.com/doc/2010-03-31/");
        writer.WriteStartElement("GetDataProtectionPolicyResult");
            // DataProtectionPolicy
            if (response.DataProtectionPolicy != null)
                writer.WriteElementString("DataProtectionPolicy", response.DataProtectionPolicy.ToString());
        writer.WriteEndElement(); // Result
        writer.WriteStartElement("ResponseMetadata");
        writer.WriteElementString("RequestId", System.Guid.NewGuid().ToString());
        writer.WriteEndElement(); // ResponseMetadata
        writer.WriteEndElement(); // Response
        writer.Flush();
    }

    internal static GetEndpointAttributesRequest DeserializeGetEndpointAttributesRequest(ReadOnlySpan<byte> requestBytes)
    {
        var queryParams = QueryStringParser.Parse(requestBytes);
        var request = new GetEndpointAttributesRequest();

        // EndpointArn
        if (queryParams.TryGetValue("EndpointArn", out var endpointArnValue))
            request.EndpointArn = endpointArnValue;

        return request;
    }

    internal static void SerializeGetEndpointAttributesResponse(GetEndpointAttributesResponse response, IBufferWriter<byte> buffer)
    {
        using var stream = new BufferWriterStream(buffer);
        var settings = new XmlWriterSettings { OmitXmlDeclaration = false, Encoding = new System.Text.UTF8Encoding(false), CloseOutput = false };
        using var writer = XmlWriter.Create(stream, settings);
        writer.WriteStartElement("GetEndpointAttributesResponse", "http://sns.amazonaws.com/doc/2010-03-31/");
        writer.WriteStartElement("GetEndpointAttributesResult");
            // Attributes
            if (response.Attributes != null)
                SerializeMap_MapStringToString(writer, "Attributes", response.Attributes);
        writer.WriteEndElement(); // Result
        writer.WriteStartElement("ResponseMetadata");
        writer.WriteElementString("RequestId", System.Guid.NewGuid().ToString());
        writer.WriteEndElement(); // ResponseMetadata
        writer.WriteEndElement(); // Response
        writer.Flush();
    }

    internal static GetPlatformApplicationAttributesRequest DeserializeGetPlatformApplicationAttributesRequest(ReadOnlySpan<byte> requestBytes)
    {
        var queryParams = QueryStringParser.Parse(requestBytes);
        var request = new GetPlatformApplicationAttributesRequest();

        // PlatformApplicationArn
        if (queryParams.TryGetValue("PlatformApplicationArn", out var platformApplicationArnValue))
            request.PlatformApplicationArn = platformApplicationArnValue;

        return request;
    }

    internal static void SerializeGetPlatformApplicationAttributesResponse(GetPlatformApplicationAttributesResponse response, IBufferWriter<byte> buffer)
    {
        using var stream = new BufferWriterStream(buffer);
        var settings = new XmlWriterSettings { OmitXmlDeclaration = false, Encoding = new System.Text.UTF8Encoding(false), CloseOutput = false };
        using var writer = XmlWriter.Create(stream, settings);
        writer.WriteStartElement("GetPlatformApplicationAttributesResponse", "http://sns.amazonaws.com/doc/2010-03-31/");
        writer.WriteStartElement("GetPlatformApplicationAttributesResult");
            // Attributes
            if (response.Attributes != null)
                SerializeMap_MapStringToString(writer, "Attributes", response.Attributes);
        writer.WriteEndElement(); // Result
        writer.WriteStartElement("ResponseMetadata");
        writer.WriteElementString("RequestId", System.Guid.NewGuid().ToString());
        writer.WriteEndElement(); // ResponseMetadata
        writer.WriteEndElement(); // Response
        writer.Flush();
    }

    internal static GetSMSAttributesRequest DeserializeGetSMSAttributesRequest(ReadOnlySpan<byte> requestBytes)
    {
        var queryParams = QueryStringParser.Parse(requestBytes);
        var request = new GetSMSAttributesRequest();

        // attributes
        request.Attributes = DeserializeList_ListString(queryParams, "attributes");

        return request;
    }

    internal static void SerializeGetSMSAttributesResponse(GetSMSAttributesResponse response, IBufferWriter<byte> buffer)
    {
        using var stream = new BufferWriterStream(buffer);
        var settings = new XmlWriterSettings { OmitXmlDeclaration = false, Encoding = new System.Text.UTF8Encoding(false), CloseOutput = false };
        using var writer = XmlWriter.Create(stream, settings);
        writer.WriteStartElement("GetSMSAttributesResponse", "http://sns.amazonaws.com/doc/2010-03-31/");
        writer.WriteStartElement("GetSMSAttributesResult");
            // attributes
            if (response.Attributes != null)
                SerializeMap_MapStringToString(writer, "attributes", response.Attributes);
        writer.WriteEndElement(); // Result
        writer.WriteStartElement("ResponseMetadata");
        writer.WriteElementString("RequestId", System.Guid.NewGuid().ToString());
        writer.WriteEndElement(); // ResponseMetadata
        writer.WriteEndElement(); // Response
        writer.Flush();
    }

    internal static GetSMSSandboxAccountStatusRequest DeserializeGetSMSSandboxAccountStatusRequest(ReadOnlySpan<byte> requestBytes)
    {
        var queryParams = QueryStringParser.Parse(requestBytes);
        var request = new GetSMSSandboxAccountStatusRequest();

        return request;
    }

    internal static void SerializeGetSMSSandboxAccountStatusResponse(GetSMSSandboxAccountStatusResponse response, IBufferWriter<byte> buffer)
    {
        using var stream = new BufferWriterStream(buffer);
        var settings = new XmlWriterSettings { OmitXmlDeclaration = false, Encoding = new System.Text.UTF8Encoding(false), CloseOutput = false };
        using var writer = XmlWriter.Create(stream, settings);
        writer.WriteStartElement("GetSMSSandboxAccountStatusResponse", "http://sns.amazonaws.com/doc/2010-03-31/");
        writer.WriteStartElement("GetSMSSandboxAccountStatusResult");
            // IsInSandbox
            if (response.IsInSandbox != null)
                writer.WriteElementString("IsInSandbox", response.IsInSandbox.ToString());
        writer.WriteEndElement(); // Result
        writer.WriteStartElement("ResponseMetadata");
        writer.WriteElementString("RequestId", System.Guid.NewGuid().ToString());
        writer.WriteEndElement(); // ResponseMetadata
        writer.WriteEndElement(); // Response
        writer.Flush();
    }

    internal static GetSubscriptionAttributesRequest DeserializeGetSubscriptionAttributesRequest(ReadOnlySpan<byte> requestBytes)
    {
        var queryParams = QueryStringParser.Parse(requestBytes);
        var request = new GetSubscriptionAttributesRequest();

        // SubscriptionArn
        if (queryParams.TryGetValue("SubscriptionArn", out var subscriptionArnValue))
            request.SubscriptionArn = subscriptionArnValue;

        return request;
    }

    internal static void SerializeGetSubscriptionAttributesResponse(GetSubscriptionAttributesResponse response, IBufferWriter<byte> buffer)
    {
        using var stream = new BufferWriterStream(buffer);
        var settings = new XmlWriterSettings { OmitXmlDeclaration = false, Encoding = new System.Text.UTF8Encoding(false), CloseOutput = false };
        using var writer = XmlWriter.Create(stream, settings);
        writer.WriteStartElement("GetSubscriptionAttributesResponse", "http://sns.amazonaws.com/doc/2010-03-31/");
        writer.WriteStartElement("GetSubscriptionAttributesResult");
            // Attributes
            if (response.Attributes != null)
                SerializeMap_SubscriptionAttributesMap(writer, "Attributes", response.Attributes);
        writer.WriteEndElement(); // Result
        writer.WriteStartElement("ResponseMetadata");
        writer.WriteElementString("RequestId", System.Guid.NewGuid().ToString());
        writer.WriteEndElement(); // ResponseMetadata
        writer.WriteEndElement(); // Response
        writer.Flush();
    }

    internal static GetTopicAttributesRequest DeserializeGetTopicAttributesRequest(ReadOnlySpan<byte> requestBytes)
    {
        var queryParams = QueryStringParser.Parse(requestBytes);
        var request = new GetTopicAttributesRequest();

        // TopicArn
        if (queryParams.TryGetValue("TopicArn", out var topicArnValue))
            request.TopicArn = topicArnValue;

        return request;
    }

    internal static void SerializeGetTopicAttributesResponse(GetTopicAttributesResponse response, IBufferWriter<byte> buffer)
    {
        using var stream = new BufferWriterStream(buffer);
        var settings = new XmlWriterSettings { OmitXmlDeclaration = false, Encoding = new System.Text.UTF8Encoding(false), CloseOutput = false };
        using var writer = XmlWriter.Create(stream, settings);
        writer.WriteStartElement("GetTopicAttributesResponse", "http://sns.amazonaws.com/doc/2010-03-31/");
        writer.WriteStartElement("GetTopicAttributesResult");
            // Attributes
            if (response.Attributes != null)
                SerializeMap_TopicAttributesMap(writer, "Attributes", response.Attributes);
        writer.WriteEndElement(); // Result
        writer.WriteStartElement("ResponseMetadata");
        writer.WriteElementString("RequestId", System.Guid.NewGuid().ToString());
        writer.WriteEndElement(); // ResponseMetadata
        writer.WriteEndElement(); // Response
        writer.Flush();
    }

    internal static ListEndpointsByPlatformApplicationRequest DeserializeListEndpointsByPlatformApplicationRequest(ReadOnlySpan<byte> requestBytes)
    {
        var queryParams = QueryStringParser.Parse(requestBytes);
        var request = new ListEndpointsByPlatformApplicationRequest();

        // PlatformApplicationArn
        if (queryParams.TryGetValue("PlatformApplicationArn", out var platformApplicationArnValue))
            request.PlatformApplicationArn = platformApplicationArnValue;

        // NextToken
        if (queryParams.TryGetValue("NextToken", out var nextTokenValue))
            request.NextToken = nextTokenValue;

        return request;
    }

    internal static void SerializeListEndpointsByPlatformApplicationResponse(ListEndpointsByPlatformApplicationResponse response, IBufferWriter<byte> buffer)
    {
        using var stream = new BufferWriterStream(buffer);
        var settings = new XmlWriterSettings { OmitXmlDeclaration = false, Encoding = new System.Text.UTF8Encoding(false), CloseOutput = false };
        using var writer = XmlWriter.Create(stream, settings);
        writer.WriteStartElement("ListEndpointsByPlatformApplicationResponse", "http://sns.amazonaws.com/doc/2010-03-31/");
        writer.WriteStartElement("ListEndpointsByPlatformApplicationResult");
            // Endpoints
            if (response.Endpoints != null)
                SerializeList_ListOfEndpoints(writer, "Endpoints", response.Endpoints);
            // NextToken
            if (response.NextToken != null)
                writer.WriteElementString("NextToken", response.NextToken.ToString());
        writer.WriteEndElement(); // Result
        writer.WriteStartElement("ResponseMetadata");
        writer.WriteElementString("RequestId", System.Guid.NewGuid().ToString());
        writer.WriteEndElement(); // ResponseMetadata
        writer.WriteEndElement(); // Response
        writer.Flush();
    }

    internal static ListOriginationNumbersRequest DeserializeListOriginationNumbersRequest(ReadOnlySpan<byte> requestBytes)
    {
        var queryParams = QueryStringParser.Parse(requestBytes);
        var request = new ListOriginationNumbersRequest();

        // NextToken
        if (queryParams.TryGetValue("NextToken", out var nextTokenValue))
            request.NextToken = nextTokenValue;

        // MaxResults
        if (queryParams.TryGetValue("MaxResults", out var maxResultsValue) && int.TryParse(maxResultsValue, out var maxResultsParsed))
            request.MaxResults = maxResultsParsed;

        return request;
    }

    internal static void SerializeListOriginationNumbersResponse(ListOriginationNumbersResponse response, IBufferWriter<byte> buffer)
    {
        using var stream = new BufferWriterStream(buffer);
        var settings = new XmlWriterSettings { OmitXmlDeclaration = false, Encoding = new System.Text.UTF8Encoding(false), CloseOutput = false };
        using var writer = XmlWriter.Create(stream, settings);
        writer.WriteStartElement("ListOriginationNumbersResponse", "http://sns.amazonaws.com/doc/2010-03-31/");
        writer.WriteStartElement("ListOriginationNumbersResult");
            // NextToken
            if (response.NextToken != null)
                writer.WriteElementString("NextToken", response.NextToken.ToString());
            // PhoneNumbers
            if (response.PhoneNumbers != null)
                SerializeList_PhoneNumberInformationList(writer, "PhoneNumbers", response.PhoneNumbers);
        writer.WriteEndElement(); // Result
        writer.WriteStartElement("ResponseMetadata");
        writer.WriteElementString("RequestId", System.Guid.NewGuid().ToString());
        writer.WriteEndElement(); // ResponseMetadata
        writer.WriteEndElement(); // Response
        writer.Flush();
    }

    internal static ListPhoneNumbersOptedOutRequest DeserializeListPhoneNumbersOptedOutRequest(ReadOnlySpan<byte> requestBytes)
    {
        var queryParams = QueryStringParser.Parse(requestBytes);
        var request = new ListPhoneNumbersOptedOutRequest();

        // nextToken
        if (queryParams.TryGetValue("nextToken", out var nextTokenValue))
            request.NextToken = nextTokenValue;

        return request;
    }

    internal static void SerializeListPhoneNumbersOptedOutResponse(ListPhoneNumbersOptedOutResponse response, IBufferWriter<byte> buffer)
    {
        using var stream = new BufferWriterStream(buffer);
        var settings = new XmlWriterSettings { OmitXmlDeclaration = false, Encoding = new System.Text.UTF8Encoding(false), CloseOutput = false };
        using var writer = XmlWriter.Create(stream, settings);
        writer.WriteStartElement("ListPhoneNumbersOptedOutResponse", "http://sns.amazonaws.com/doc/2010-03-31/");
        writer.WriteStartElement("ListPhoneNumbersOptedOutResult");
            // phoneNumbers
            if (response.PhoneNumbers != null)
                SerializeList_PhoneNumberList(writer, "phoneNumbers", response.PhoneNumbers);
            // nextToken
            if (response.NextToken != null)
                writer.WriteElementString("nextToken", response.NextToken.ToString());
        writer.WriteEndElement(); // Result
        writer.WriteStartElement("ResponseMetadata");
        writer.WriteElementString("RequestId", System.Guid.NewGuid().ToString());
        writer.WriteEndElement(); // ResponseMetadata
        writer.WriteEndElement(); // Response
        writer.Flush();
    }

    internal static ListPlatformApplicationsRequest DeserializeListPlatformApplicationsRequest(ReadOnlySpan<byte> requestBytes)
    {
        var queryParams = QueryStringParser.Parse(requestBytes);
        var request = new ListPlatformApplicationsRequest();

        // NextToken
        if (queryParams.TryGetValue("NextToken", out var nextTokenValue))
            request.NextToken = nextTokenValue;

        return request;
    }

    internal static void SerializeListPlatformApplicationsResponse(ListPlatformApplicationsResponse response, IBufferWriter<byte> buffer)
    {
        using var stream = new BufferWriterStream(buffer);
        var settings = new XmlWriterSettings { OmitXmlDeclaration = false, Encoding = new System.Text.UTF8Encoding(false), CloseOutput = false };
        using var writer = XmlWriter.Create(stream, settings);
        writer.WriteStartElement("ListPlatformApplicationsResponse", "http://sns.amazonaws.com/doc/2010-03-31/");
        writer.WriteStartElement("ListPlatformApplicationsResult");
            // PlatformApplications
            if (response.PlatformApplications != null)
                SerializeList_ListOfPlatformApplications(writer, "PlatformApplications", response.PlatformApplications);
            // NextToken
            if (response.NextToken != null)
                writer.WriteElementString("NextToken", response.NextToken.ToString());
        writer.WriteEndElement(); // Result
        writer.WriteStartElement("ResponseMetadata");
        writer.WriteElementString("RequestId", System.Guid.NewGuid().ToString());
        writer.WriteEndElement(); // ResponseMetadata
        writer.WriteEndElement(); // Response
        writer.Flush();
    }

    internal static ListSMSSandboxPhoneNumbersRequest DeserializeListSMSSandboxPhoneNumbersRequest(ReadOnlySpan<byte> requestBytes)
    {
        var queryParams = QueryStringParser.Parse(requestBytes);
        var request = new ListSMSSandboxPhoneNumbersRequest();

        // NextToken
        if (queryParams.TryGetValue("NextToken", out var nextTokenValue))
            request.NextToken = nextTokenValue;

        // MaxResults
        if (queryParams.TryGetValue("MaxResults", out var maxResultsValue) && int.TryParse(maxResultsValue, out var maxResultsParsed))
            request.MaxResults = maxResultsParsed;

        return request;
    }

    internal static void SerializeListSMSSandboxPhoneNumbersResponse(ListSMSSandboxPhoneNumbersResponse response, IBufferWriter<byte> buffer)
    {
        using var stream = new BufferWriterStream(buffer);
        var settings = new XmlWriterSettings { OmitXmlDeclaration = false, Encoding = new System.Text.UTF8Encoding(false), CloseOutput = false };
        using var writer = XmlWriter.Create(stream, settings);
        writer.WriteStartElement("ListSMSSandboxPhoneNumbersResponse", "http://sns.amazonaws.com/doc/2010-03-31/");
        writer.WriteStartElement("ListSMSSandboxPhoneNumbersResult");
            // PhoneNumbers
            if (response.PhoneNumbers != null)
                SerializeList_SMSSandboxPhoneNumberList(writer, "PhoneNumbers", response.PhoneNumbers);
            // NextToken
            if (response.NextToken != null)
                writer.WriteElementString("NextToken", response.NextToken.ToString());
        writer.WriteEndElement(); // Result
        writer.WriteStartElement("ResponseMetadata");
        writer.WriteElementString("RequestId", System.Guid.NewGuid().ToString());
        writer.WriteEndElement(); // ResponseMetadata
        writer.WriteEndElement(); // Response
        writer.Flush();
    }

    internal static ListSubscriptionsRequest DeserializeListSubscriptionsRequest(ReadOnlySpan<byte> requestBytes)
    {
        var queryParams = QueryStringParser.Parse(requestBytes);
        var request = new ListSubscriptionsRequest();

        // NextToken
        if (queryParams.TryGetValue("NextToken", out var nextTokenValue))
            request.NextToken = nextTokenValue;

        return request;
    }

    internal static void SerializeListSubscriptionsResponse(ListSubscriptionsResponse response, IBufferWriter<byte> buffer)
    {
        using var stream = new BufferWriterStream(buffer);
        var settings = new XmlWriterSettings { OmitXmlDeclaration = false, Encoding = new System.Text.UTF8Encoding(false), CloseOutput = false };
        using var writer = XmlWriter.Create(stream, settings);
        writer.WriteStartElement("ListSubscriptionsResponse", "http://sns.amazonaws.com/doc/2010-03-31/");
        writer.WriteStartElement("ListSubscriptionsResult");
            // Subscriptions
            if (response.Subscriptions != null)
                SerializeList_SubscriptionsList(writer, "Subscriptions", response.Subscriptions);
            // NextToken
            if (response.NextToken != null)
                writer.WriteElementString("NextToken", response.NextToken.ToString());
        writer.WriteEndElement(); // Result
        writer.WriteStartElement("ResponseMetadata");
        writer.WriteElementString("RequestId", System.Guid.NewGuid().ToString());
        writer.WriteEndElement(); // ResponseMetadata
        writer.WriteEndElement(); // Response
        writer.Flush();
    }

    internal static ListSubscriptionsByTopicRequest DeserializeListSubscriptionsByTopicRequest(ReadOnlySpan<byte> requestBytes)
    {
        var queryParams = QueryStringParser.Parse(requestBytes);
        var request = new ListSubscriptionsByTopicRequest();

        // TopicArn
        if (queryParams.TryGetValue("TopicArn", out var topicArnValue))
            request.TopicArn = topicArnValue;

        // NextToken
        if (queryParams.TryGetValue("NextToken", out var nextTokenValue))
            request.NextToken = nextTokenValue;

        return request;
    }

    internal static void SerializeListSubscriptionsByTopicResponse(ListSubscriptionsByTopicResponse response, IBufferWriter<byte> buffer)
    {
        using var stream = new BufferWriterStream(buffer);
        var settings = new XmlWriterSettings { OmitXmlDeclaration = false, Encoding = new System.Text.UTF8Encoding(false), CloseOutput = false };
        using var writer = XmlWriter.Create(stream, settings);
        writer.WriteStartElement("ListSubscriptionsByTopicResponse", "http://sns.amazonaws.com/doc/2010-03-31/");
        writer.WriteStartElement("ListSubscriptionsByTopicResult");
            // Subscriptions
            if (response.Subscriptions != null)
                SerializeList_SubscriptionsList(writer, "Subscriptions", response.Subscriptions);
            // NextToken
            if (response.NextToken != null)
                writer.WriteElementString("NextToken", response.NextToken.ToString());
        writer.WriteEndElement(); // Result
        writer.WriteStartElement("ResponseMetadata");
        writer.WriteElementString("RequestId", System.Guid.NewGuid().ToString());
        writer.WriteEndElement(); // ResponseMetadata
        writer.WriteEndElement(); // Response
        writer.Flush();
    }

    internal static ListTagsForResourceRequest DeserializeListTagsForResourceRequest(ReadOnlySpan<byte> requestBytes)
    {
        var queryParams = QueryStringParser.Parse(requestBytes);
        var request = new ListTagsForResourceRequest();

        // ResourceArn
        if (queryParams.TryGetValue("ResourceArn", out var resourceArnValue))
            request.ResourceArn = resourceArnValue;

        return request;
    }

    internal static void SerializeListTagsForResourceResponse(ListTagsForResourceResponse response, IBufferWriter<byte> buffer)
    {
        using var stream = new BufferWriterStream(buffer);
        var settings = new XmlWriterSettings { OmitXmlDeclaration = false, Encoding = new System.Text.UTF8Encoding(false), CloseOutput = false };
        using var writer = XmlWriter.Create(stream, settings);
        writer.WriteStartElement("ListTagsForResourceResponse", "http://sns.amazonaws.com/doc/2010-03-31/");
        writer.WriteStartElement("ListTagsForResourceResult");
            // Tags
            if (response.Tags != null)
                SerializeList_TagList(writer, "Tags", response.Tags);
        writer.WriteEndElement(); // Result
        writer.WriteStartElement("ResponseMetadata");
        writer.WriteElementString("RequestId", System.Guid.NewGuid().ToString());
        writer.WriteEndElement(); // ResponseMetadata
        writer.WriteEndElement(); // Response
        writer.Flush();
    }

    internal static ListTopicsRequest DeserializeListTopicsRequest(ReadOnlySpan<byte> requestBytes)
    {
        var queryParams = QueryStringParser.Parse(requestBytes);
        var request = new ListTopicsRequest();

        // NextToken
        if (queryParams.TryGetValue("NextToken", out var nextTokenValue))
            request.NextToken = nextTokenValue;

        return request;
    }

    internal static void SerializeListTopicsResponse(ListTopicsResponse response, IBufferWriter<byte> buffer)
    {
        using var stream = new BufferWriterStream(buffer);
        var settings = new XmlWriterSettings { OmitXmlDeclaration = false, Encoding = new System.Text.UTF8Encoding(false), CloseOutput = false };
        using var writer = XmlWriter.Create(stream, settings);
        writer.WriteStartElement("ListTopicsResponse", "http://sns.amazonaws.com/doc/2010-03-31/");
        writer.WriteStartElement("ListTopicsResult");
            // Topics
            if (response.Topics != null)
                SerializeList_TopicsList(writer, "Topics", response.Topics);
            // NextToken
            if (response.NextToken != null)
                writer.WriteElementString("NextToken", response.NextToken.ToString());
        writer.WriteEndElement(); // Result
        writer.WriteStartElement("ResponseMetadata");
        writer.WriteElementString("RequestId", System.Guid.NewGuid().ToString());
        writer.WriteEndElement(); // ResponseMetadata
        writer.WriteEndElement(); // Response
        writer.Flush();
    }

    internal static OptInPhoneNumberRequest DeserializeOptInPhoneNumberRequest(ReadOnlySpan<byte> requestBytes)
    {
        var queryParams = QueryStringParser.Parse(requestBytes);
        var request = new OptInPhoneNumberRequest();

        // phoneNumber
        if (queryParams.TryGetValue("phoneNumber", out var phoneNumberValue))
            request.PhoneNumber = phoneNumberValue;

        return request;
    }

    internal static void SerializeOptInPhoneNumberResponse(OptInPhoneNumberResponse response, IBufferWriter<byte> buffer)
    {
        using var stream = new BufferWriterStream(buffer);
        var settings = new XmlWriterSettings { OmitXmlDeclaration = false, Encoding = new System.Text.UTF8Encoding(false), CloseOutput = false };
        using var writer = XmlWriter.Create(stream, settings);
        writer.WriteStartElement("OptInPhoneNumberResponse", "http://sns.amazonaws.com/doc/2010-03-31/");
        writer.WriteStartElement("OptInPhoneNumberResult");
        writer.WriteEndElement(); // Result
        writer.WriteStartElement("ResponseMetadata");
        writer.WriteElementString("RequestId", System.Guid.NewGuid().ToString());
        writer.WriteEndElement(); // ResponseMetadata
        writer.WriteEndElement(); // Response
        writer.Flush();
    }

    internal static PublishRequest DeserializePublishRequest(ReadOnlySpan<byte> requestBytes)
    {
        var queryParams = QueryStringParser.Parse(requestBytes);
        var request = new PublishRequest();

        // TopicArn
        if (queryParams.TryGetValue("TopicArn", out var topicArnValue))
            request.TopicArn = topicArnValue;

        // TargetArn
        if (queryParams.TryGetValue("TargetArn", out var targetArnValue))
            request.TargetArn = targetArnValue;

        // PhoneNumber
        if (queryParams.TryGetValue("PhoneNumber", out var phoneNumberValue))
            request.PhoneNumber = phoneNumberValue;

        // Message
        if (queryParams.TryGetValue("Message", out var messageValue))
            request.Message = messageValue;

        // Subject
        if (queryParams.TryGetValue("Subject", out var subjectValue))
            request.Subject = subjectValue;

        // MessageStructure
        if (queryParams.TryGetValue("MessageStructure", out var messageStructureValue))
            request.MessageStructure = messageStructureValue;

        // MessageAttributes
        request.MessageAttributes = DeserializeMap_MessageAttributeMap(queryParams, "MessageAttributes");

        // MessageDeduplicationId
        if (queryParams.TryGetValue("MessageDeduplicationId", out var messageDeduplicationIdValue))
            request.MessageDeduplicationId = messageDeduplicationIdValue;

        // MessageGroupId
        if (queryParams.TryGetValue("MessageGroupId", out var messageGroupIdValue))
            request.MessageGroupId = messageGroupIdValue;

        return request;
    }

    internal static void SerializePublishResponse(PublishResponse response, IBufferWriter<byte> buffer)
    {
        using var stream = new BufferWriterStream(buffer);
        var settings = new XmlWriterSettings { OmitXmlDeclaration = false, Encoding = new System.Text.UTF8Encoding(false), CloseOutput = false };
        using var writer = XmlWriter.Create(stream, settings);
        writer.WriteStartElement("PublishResponse", "http://sns.amazonaws.com/doc/2010-03-31/");
        writer.WriteStartElement("PublishResult");
            // MessageId
            if (response.MessageId != null)
                writer.WriteElementString("MessageId", response.MessageId.ToString());
            // SequenceNumber
            if (response.SequenceNumber != null)
                writer.WriteElementString("SequenceNumber", response.SequenceNumber.ToString());
        writer.WriteEndElement(); // Result
        writer.WriteStartElement("ResponseMetadata");
        writer.WriteElementString("RequestId", System.Guid.NewGuid().ToString());
        writer.WriteEndElement(); // ResponseMetadata
        writer.WriteEndElement(); // Response
        writer.Flush();
    }

    internal static PublishBatchRequest DeserializePublishBatchRequest(ReadOnlySpan<byte> requestBytes)
    {
        var queryParams = QueryStringParser.Parse(requestBytes);
        var request = new PublishBatchRequest();

        // TopicArn
        if (queryParams.TryGetValue("TopicArn", out var topicArnValue))
            request.TopicArn = topicArnValue;

        // PublishBatchRequestEntries
        request.PublishBatchRequestEntries = DeserializeList_PublishBatchRequestEntryList(queryParams, "PublishBatchRequestEntries");

        return request;
    }

    internal static void SerializePublishBatchResponse(PublishBatchResponse response, IBufferWriter<byte> buffer)
    {
        using var stream = new BufferWriterStream(buffer);
        var settings = new XmlWriterSettings { OmitXmlDeclaration = false, Encoding = new System.Text.UTF8Encoding(false), CloseOutput = false };
        using var writer = XmlWriter.Create(stream, settings);
        writer.WriteStartElement("PublishBatchResponse", "http://sns.amazonaws.com/doc/2010-03-31/");
        writer.WriteStartElement("PublishBatchResult");
            // Successful
            if (response.Successful != null)
                SerializeList_PublishBatchResultEntryList(writer, "Successful", response.Successful);
            // Failed
            if (response.Failed != null)
                SerializeList_BatchResultErrorEntryList(writer, "Failed", response.Failed);
        writer.WriteEndElement(); // Result
        writer.WriteStartElement("ResponseMetadata");
        writer.WriteElementString("RequestId", System.Guid.NewGuid().ToString());
        writer.WriteEndElement(); // ResponseMetadata
        writer.WriteEndElement(); // Response
        writer.Flush();
    }

    internal static PutDataProtectionPolicyRequest DeserializePutDataProtectionPolicyRequest(ReadOnlySpan<byte> requestBytes)
    {
        var queryParams = QueryStringParser.Parse(requestBytes);
        var request = new PutDataProtectionPolicyRequest();

        // ResourceArn
        if (queryParams.TryGetValue("ResourceArn", out var resourceArnValue))
            request.ResourceArn = resourceArnValue;

        // DataProtectionPolicy
        if (queryParams.TryGetValue("DataProtectionPolicy", out var dataProtectionPolicyValue))
            request.DataProtectionPolicy = dataProtectionPolicyValue;

        return request;
    }

    internal static void SerializePutDataProtectionPolicyResponse(PutDataProtectionPolicyResponse response, IBufferWriter<byte> buffer)
    {
        using var stream = new BufferWriterStream(buffer);
        var settings = new XmlWriterSettings { OmitXmlDeclaration = false, Encoding = new System.Text.UTF8Encoding(false), CloseOutput = false };
        using var writer = XmlWriter.Create(stream, settings);
        writer.WriteStartElement("PutDataProtectionPolicyResponse", "http://sns.amazonaws.com/doc/2010-03-31/");
        writer.WriteStartElement("ResponseMetadata");
        writer.WriteElementString("RequestId", System.Guid.NewGuid().ToString());
        writer.WriteEndElement(); // ResponseMetadata
        writer.WriteEndElement(); // Response
        writer.Flush();
    }

    internal static RemovePermissionRequest DeserializeRemovePermissionRequest(ReadOnlySpan<byte> requestBytes)
    {
        var queryParams = QueryStringParser.Parse(requestBytes);
        var request = new RemovePermissionRequest();

        // TopicArn
        if (queryParams.TryGetValue("TopicArn", out var topicArnValue))
            request.TopicArn = topicArnValue;

        // Label
        if (queryParams.TryGetValue("Label", out var labelValue))
            request.Label = labelValue;

        return request;
    }

    internal static void SerializeRemovePermissionResponse(RemovePermissionResponse response, IBufferWriter<byte> buffer)
    {
        using var stream = new BufferWriterStream(buffer);
        var settings = new XmlWriterSettings { OmitXmlDeclaration = false, Encoding = new System.Text.UTF8Encoding(false), CloseOutput = false };
        using var writer = XmlWriter.Create(stream, settings);
        writer.WriteStartElement("RemovePermissionResponse", "http://sns.amazonaws.com/doc/2010-03-31/");
        writer.WriteStartElement("ResponseMetadata");
        writer.WriteElementString("RequestId", System.Guid.NewGuid().ToString());
        writer.WriteEndElement(); // ResponseMetadata
        writer.WriteEndElement(); // Response
        writer.Flush();
    }

    internal static SetEndpointAttributesRequest DeserializeSetEndpointAttributesRequest(ReadOnlySpan<byte> requestBytes)
    {
        var queryParams = QueryStringParser.Parse(requestBytes);
        var request = new SetEndpointAttributesRequest();

        // EndpointArn
        if (queryParams.TryGetValue("EndpointArn", out var endpointArnValue))
            request.EndpointArn = endpointArnValue;

        // Attributes
        request.Attributes = DeserializeMap_MapStringToString(queryParams, "Attributes");

        return request;
    }

    internal static void SerializeSetEndpointAttributesResponse(SetEndpointAttributesResponse response, IBufferWriter<byte> buffer)
    {
        using var stream = new BufferWriterStream(buffer);
        var settings = new XmlWriterSettings { OmitXmlDeclaration = false, Encoding = new System.Text.UTF8Encoding(false), CloseOutput = false };
        using var writer = XmlWriter.Create(stream, settings);
        writer.WriteStartElement("SetEndpointAttributesResponse", "http://sns.amazonaws.com/doc/2010-03-31/");
        writer.WriteStartElement("ResponseMetadata");
        writer.WriteElementString("RequestId", System.Guid.NewGuid().ToString());
        writer.WriteEndElement(); // ResponseMetadata
        writer.WriteEndElement(); // Response
        writer.Flush();
    }

    internal static SetPlatformApplicationAttributesRequest DeserializeSetPlatformApplicationAttributesRequest(ReadOnlySpan<byte> requestBytes)
    {
        var queryParams = QueryStringParser.Parse(requestBytes);
        var request = new SetPlatformApplicationAttributesRequest();

        // PlatformApplicationArn
        if (queryParams.TryGetValue("PlatformApplicationArn", out var platformApplicationArnValue))
            request.PlatformApplicationArn = platformApplicationArnValue;

        // Attributes
        request.Attributes = DeserializeMap_MapStringToString(queryParams, "Attributes");

        return request;
    }

    internal static void SerializeSetPlatformApplicationAttributesResponse(SetPlatformApplicationAttributesResponse response, IBufferWriter<byte> buffer)
    {
        using var stream = new BufferWriterStream(buffer);
        var settings = new XmlWriterSettings { OmitXmlDeclaration = false, Encoding = new System.Text.UTF8Encoding(false), CloseOutput = false };
        using var writer = XmlWriter.Create(stream, settings);
        writer.WriteStartElement("SetPlatformApplicationAttributesResponse", "http://sns.amazonaws.com/doc/2010-03-31/");
        writer.WriteStartElement("ResponseMetadata");
        writer.WriteElementString("RequestId", System.Guid.NewGuid().ToString());
        writer.WriteEndElement(); // ResponseMetadata
        writer.WriteEndElement(); // Response
        writer.Flush();
    }

    internal static SetSMSAttributesRequest DeserializeSetSMSAttributesRequest(ReadOnlySpan<byte> requestBytes)
    {
        var queryParams = QueryStringParser.Parse(requestBytes);
        var request = new SetSMSAttributesRequest();

        // attributes
        request.Attributes = DeserializeMap_MapStringToString(queryParams, "attributes");

        return request;
    }

    internal static void SerializeSetSMSAttributesResponse(SetSMSAttributesResponse response, IBufferWriter<byte> buffer)
    {
        using var stream = new BufferWriterStream(buffer);
        var settings = new XmlWriterSettings { OmitXmlDeclaration = false, Encoding = new System.Text.UTF8Encoding(false), CloseOutput = false };
        using var writer = XmlWriter.Create(stream, settings);
        writer.WriteStartElement("SetSMSAttributesResponse", "http://sns.amazonaws.com/doc/2010-03-31/");
        writer.WriteStartElement("SetSMSAttributesResult");
        writer.WriteEndElement(); // Result
        writer.WriteStartElement("ResponseMetadata");
        writer.WriteElementString("RequestId", System.Guid.NewGuid().ToString());
        writer.WriteEndElement(); // ResponseMetadata
        writer.WriteEndElement(); // Response
        writer.Flush();
    }

    internal static SetSubscriptionAttributesRequest DeserializeSetSubscriptionAttributesRequest(ReadOnlySpan<byte> requestBytes)
    {
        var queryParams = QueryStringParser.Parse(requestBytes);
        var request = new SetSubscriptionAttributesRequest();

        // SubscriptionArn
        if (queryParams.TryGetValue("SubscriptionArn", out var subscriptionArnValue))
            request.SubscriptionArn = subscriptionArnValue;

        // AttributeName
        if (queryParams.TryGetValue("AttributeName", out var attributeNameValue))
            request.AttributeName = attributeNameValue;

        // AttributeValue
        if (queryParams.TryGetValue("AttributeValue", out var attributeValueValue))
            request.AttributeValue = attributeValueValue;

        return request;
    }

    internal static void SerializeSetSubscriptionAttributesResponse(SetSubscriptionAttributesResponse response, IBufferWriter<byte> buffer)
    {
        using var stream = new BufferWriterStream(buffer);
        var settings = new XmlWriterSettings { OmitXmlDeclaration = false, Encoding = new System.Text.UTF8Encoding(false), CloseOutput = false };
        using var writer = XmlWriter.Create(stream, settings);
        writer.WriteStartElement("SetSubscriptionAttributesResponse", "http://sns.amazonaws.com/doc/2010-03-31/");
        writer.WriteStartElement("ResponseMetadata");
        writer.WriteElementString("RequestId", System.Guid.NewGuid().ToString());
        writer.WriteEndElement(); // ResponseMetadata
        writer.WriteEndElement(); // Response
        writer.Flush();
    }

    internal static SetTopicAttributesRequest DeserializeSetTopicAttributesRequest(ReadOnlySpan<byte> requestBytes)
    {
        var queryParams = QueryStringParser.Parse(requestBytes);
        var request = new SetTopicAttributesRequest();

        // TopicArn
        if (queryParams.TryGetValue("TopicArn", out var topicArnValue))
            request.TopicArn = topicArnValue;

        // AttributeName
        if (queryParams.TryGetValue("AttributeName", out var attributeNameValue))
            request.AttributeName = attributeNameValue;

        // AttributeValue
        if (queryParams.TryGetValue("AttributeValue", out var attributeValueValue))
            request.AttributeValue = attributeValueValue;

        return request;
    }

    internal static void SerializeSetTopicAttributesResponse(SetTopicAttributesResponse response, IBufferWriter<byte> buffer)
    {
        using var stream = new BufferWriterStream(buffer);
        var settings = new XmlWriterSettings { OmitXmlDeclaration = false, Encoding = new System.Text.UTF8Encoding(false), CloseOutput = false };
        using var writer = XmlWriter.Create(stream, settings);
        writer.WriteStartElement("SetTopicAttributesResponse", "http://sns.amazonaws.com/doc/2010-03-31/");
        writer.WriteStartElement("ResponseMetadata");
        writer.WriteElementString("RequestId", System.Guid.NewGuid().ToString());
        writer.WriteEndElement(); // ResponseMetadata
        writer.WriteEndElement(); // Response
        writer.Flush();
    }

    internal static SubscribeRequest DeserializeSubscribeRequest(ReadOnlySpan<byte> requestBytes)
    {
        var queryParams = QueryStringParser.Parse(requestBytes);
        var request = new SubscribeRequest();

        // TopicArn
        if (queryParams.TryGetValue("TopicArn", out var topicArnValue))
            request.TopicArn = topicArnValue;

        // Protocol
        if (queryParams.TryGetValue("Protocol", out var protocolValue))
            request.Protocol = protocolValue;

        // Endpoint
        if (queryParams.TryGetValue("Endpoint", out var endpointValue))
            request.Endpoint = endpointValue;

        // Attributes
        request.Attributes = DeserializeMap_SubscriptionAttributesMap(queryParams, "Attributes");

        // ReturnSubscriptionArn
        if (queryParams.TryGetValue("ReturnSubscriptionArn", out var returnSubscriptionArnValue) && bool.TryParse(returnSubscriptionArnValue, out var returnSubscriptionArnParsed))
            request.ReturnSubscriptionArn = returnSubscriptionArnParsed;

        return request;
    }

    internal static void SerializeSubscribeResponse(SubscribeResponse response, IBufferWriter<byte> buffer)
    {
        using var stream = new BufferWriterStream(buffer);
        var settings = new XmlWriterSettings { OmitXmlDeclaration = false, Encoding = new System.Text.UTF8Encoding(false), CloseOutput = false };
        using var writer = XmlWriter.Create(stream, settings);
        writer.WriteStartElement("SubscribeResponse", "http://sns.amazonaws.com/doc/2010-03-31/");
        writer.WriteStartElement("SubscribeResult");
            // SubscriptionArn
            if (response.SubscriptionArn != null)
                writer.WriteElementString("SubscriptionArn", response.SubscriptionArn.ToString());
        writer.WriteEndElement(); // Result
        writer.WriteStartElement("ResponseMetadata");
        writer.WriteElementString("RequestId", System.Guid.NewGuid().ToString());
        writer.WriteEndElement(); // ResponseMetadata
        writer.WriteEndElement(); // Response
        writer.Flush();
    }

    internal static TagResourceRequest DeserializeTagResourceRequest(ReadOnlySpan<byte> requestBytes)
    {
        var queryParams = QueryStringParser.Parse(requestBytes);
        var request = new TagResourceRequest();

        // ResourceArn
        if (queryParams.TryGetValue("ResourceArn", out var resourceArnValue))
            request.ResourceArn = resourceArnValue;

        // Tags
        request.Tags = DeserializeList_TagList(queryParams, "Tags");

        return request;
    }

    internal static void SerializeTagResourceResponse(TagResourceResponse response, IBufferWriter<byte> buffer)
    {
        using var stream = new BufferWriterStream(buffer);
        var settings = new XmlWriterSettings { OmitXmlDeclaration = false, Encoding = new System.Text.UTF8Encoding(false), CloseOutput = false };
        using var writer = XmlWriter.Create(stream, settings);
        writer.WriteStartElement("TagResourceResponse", "http://sns.amazonaws.com/doc/2010-03-31/");
        writer.WriteStartElement("TagResourceResult");
        writer.WriteEndElement(); // Result
        writer.WriteStartElement("ResponseMetadata");
        writer.WriteElementString("RequestId", System.Guid.NewGuid().ToString());
        writer.WriteEndElement(); // ResponseMetadata
        writer.WriteEndElement(); // Response
        writer.Flush();
    }

    internal static UnsubscribeRequest DeserializeUnsubscribeRequest(ReadOnlySpan<byte> requestBytes)
    {
        var queryParams = QueryStringParser.Parse(requestBytes);
        var request = new UnsubscribeRequest();

        // SubscriptionArn
        if (queryParams.TryGetValue("SubscriptionArn", out var subscriptionArnValue))
            request.SubscriptionArn = subscriptionArnValue;

        return request;
    }

    internal static void SerializeUnsubscribeResponse(UnsubscribeResponse response, IBufferWriter<byte> buffer)
    {
        using var stream = new BufferWriterStream(buffer);
        var settings = new XmlWriterSettings { OmitXmlDeclaration = false, Encoding = new System.Text.UTF8Encoding(false), CloseOutput = false };
        using var writer = XmlWriter.Create(stream, settings);
        writer.WriteStartElement("UnsubscribeResponse", "http://sns.amazonaws.com/doc/2010-03-31/");
        writer.WriteStartElement("ResponseMetadata");
        writer.WriteElementString("RequestId", System.Guid.NewGuid().ToString());
        writer.WriteEndElement(); // ResponseMetadata
        writer.WriteEndElement(); // Response
        writer.Flush();
    }

    internal static UntagResourceRequest DeserializeUntagResourceRequest(ReadOnlySpan<byte> requestBytes)
    {
        var queryParams = QueryStringParser.Parse(requestBytes);
        var request = new UntagResourceRequest();

        // ResourceArn
        if (queryParams.TryGetValue("ResourceArn", out var resourceArnValue))
            request.ResourceArn = resourceArnValue;

        // TagKeys
        request.TagKeys = DeserializeList_TagKeyList(queryParams, "TagKeys");

        return request;
    }

    internal static void SerializeUntagResourceResponse(UntagResourceResponse response, IBufferWriter<byte> buffer)
    {
        using var stream = new BufferWriterStream(buffer);
        var settings = new XmlWriterSettings { OmitXmlDeclaration = false, Encoding = new System.Text.UTF8Encoding(false), CloseOutput = false };
        using var writer = XmlWriter.Create(stream, settings);
        writer.WriteStartElement("UntagResourceResponse", "http://sns.amazonaws.com/doc/2010-03-31/");
        writer.WriteStartElement("UntagResourceResult");
        writer.WriteEndElement(); // Result
        writer.WriteStartElement("ResponseMetadata");
        writer.WriteElementString("RequestId", System.Guid.NewGuid().ToString());
        writer.WriteEndElement(); // ResponseMetadata
        writer.WriteEndElement(); // Response
        writer.Flush();
    }

    internal static VerifySMSSandboxPhoneNumberRequest DeserializeVerifySMSSandboxPhoneNumberRequest(ReadOnlySpan<byte> requestBytes)
    {
        var queryParams = QueryStringParser.Parse(requestBytes);
        var request = new VerifySMSSandboxPhoneNumberRequest();

        // PhoneNumber
        if (queryParams.TryGetValue("PhoneNumber", out var phoneNumberValue))
            request.PhoneNumber = phoneNumberValue;

        // OneTimePassword
        if (queryParams.TryGetValue("OneTimePassword", out var oneTimePasswordValue))
            request.OneTimePassword = oneTimePasswordValue;

        return request;
    }

    internal static void SerializeVerifySMSSandboxPhoneNumberResponse(VerifySMSSandboxPhoneNumberResponse response, IBufferWriter<byte> buffer)
    {
        using var stream = new BufferWriterStream(buffer);
        var settings = new XmlWriterSettings { OmitXmlDeclaration = false, Encoding = new System.Text.UTF8Encoding(false), CloseOutput = false };
        using var writer = XmlWriter.Create(stream, settings);
        writer.WriteStartElement("VerifySMSSandboxPhoneNumberResponse", "http://sns.amazonaws.com/doc/2010-03-31/");
        writer.WriteStartElement("VerifySMSSandboxPhoneNumberResult");
        writer.WriteEndElement(); // Result
        writer.WriteStartElement("ResponseMetadata");
        writer.WriteElementString("RequestId", System.Guid.NewGuid().ToString());
        writer.WriteEndElement(); // ResponseMetadata
        writer.WriteEndElement(); // Response
        writer.Flush();
    }

    // Helper methods

    private static List<string>? DeserializeList_ActionsList(Dictionary<string, string> queryParams, string prefix)
    {
        var list = new List<string>();
        int index = 1;
        while (true)
        {
            var key = $"{prefix}.member.{index}";
            if (queryParams.TryGetValue(key, out var value))
                list.Add(value);
            else
                break;
            index++;
        }
        return list.Count > 0 ? list : null;
    }

    private static List<string>? DeserializeList_DelegatesList(Dictionary<string, string> queryParams, string prefix)
    {
        var list = new List<string>();
        int index = 1;
        while (true)
        {
            var key = $"{prefix}.member.{index}";
            if (queryParams.TryGetValue(key, out var value))
                list.Add(value);
            else
                break;
            index++;
        }
        return list.Count > 0 ? list : null;
    }

    private static List<string>? DeserializeList_ListString(Dictionary<string, string> queryParams, string prefix)
    {
        var list = new List<string>();
        int index = 1;
        while (true)
        {
            var key = $"{prefix}.member.{index}";
            if (queryParams.TryGetValue(key, out var value))
                list.Add(value);
            else
                break;
            index++;
        }
        return list.Count > 0 ? list : null;
    }

    private static List<PublishBatchRequestEntry>? DeserializeList_PublishBatchRequestEntryList(Dictionary<string, string> queryParams, string prefix)
    {
        var list = new List<PublishBatchRequestEntry>();
        int index = 1;
        while (true)
        {
            var key = $"{prefix}.member.{index}";
            var item = DeserializeStructure_PublishBatchRequestEntry(queryParams, key);
            if (item != null)
                list.Add(item);
            else
                break;
            index++;
        }
        return list.Count > 0 ? list : null;
    }

    private static List<string>? DeserializeList_TagKeyList(Dictionary<string, string> queryParams, string prefix)
    {
        var list = new List<string>();
        int index = 1;
        while (true)
        {
            var key = $"{prefix}.member.{index}";
            if (queryParams.TryGetValue(key, out var value))
                list.Add(value);
            else
                break;
            index++;
        }
        return list.Count > 0 ? list : null;
    }

    private static List<Tag>? DeserializeList_TagList(Dictionary<string, string> queryParams, string prefix)
    {
        var list = new List<Tag>();
        int index = 1;
        while (true)
        {
            var key = $"{prefix}.member.{index}";
            var item = DeserializeStructure_Tag(queryParams, key);
            if (item != null)
                list.Add(item);
            else
                break;
            index++;
        }
        return list.Count > 0 ? list : null;
    }

    private static Dictionary<string, string>? DeserializeMap_MapStringToString(Dictionary<string, string> queryParams, string prefix)
    {
        var map = new Dictionary<string, string>();
        int index = 1;
        while (true)
        {
            var keyParam = $"{prefix}.entry.{index}.key";
            var valueParam = $"{prefix}.entry.{index}.value";
            if (!queryParams.TryGetValue(keyParam, out var key))
                break;

            if (queryParams.TryGetValue(valueParam, out var value))
            {
                map[key] = value;
            }
            else
                break;
            index++;
        }
        return map.Count > 0 ? map : null;
    }

    private static Dictionary<string, MessageAttributeValue>? DeserializeMap_MessageAttributeMap(Dictionary<string, string> queryParams, string prefix)
    {
        var map = new Dictionary<string, MessageAttributeValue>();
        int index = 1;
        while (true)
        {
            var keyParam = $"{prefix}.entry.{index}.Name";
            var valueParam = $"{prefix}.entry.{index}.Value";
            if (!queryParams.TryGetValue(keyParam, out var key))
                break;

            if (key != null)
            {
                var structure = DeserializeStructure_MessageAttributeValue(queryParams, valueParam);
                if (structure != null)
                {
                    map[key] = structure;
                }
                else
                {
                    break;
                }
            }
            else
                break;
            index++;
        }
        return map.Count > 0 ? map : null;
    }

    private static Dictionary<string, string>? DeserializeMap_SubscriptionAttributesMap(Dictionary<string, string> queryParams, string prefix)
    {
        var map = new Dictionary<string, string>();
        int index = 1;
        while (true)
        {
            var keyParam = $"{prefix}.entry.{index}.key";
            var valueParam = $"{prefix}.entry.{index}.value";
            if (!queryParams.TryGetValue(keyParam, out var key))
                break;

            if (queryParams.TryGetValue(valueParam, out var value))
            {
                map[key] = value;
            }
            else
                break;
            index++;
        }
        return map.Count > 0 ? map : null;
    }

    private static Dictionary<string, string>? DeserializeMap_TopicAttributesMap(Dictionary<string, string> queryParams, string prefix)
    {
        var map = new Dictionary<string, string>();
        int index = 1;
        while (true)
        {
            var keyParam = $"{prefix}.entry.{index}.key";
            var valueParam = $"{prefix}.entry.{index}.value";
            if (!queryParams.TryGetValue(keyParam, out var key))
                break;

            if (queryParams.TryGetValue(valueParam, out var value))
            {
                map[key] = value;
            }
            else
                break;
            index++;
        }
        return map.Count > 0 ? map : null;
    }

    private static void SerializeList_BatchResultErrorEntryList(XmlWriter writer, string elementName, List<BatchResultErrorEntry> list)
    {
        writer.WriteStartElement(elementName);
        foreach (var item in list)
        {
            SerializeStructure_BatchResultErrorEntry(writer, "member", item);
        }
        writer.WriteEndElement();
    }

    private static void SerializeList_ListOfEndpoints(XmlWriter writer, string elementName, List<Endpoint> list)
    {
        writer.WriteStartElement(elementName);
        foreach (var item in list)
        {
            SerializeStructure_Endpoint(writer, "member", item);
        }
        writer.WriteEndElement();
    }

    private static void SerializeList_ListOfPlatformApplications(XmlWriter writer, string elementName, List<PlatformApplication> list)
    {
        writer.WriteStartElement(elementName);
        foreach (var item in list)
        {
            SerializeStructure_PlatformApplication(writer, "member", item);
        }
        writer.WriteEndElement();
    }

    private static void SerializeList_PhoneNumberInformationList(XmlWriter writer, string elementName, List<PhoneNumberInformation> list)
    {
        writer.WriteStartElement(elementName);
        foreach (var item in list)
        {
            SerializeStructure_PhoneNumberInformation(writer, "member", item);
        }
        writer.WriteEndElement();
    }

    private static void SerializeList_PhoneNumberList(XmlWriter writer, string elementName, List<string> list)
    {
        writer.WriteStartElement(elementName);
        foreach (var item in list)
        {
            writer.WriteElementString("member", item);
        }
        writer.WriteEndElement();
    }

    private static void SerializeList_PublishBatchResultEntryList(XmlWriter writer, string elementName, List<PublishBatchResultEntry> list)
    {
        writer.WriteStartElement(elementName);
        foreach (var item in list)
        {
            SerializeStructure_PublishBatchResultEntry(writer, "member", item);
        }
        writer.WriteEndElement();
    }

    private static void SerializeList_SMSSandboxPhoneNumberList(XmlWriter writer, string elementName, List<SMSSandboxPhoneNumber> list)
    {
        writer.WriteStartElement(elementName);
        foreach (var item in list)
        {
            SerializeStructure_SMSSandboxPhoneNumber(writer, "member", item);
        }
        writer.WriteEndElement();
    }

    private static void SerializeList_SubscriptionsList(XmlWriter writer, string elementName, List<Subscription> list)
    {
        writer.WriteStartElement(elementName);
        foreach (var item in list)
        {
            SerializeStructure_Subscription(writer, "member", item);
        }
        writer.WriteEndElement();
    }

    private static void SerializeList_TagList(XmlWriter writer, string elementName, List<Tag> list)
    {
        writer.WriteStartElement(elementName);
        foreach (var item in list)
        {
            SerializeStructure_Tag(writer, "member", item);
        }
        writer.WriteEndElement();
    }

    private static void SerializeList_TopicsList(XmlWriter writer, string elementName, List<Topic> list)
    {
        writer.WriteStartElement(elementName);
        foreach (var item in list)
        {
            SerializeStructure_Topic(writer, "member", item);
        }
        writer.WriteEndElement();
    }

    private static void SerializeMap_MapStringToString(XmlWriter writer, string elementName, Dictionary<string, string> map)
    {
        writer.WriteStartElement(elementName);
        foreach (var kvp in map)
        {
            writer.WriteStartElement("entry");
            writer.WriteElementString("key", kvp.Key);
            writer.WriteElementString("value", kvp.Value);
            writer.WriteEndElement();
        }
        writer.WriteEndElement();
    }

    private static void SerializeMap_SubscriptionAttributesMap(XmlWriter writer, string elementName, Dictionary<string, string> map)
    {
        writer.WriteStartElement(elementName);
        foreach (var kvp in map)
        {
            writer.WriteStartElement("entry");
            writer.WriteElementString("key", kvp.Key);
            writer.WriteElementString("value", kvp.Value);
            writer.WriteEndElement();
        }
        writer.WriteEndElement();
    }

    private static void SerializeMap_TopicAttributesMap(XmlWriter writer, string elementName, Dictionary<string, string> map)
    {
        writer.WriteStartElement(elementName);
        foreach (var kvp in map)
        {
            writer.WriteStartElement("entry");
            writer.WriteElementString("key", kvp.Key);
            writer.WriteElementString("value", kvp.Value);
            writer.WriteEndElement();
        }
        writer.WriteEndElement();
    }

    private static MessageAttributeValue? DeserializeStructure_MessageAttributeValue(Dictionary<string, string> queryParams, string prefix)
    {
        var structure = new MessageAttributeValue();
        var hasAnyValue = false;

        // DataType
        var dataTypeParam = $"{prefix}.DataType";
        if (queryParams.TryGetValue(dataTypeParam, out var dataTypeValue))
        {
            structure.DataType = dataTypeValue;
            hasAnyValue = true;
        }

        // StringValue
        var stringValueParam = $"{prefix}.StringValue";
        if (queryParams.TryGetValue(stringValueParam, out var stringValueValue))
        {
            structure.StringValue = stringValueValue;
            hasAnyValue = true;
        }

        // BinaryValue
        var binaryValueParam = $"{prefix}.BinaryValue";
        if (queryParams.TryGetValue(binaryValueParam, out var binaryValueValue))
        {
            structure.BinaryValue = new MemoryStream(Convert.FromBase64String(binaryValueValue));
            hasAnyValue = true;
        }

        return hasAnyValue ? structure : null;
    }

    private static PublishBatchRequestEntry? DeserializeStructure_PublishBatchRequestEntry(Dictionary<string, string> queryParams, string prefix)
    {
        var structure = new PublishBatchRequestEntry();
        var hasAnyValue = false;

        // Id
        var idParam = $"{prefix}.Id";
        if (queryParams.TryGetValue(idParam, out var idValue))
        {
            structure.Id = idValue;
            hasAnyValue = true;
        }

        // Message
        var messageParam = $"{prefix}.Message";
        if (queryParams.TryGetValue(messageParam, out var messageValue))
        {
            structure.Message = messageValue;
            hasAnyValue = true;
        }

        // Subject
        var subjectParam = $"{prefix}.Subject";
        if (queryParams.TryGetValue(subjectParam, out var subjectValue))
        {
            structure.Subject = subjectValue;
            hasAnyValue = true;
        }

        // MessageStructure
        var messageStructureParam = $"{prefix}.MessageStructure";
        if (queryParams.TryGetValue(messageStructureParam, out var messageStructureValue))
        {
            structure.MessageStructure = messageStructureValue;
            hasAnyValue = true;
        }

        // MessageAttributes
        var messageAttributesParam = $"{prefix}.MessageAttributes";
        var messageAttributesMap = DeserializeMap_MessageAttributeMap(queryParams, messageAttributesParam);
        if (messageAttributesMap != null)
        {
            structure.MessageAttributes = messageAttributesMap;
            hasAnyValue = true;
        }

        // MessageDeduplicationId
        var messageDeduplicationIdParam = $"{prefix}.MessageDeduplicationId";
        if (queryParams.TryGetValue(messageDeduplicationIdParam, out var messageDeduplicationIdValue))
        {
            structure.MessageDeduplicationId = messageDeduplicationIdValue;
            hasAnyValue = true;
        }

        // MessageGroupId
        var messageGroupIdParam = $"{prefix}.MessageGroupId";
        if (queryParams.TryGetValue(messageGroupIdParam, out var messageGroupIdValue))
        {
            structure.MessageGroupId = messageGroupIdValue;
            hasAnyValue = true;
        }

        return hasAnyValue ? structure : null;
    }

    private static Tag? DeserializeStructure_Tag(Dictionary<string, string> queryParams, string prefix)
    {
        var structure = new Tag();
        var hasAnyValue = false;

        // Key
        var keyParam = $"{prefix}.Key";
        if (queryParams.TryGetValue(keyParam, out var keyValue))
        {
            structure.Key = keyValue;
            hasAnyValue = true;
        }

        // Value
        var valueParam = $"{prefix}.Value";
        if (queryParams.TryGetValue(valueParam, out var valueValue))
        {
            structure.Value = valueValue;
            hasAnyValue = true;
        }

        return hasAnyValue ? structure : null;
    }

    private static void SerializeStructure_BatchResultErrorEntry(XmlWriter writer, string elementName, BatchResultErrorEntry structure)
    {
        writer.WriteStartElement(elementName);
        if (structure.Id != null)
            writer.WriteElementString("Id", structure.Id);
        if (structure.Code != null)
            writer.WriteElementString("Code", structure.Code);
        if (structure.Message != null)
            writer.WriteElementString("Message", structure.Message);
        if (structure.SenderFault != null)
            writer.WriteElementString("SenderFault", structure.SenderFault.ToString());
        writer.WriteEndElement();
    }

    private static void SerializeStructure_Endpoint(XmlWriter writer, string elementName, Endpoint structure)
    {
        writer.WriteStartElement(elementName);
        if (structure.EndpointArn != null)
            writer.WriteElementString("EndpointArn", structure.EndpointArn);
        writer.WriteEndElement();
    }

    private static void SerializeStructure_PhoneNumberInformation(XmlWriter writer, string elementName, PhoneNumberInformation structure)
    {
        writer.WriteStartElement(elementName);
        if (structure.PhoneNumber != null)
            writer.WriteElementString("PhoneNumber", structure.PhoneNumber);
        if (structure.Status != null)
            writer.WriteElementString("Status", structure.Status);
        if (structure.Iso2CountryCode != null)
            writer.WriteElementString("Iso2CountryCode", structure.Iso2CountryCode);
        if (structure.RouteType != null)
            writer.WriteElementString("RouteType", structure.RouteType);
        writer.WriteEndElement();
    }

    private static void SerializeStructure_PlatformApplication(XmlWriter writer, string elementName, PlatformApplication structure)
    {
        writer.WriteStartElement(elementName);
        if (structure.PlatformApplicationArn != null)
            writer.WriteElementString("PlatformApplicationArn", structure.PlatformApplicationArn);
        writer.WriteEndElement();
    }

    private static void SerializeStructure_PublishBatchResultEntry(XmlWriter writer, string elementName, PublishBatchResultEntry structure)
    {
        writer.WriteStartElement(elementName);
        if (structure.Id != null)
            writer.WriteElementString("Id", structure.Id);
        if (structure.MessageId != null)
            writer.WriteElementString("MessageId", structure.MessageId);
        if (structure.SequenceNumber != null)
            writer.WriteElementString("SequenceNumber", structure.SequenceNumber);
        writer.WriteEndElement();
    }

    private static void SerializeStructure_SMSSandboxPhoneNumber(XmlWriter writer, string elementName, SMSSandboxPhoneNumber structure)
    {
        writer.WriteStartElement(elementName);
        if (structure.PhoneNumber != null)
            writer.WriteElementString("PhoneNumber", structure.PhoneNumber);
        if (structure.Status != null)
            writer.WriteElementString("Status", structure.Status);
        writer.WriteEndElement();
    }

    private static void SerializeStructure_Subscription(XmlWriter writer, string elementName, Subscription structure)
    {
        writer.WriteStartElement(elementName);
        if (structure.SubscriptionArn != null)
            writer.WriteElementString("SubscriptionArn", structure.SubscriptionArn);
        if (structure.Owner != null)
            writer.WriteElementString("Owner", structure.Owner);
        if (structure.Protocol != null)
            writer.WriteElementString("Protocol", structure.Protocol);
        if (structure.Endpoint != null)
            writer.WriteElementString("Endpoint", structure.Endpoint);
        if (structure.TopicArn != null)
            writer.WriteElementString("TopicArn", structure.TopicArn);
        writer.WriteEndElement();
    }

    private static void SerializeStructure_Tag(XmlWriter writer, string elementName, Tag structure)
    {
        writer.WriteStartElement(elementName);
        if (structure.Key != null)
            writer.WriteElementString("Key", structure.Key);
        if (structure.Value != null)
            writer.WriteElementString("Value", structure.Value);
        writer.WriteEndElement();
    }

    private static void SerializeStructure_Topic(XmlWriter writer, string elementName, Topic structure)
    {
        writer.WriteStartElement(elementName);
        if (structure.TopicArn != null)
            writer.WriteElementString("TopicArn", structure.TopicArn);
        writer.WriteEndElement();
    }

}
