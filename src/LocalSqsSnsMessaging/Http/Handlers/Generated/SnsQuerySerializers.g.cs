// <auto-generated/>
// Generated Query protocol serializers for Sns
#nullable enable
#pragma warning disable CS0162 // Unreachable code detected
#pragma warning disable CS8600, CS8601, CS8602, CS8603, CS8604 // Null reference warnings

using System.Collections.Specialized;
using System.Globalization;
using System.Text;
using System.Xml;
using Amazon.SimpleNotificationService.Model;

namespace LocalSqsSnsMessaging.Http.Handlers;

/// <summary>
/// Generated Query protocol serializers for Sns operations.
/// </summary>
internal static class SnsQuerySerializers
{
    internal static AddPermissionRequest DeserializeAddPermissionRequest(string requestBody)
    {
        var queryParams = System.Web.HttpUtility.ParseQueryString(requestBody);
        var request = new AddPermissionRequest();

        // TopicArn
        var topicArnValue = queryParams["TopicArn"];
        if (topicArnValue != null)
            request.TopicArn = topicArnValue;

        // Label
        var labelValue = queryParams["Label"];
        if (labelValue != null)
            request.Label = labelValue;

        // AWSAccountId
        request.AWSAccountId = DeserializeList_DelegatesList(queryParams, "AWSAccountId");

        // ActionName
        request.ActionName = DeserializeList_ActionsList(queryParams, "ActionName");

        return request;
    }

    internal static void SerializeAddPermissionResponse(AddPermissionResponse response, Stream stream)
    {
        var settings = new XmlWriterSettings { OmitXmlDeclaration = false, Encoding = new System.Text.UTF8Encoding(false), CloseOutput = false };
        using var writer = XmlWriter.Create(stream, settings);
        writer.WriteStartElement("AddPermissionResponse", "http://sns.amazonaws.com/doc/2010-03-31/");
        writer.WriteStartElement("ResponseMetadata");
        writer.WriteElementString("RequestId", System.Guid.NewGuid().ToString());
        writer.WriteEndElement(); // ResponseMetadata
        writer.WriteEndElement(); // Response
        writer.Flush();
    }

    internal static CheckIfPhoneNumberIsOptedOutRequest DeserializeCheckIfPhoneNumberIsOptedOutRequest(string requestBody)
    {
        var queryParams = System.Web.HttpUtility.ParseQueryString(requestBody);
        var request = new CheckIfPhoneNumberIsOptedOutRequest();

        // phoneNumber
        var phoneNumberValue = queryParams["phoneNumber"];
        if (phoneNumberValue != null)
            request.PhoneNumber = phoneNumberValue;

        return request;
    }

    internal static void SerializeCheckIfPhoneNumberIsOptedOutResponse(CheckIfPhoneNumberIsOptedOutResponse response, Stream stream)
    {
        var settings = new XmlWriterSettings { OmitXmlDeclaration = false, Encoding = new System.Text.UTF8Encoding(false), CloseOutput = false };
        using var writer = XmlWriter.Create(stream, settings);
        writer.WriteStartElement("CheckIfPhoneNumberIsOptedOutResponse", "http://sns.amazonaws.com/doc/2010-03-31/");
        writer.WriteStartElement("CheckIfPhoneNumberIsOptedOutResult");
            // isOptedOut
            if (response.IsOptedOut != null)
                writer.WriteElementString("isOptedOut", response.IsOptedOut.ToString());
        writer.WriteEndElement(); // Result
        writer.WriteStartElement("ResponseMetadata");
        writer.WriteElementString("RequestId", System.Guid.NewGuid().ToString());
        writer.WriteEndElement(); // ResponseMetadata
        writer.WriteEndElement(); // Response
        writer.Flush();
    }

    internal static ConfirmSubscriptionRequest DeserializeConfirmSubscriptionRequest(string requestBody)
    {
        var queryParams = System.Web.HttpUtility.ParseQueryString(requestBody);
        var request = new ConfirmSubscriptionRequest();

        // TopicArn
        var topicArnValue = queryParams["TopicArn"];
        if (topicArnValue != null)
            request.TopicArn = topicArnValue;

        // Token
        var tokenValue = queryParams["Token"];
        if (tokenValue != null)
            request.Token = tokenValue;

        // AuthenticateOnUnsubscribe
        var authenticateOnUnsubscribeValue = queryParams["AuthenticateOnUnsubscribe"];
        if (authenticateOnUnsubscribeValue != null)
            request.AuthenticateOnUnsubscribe = authenticateOnUnsubscribeValue;

        return request;
    }

    internal static void SerializeConfirmSubscriptionResponse(ConfirmSubscriptionResponse response, Stream stream)
    {
        var settings = new XmlWriterSettings { OmitXmlDeclaration = false, Encoding = new System.Text.UTF8Encoding(false), CloseOutput = false };
        using var writer = XmlWriter.Create(stream, settings);
        writer.WriteStartElement("ConfirmSubscriptionResponse", "http://sns.amazonaws.com/doc/2010-03-31/");
        writer.WriteStartElement("ConfirmSubscriptionResult");
            // SubscriptionArn
            if (response.SubscriptionArn != null)
                writer.WriteElementString("SubscriptionArn", response.SubscriptionArn.ToString());
        writer.WriteEndElement(); // Result
        writer.WriteStartElement("ResponseMetadata");
        writer.WriteElementString("RequestId", System.Guid.NewGuid().ToString());
        writer.WriteEndElement(); // ResponseMetadata
        writer.WriteEndElement(); // Response
        writer.Flush();
    }

    internal static CreatePlatformApplicationRequest DeserializeCreatePlatformApplicationRequest(string requestBody)
    {
        var queryParams = System.Web.HttpUtility.ParseQueryString(requestBody);
        var request = new CreatePlatformApplicationRequest();

        // Name
        var nameValue = queryParams["Name"];
        if (nameValue != null)
            request.Name = nameValue;

        // Platform
        var platformValue = queryParams["Platform"];
        if (platformValue != null)
            request.Platform = platformValue;

        // Attributes
        request.Attributes = DeserializeMap_MapStringToString(queryParams, "Attributes");

        return request;
    }

    internal static void SerializeCreatePlatformApplicationResponse(CreatePlatformApplicationResponse response, Stream stream)
    {
        var settings = new XmlWriterSettings { OmitXmlDeclaration = false, Encoding = new System.Text.UTF8Encoding(false), CloseOutput = false };
        using var writer = XmlWriter.Create(stream, settings);
        writer.WriteStartElement("CreatePlatformApplicationResponse", "http://sns.amazonaws.com/doc/2010-03-31/");
        writer.WriteStartElement("CreatePlatformApplicationResult");
            // PlatformApplicationArn
            if (response.PlatformApplicationArn != null)
                writer.WriteElementString("PlatformApplicationArn", response.PlatformApplicationArn.ToString());
        writer.WriteEndElement(); // Result
        writer.WriteStartElement("ResponseMetadata");
        writer.WriteElementString("RequestId", System.Guid.NewGuid().ToString());
        writer.WriteEndElement(); // ResponseMetadata
        writer.WriteEndElement(); // Response
        writer.Flush();
    }

    internal static CreatePlatformEndpointRequest DeserializeCreatePlatformEndpointRequest(string requestBody)
    {
        var queryParams = System.Web.HttpUtility.ParseQueryString(requestBody);
        var request = new CreatePlatformEndpointRequest();

        // PlatformApplicationArn
        var platformApplicationArnValue = queryParams["PlatformApplicationArn"];
        if (platformApplicationArnValue != null)
            request.PlatformApplicationArn = platformApplicationArnValue;

        // Token
        var tokenValue = queryParams["Token"];
        if (tokenValue != null)
            request.Token = tokenValue;

        // CustomUserData
        var customUserDataValue = queryParams["CustomUserData"];
        if (customUserDataValue != null)
            request.CustomUserData = customUserDataValue;

        // Attributes
        request.Attributes = DeserializeMap_MapStringToString(queryParams, "Attributes");

        return request;
    }

    internal static void SerializeCreatePlatformEndpointResponse(CreatePlatformEndpointResponse response, Stream stream)
    {
        var settings = new XmlWriterSettings { OmitXmlDeclaration = false, Encoding = new System.Text.UTF8Encoding(false), CloseOutput = false };
        using var writer = XmlWriter.Create(stream, settings);
        writer.WriteStartElement("CreatePlatformEndpointResponse", "http://sns.amazonaws.com/doc/2010-03-31/");
        writer.WriteStartElement("CreatePlatformEndpointResult");
            // EndpointArn
            if (response.EndpointArn != null)
                writer.WriteElementString("EndpointArn", response.EndpointArn.ToString());
        writer.WriteEndElement(); // Result
        writer.WriteStartElement("ResponseMetadata");
        writer.WriteElementString("RequestId", System.Guid.NewGuid().ToString());
        writer.WriteEndElement(); // ResponseMetadata
        writer.WriteEndElement(); // Response
        writer.Flush();
    }

    internal static CreateSMSSandboxPhoneNumberRequest DeserializeCreateSMSSandboxPhoneNumberRequest(string requestBody)
    {
        var queryParams = System.Web.HttpUtility.ParseQueryString(requestBody);
        var request = new CreateSMSSandboxPhoneNumberRequest();

        // PhoneNumber
        var phoneNumberValue = queryParams["PhoneNumber"];
        if (phoneNumberValue != null)
            request.PhoneNumber = phoneNumberValue;

        // LanguageCode
        var languageCodeValue = queryParams["LanguageCode"];
        if (languageCodeValue != null)
            request.LanguageCode = languageCodeValue;

        return request;
    }

    internal static void SerializeCreateSMSSandboxPhoneNumberResponse(CreateSMSSandboxPhoneNumberResponse response, Stream stream)
    {
        var settings = new XmlWriterSettings { OmitXmlDeclaration = false, Encoding = new System.Text.UTF8Encoding(false), CloseOutput = false };
        using var writer = XmlWriter.Create(stream, settings);
        writer.WriteStartElement("CreateSMSSandboxPhoneNumberResponse", "http://sns.amazonaws.com/doc/2010-03-31/");
        writer.WriteStartElement("CreateSMSSandboxPhoneNumberResult");
        writer.WriteEndElement(); // Result
        writer.WriteStartElement("ResponseMetadata");
        writer.WriteElementString("RequestId", System.Guid.NewGuid().ToString());
        writer.WriteEndElement(); // ResponseMetadata
        writer.WriteEndElement(); // Response
        writer.Flush();
    }

    internal static CreateTopicRequest DeserializeCreateTopicRequest(string requestBody)
    {
        var queryParams = System.Web.HttpUtility.ParseQueryString(requestBody);
        var request = new CreateTopicRequest();

        // Name
        var nameValue = queryParams["Name"];
        if (nameValue != null)
            request.Name = nameValue;

        // Attributes
        request.Attributes = DeserializeMap_TopicAttributesMap(queryParams, "Attributes");

        // Tags
        request.Tags = DeserializeList_TagList(queryParams, "Tags");

        // DataProtectionPolicy
        var dataProtectionPolicyValue = queryParams["DataProtectionPolicy"];
        if (dataProtectionPolicyValue != null)
            request.DataProtectionPolicy = dataProtectionPolicyValue;

        return request;
    }

    internal static void SerializeCreateTopicResponse(CreateTopicResponse response, Stream stream)
    {
        var settings = new XmlWriterSettings { OmitXmlDeclaration = false, Encoding = new System.Text.UTF8Encoding(false), CloseOutput = false };
        using var writer = XmlWriter.Create(stream, settings);
        writer.WriteStartElement("CreateTopicResponse", "http://sns.amazonaws.com/doc/2010-03-31/");
        writer.WriteStartElement("CreateTopicResult");
            // TopicArn
            if (response.TopicArn != null)
                writer.WriteElementString("TopicArn", response.TopicArn.ToString());
        writer.WriteEndElement(); // Result
        writer.WriteStartElement("ResponseMetadata");
        writer.WriteElementString("RequestId", System.Guid.NewGuid().ToString());
        writer.WriteEndElement(); // ResponseMetadata
        writer.WriteEndElement(); // Response
        writer.Flush();
    }

    internal static DeleteEndpointRequest DeserializeDeleteEndpointRequest(string requestBody)
    {
        var queryParams = System.Web.HttpUtility.ParseQueryString(requestBody);
        var request = new DeleteEndpointRequest();

        // EndpointArn
        var endpointArnValue = queryParams["EndpointArn"];
        if (endpointArnValue != null)
            request.EndpointArn = endpointArnValue;

        return request;
    }

    internal static void SerializeDeleteEndpointResponse(DeleteEndpointResponse response, Stream stream)
    {
        var settings = new XmlWriterSettings { OmitXmlDeclaration = false, Encoding = new System.Text.UTF8Encoding(false), CloseOutput = false };
        using var writer = XmlWriter.Create(stream, settings);
        writer.WriteStartElement("DeleteEndpointResponse", "http://sns.amazonaws.com/doc/2010-03-31/");
        writer.WriteStartElement("ResponseMetadata");
        writer.WriteElementString("RequestId", System.Guid.NewGuid().ToString());
        writer.WriteEndElement(); // ResponseMetadata
        writer.WriteEndElement(); // Response
        writer.Flush();
    }

    internal static DeletePlatformApplicationRequest DeserializeDeletePlatformApplicationRequest(string requestBody)
    {
        var queryParams = System.Web.HttpUtility.ParseQueryString(requestBody);
        var request = new DeletePlatformApplicationRequest();

        // PlatformApplicationArn
        var platformApplicationArnValue = queryParams["PlatformApplicationArn"];
        if (platformApplicationArnValue != null)
            request.PlatformApplicationArn = platformApplicationArnValue;

        return request;
    }

    internal static void SerializeDeletePlatformApplicationResponse(DeletePlatformApplicationResponse response, Stream stream)
    {
        var settings = new XmlWriterSettings { OmitXmlDeclaration = false, Encoding = new System.Text.UTF8Encoding(false), CloseOutput = false };
        using var writer = XmlWriter.Create(stream, settings);
        writer.WriteStartElement("DeletePlatformApplicationResponse", "http://sns.amazonaws.com/doc/2010-03-31/");
        writer.WriteStartElement("ResponseMetadata");
        writer.WriteElementString("RequestId", System.Guid.NewGuid().ToString());
        writer.WriteEndElement(); // ResponseMetadata
        writer.WriteEndElement(); // Response
        writer.Flush();
    }

    internal static DeleteSMSSandboxPhoneNumberRequest DeserializeDeleteSMSSandboxPhoneNumberRequest(string requestBody)
    {
        var queryParams = System.Web.HttpUtility.ParseQueryString(requestBody);
        var request = new DeleteSMSSandboxPhoneNumberRequest();

        // PhoneNumber
        var phoneNumberValue = queryParams["PhoneNumber"];
        if (phoneNumberValue != null)
            request.PhoneNumber = phoneNumberValue;

        return request;
    }

    internal static void SerializeDeleteSMSSandboxPhoneNumberResponse(DeleteSMSSandboxPhoneNumberResponse response, Stream stream)
    {
        var settings = new XmlWriterSettings { OmitXmlDeclaration = false, Encoding = new System.Text.UTF8Encoding(false), CloseOutput = false };
        using var writer = XmlWriter.Create(stream, settings);
        writer.WriteStartElement("DeleteSMSSandboxPhoneNumberResponse", "http://sns.amazonaws.com/doc/2010-03-31/");
        writer.WriteStartElement("DeleteSMSSandboxPhoneNumberResult");
        writer.WriteEndElement(); // Result
        writer.WriteStartElement("ResponseMetadata");
        writer.WriteElementString("RequestId", System.Guid.NewGuid().ToString());
        writer.WriteEndElement(); // ResponseMetadata
        writer.WriteEndElement(); // Response
        writer.Flush();
    }

    internal static DeleteTopicRequest DeserializeDeleteTopicRequest(string requestBody)
    {
        var queryParams = System.Web.HttpUtility.ParseQueryString(requestBody);
        var request = new DeleteTopicRequest();

        // TopicArn
        var topicArnValue = queryParams["TopicArn"];
        if (topicArnValue != null)
            request.TopicArn = topicArnValue;

        return request;
    }

    internal static void SerializeDeleteTopicResponse(DeleteTopicResponse response, Stream stream)
    {
        var settings = new XmlWriterSettings { OmitXmlDeclaration = false, Encoding = new System.Text.UTF8Encoding(false), CloseOutput = false };
        using var writer = XmlWriter.Create(stream, settings);
        writer.WriteStartElement("DeleteTopicResponse", "http://sns.amazonaws.com/doc/2010-03-31/");
        writer.WriteStartElement("ResponseMetadata");
        writer.WriteElementString("RequestId", System.Guid.NewGuid().ToString());
        writer.WriteEndElement(); // ResponseMetadata
        writer.WriteEndElement(); // Response
        writer.Flush();
    }

    internal static GetDataProtectionPolicyRequest DeserializeGetDataProtectionPolicyRequest(string requestBody)
    {
        var queryParams = System.Web.HttpUtility.ParseQueryString(requestBody);
        var request = new GetDataProtectionPolicyRequest();

        // ResourceArn
        var resourceArnValue = queryParams["ResourceArn"];
        if (resourceArnValue != null)
            request.ResourceArn = resourceArnValue;

        return request;
    }

    internal static void SerializeGetDataProtectionPolicyResponse(GetDataProtectionPolicyResponse response, Stream stream)
    {
        var settings = new XmlWriterSettings { OmitXmlDeclaration = false, Encoding = new System.Text.UTF8Encoding(false), CloseOutput = false };
        using var writer = XmlWriter.Create(stream, settings);
        writer.WriteStartElement("GetDataProtectionPolicyResponse", "http://sns.amazonaws.com/doc/2010-03-31/");
        writer.WriteStartElement("GetDataProtectionPolicyResult");
            // DataProtectionPolicy
            if (response.DataProtectionPolicy != null)
                writer.WriteElementString("DataProtectionPolicy", response.DataProtectionPolicy.ToString());
        writer.WriteEndElement(); // Result
        writer.WriteStartElement("ResponseMetadata");
        writer.WriteElementString("RequestId", System.Guid.NewGuid().ToString());
        writer.WriteEndElement(); // ResponseMetadata
        writer.WriteEndElement(); // Response
        writer.Flush();
    }

    internal static GetEndpointAttributesRequest DeserializeGetEndpointAttributesRequest(string requestBody)
    {
        var queryParams = System.Web.HttpUtility.ParseQueryString(requestBody);
        var request = new GetEndpointAttributesRequest();

        // EndpointArn
        var endpointArnValue = queryParams["EndpointArn"];
        if (endpointArnValue != null)
            request.EndpointArn = endpointArnValue;

        return request;
    }

    internal static void SerializeGetEndpointAttributesResponse(GetEndpointAttributesResponse response, Stream stream)
    {
        var settings = new XmlWriterSettings { OmitXmlDeclaration = false, Encoding = new System.Text.UTF8Encoding(false), CloseOutput = false };
        using var writer = XmlWriter.Create(stream, settings);
        writer.WriteStartElement("GetEndpointAttributesResponse", "http://sns.amazonaws.com/doc/2010-03-31/");
        writer.WriteStartElement("GetEndpointAttributesResult");
            // Attributes
            if (response.Attributes != null)
                SerializeMap_MapStringToString(writer, "Attributes", response.Attributes);
        writer.WriteEndElement(); // Result
        writer.WriteStartElement("ResponseMetadata");
        writer.WriteElementString("RequestId", System.Guid.NewGuid().ToString());
        writer.WriteEndElement(); // ResponseMetadata
        writer.WriteEndElement(); // Response
        writer.Flush();
    }

    internal static GetPlatformApplicationAttributesRequest DeserializeGetPlatformApplicationAttributesRequest(string requestBody)
    {
        var queryParams = System.Web.HttpUtility.ParseQueryString(requestBody);
        var request = new GetPlatformApplicationAttributesRequest();

        // PlatformApplicationArn
        var platformApplicationArnValue = queryParams["PlatformApplicationArn"];
        if (platformApplicationArnValue != null)
            request.PlatformApplicationArn = platformApplicationArnValue;

        return request;
    }

    internal static void SerializeGetPlatformApplicationAttributesResponse(GetPlatformApplicationAttributesResponse response, Stream stream)
    {
        var settings = new XmlWriterSettings { OmitXmlDeclaration = false, Encoding = new System.Text.UTF8Encoding(false), CloseOutput = false };
        using var writer = XmlWriter.Create(stream, settings);
        writer.WriteStartElement("GetPlatformApplicationAttributesResponse", "http://sns.amazonaws.com/doc/2010-03-31/");
        writer.WriteStartElement("GetPlatformApplicationAttributesResult");
            // Attributes
            if (response.Attributes != null)
                SerializeMap_MapStringToString(writer, "Attributes", response.Attributes);
        writer.WriteEndElement(); // Result
        writer.WriteStartElement("ResponseMetadata");
        writer.WriteElementString("RequestId", System.Guid.NewGuid().ToString());
        writer.WriteEndElement(); // ResponseMetadata
        writer.WriteEndElement(); // Response
        writer.Flush();
    }

    internal static GetSMSAttributesRequest DeserializeGetSMSAttributesRequest(string requestBody)
    {
        var queryParams = System.Web.HttpUtility.ParseQueryString(requestBody);
        var request = new GetSMSAttributesRequest();

        // attributes
        request.Attributes = DeserializeList_ListString(queryParams, "attributes");

        return request;
    }

    internal static void SerializeGetSMSAttributesResponse(GetSMSAttributesResponse response, Stream stream)
    {
        var settings = new XmlWriterSettings { OmitXmlDeclaration = false, Encoding = new System.Text.UTF8Encoding(false), CloseOutput = false };
        using var writer = XmlWriter.Create(stream, settings);
        writer.WriteStartElement("GetSMSAttributesResponse", "http://sns.amazonaws.com/doc/2010-03-31/");
        writer.WriteStartElement("GetSMSAttributesResult");
            // attributes
            if (response.Attributes != null)
                SerializeMap_MapStringToString(writer, "attributes", response.Attributes);
        writer.WriteEndElement(); // Result
        writer.WriteStartElement("ResponseMetadata");
        writer.WriteElementString("RequestId", System.Guid.NewGuid().ToString());
        writer.WriteEndElement(); // ResponseMetadata
        writer.WriteEndElement(); // Response
        writer.Flush();
    }

    internal static GetSMSSandboxAccountStatusRequest DeserializeGetSMSSandboxAccountStatusRequest(string requestBody)
    {
        var queryParams = System.Web.HttpUtility.ParseQueryString(requestBody);
        var request = new GetSMSSandboxAccountStatusRequest();

        return request;
    }

    internal static void SerializeGetSMSSandboxAccountStatusResponse(GetSMSSandboxAccountStatusResponse response, Stream stream)
    {
        var settings = new XmlWriterSettings { OmitXmlDeclaration = false, Encoding = new System.Text.UTF8Encoding(false), CloseOutput = false };
        using var writer = XmlWriter.Create(stream, settings);
        writer.WriteStartElement("GetSMSSandboxAccountStatusResponse", "http://sns.amazonaws.com/doc/2010-03-31/");
        writer.WriteStartElement("GetSMSSandboxAccountStatusResult");
            // IsInSandbox
            if (response.IsInSandbox != null)
                writer.WriteElementString("IsInSandbox", response.IsInSandbox.ToString());
        writer.WriteEndElement(); // Result
        writer.WriteStartElement("ResponseMetadata");
        writer.WriteElementString("RequestId", System.Guid.NewGuid().ToString());
        writer.WriteEndElement(); // ResponseMetadata
        writer.WriteEndElement(); // Response
        writer.Flush();
    }

    internal static GetSubscriptionAttributesRequest DeserializeGetSubscriptionAttributesRequest(string requestBody)
    {
        var queryParams = System.Web.HttpUtility.ParseQueryString(requestBody);
        var request = new GetSubscriptionAttributesRequest();

        // SubscriptionArn
        var subscriptionArnValue = queryParams["SubscriptionArn"];
        if (subscriptionArnValue != null)
            request.SubscriptionArn = subscriptionArnValue;

        return request;
    }

    internal static void SerializeGetSubscriptionAttributesResponse(GetSubscriptionAttributesResponse response, Stream stream)
    {
        var settings = new XmlWriterSettings { OmitXmlDeclaration = false, Encoding = new System.Text.UTF8Encoding(false), CloseOutput = false };
        using var writer = XmlWriter.Create(stream, settings);
        writer.WriteStartElement("GetSubscriptionAttributesResponse", "http://sns.amazonaws.com/doc/2010-03-31/");
        writer.WriteStartElement("GetSubscriptionAttributesResult");
            // Attributes
            if (response.Attributes != null)
                SerializeMap_SubscriptionAttributesMap(writer, "Attributes", response.Attributes);
        writer.WriteEndElement(); // Result
        writer.WriteStartElement("ResponseMetadata");
        writer.WriteElementString("RequestId", System.Guid.NewGuid().ToString());
        writer.WriteEndElement(); // ResponseMetadata
        writer.WriteEndElement(); // Response
        writer.Flush();
    }

    internal static GetTopicAttributesRequest DeserializeGetTopicAttributesRequest(string requestBody)
    {
        var queryParams = System.Web.HttpUtility.ParseQueryString(requestBody);
        var request = new GetTopicAttributesRequest();

        // TopicArn
        var topicArnValue = queryParams["TopicArn"];
        if (topicArnValue != null)
            request.TopicArn = topicArnValue;

        return request;
    }

    internal static void SerializeGetTopicAttributesResponse(GetTopicAttributesResponse response, Stream stream)
    {
        var settings = new XmlWriterSettings { OmitXmlDeclaration = false, Encoding = new System.Text.UTF8Encoding(false), CloseOutput = false };
        using var writer = XmlWriter.Create(stream, settings);
        writer.WriteStartElement("GetTopicAttributesResponse", "http://sns.amazonaws.com/doc/2010-03-31/");
        writer.WriteStartElement("GetTopicAttributesResult");
            // Attributes
            if (response.Attributes != null)
                SerializeMap_TopicAttributesMap(writer, "Attributes", response.Attributes);
        writer.WriteEndElement(); // Result
        writer.WriteStartElement("ResponseMetadata");
        writer.WriteElementString("RequestId", System.Guid.NewGuid().ToString());
        writer.WriteEndElement(); // ResponseMetadata
        writer.WriteEndElement(); // Response
        writer.Flush();
    }

    internal static ListEndpointsByPlatformApplicationRequest DeserializeListEndpointsByPlatformApplicationRequest(string requestBody)
    {
        var queryParams = System.Web.HttpUtility.ParseQueryString(requestBody);
        var request = new ListEndpointsByPlatformApplicationRequest();

        // PlatformApplicationArn
        var platformApplicationArnValue = queryParams["PlatformApplicationArn"];
        if (platformApplicationArnValue != null)
            request.PlatformApplicationArn = platformApplicationArnValue;

        // NextToken
        var nextTokenValue = queryParams["NextToken"];
        if (nextTokenValue != null)
            request.NextToken = nextTokenValue;

        return request;
    }

    internal static void SerializeListEndpointsByPlatformApplicationResponse(ListEndpointsByPlatformApplicationResponse response, Stream stream)
    {
        var settings = new XmlWriterSettings { OmitXmlDeclaration = false, Encoding = new System.Text.UTF8Encoding(false), CloseOutput = false };
        using var writer = XmlWriter.Create(stream, settings);
        writer.WriteStartElement("ListEndpointsByPlatformApplicationResponse", "http://sns.amazonaws.com/doc/2010-03-31/");
        writer.WriteStartElement("ListEndpointsByPlatformApplicationResult");
            // Endpoints
            if (response.Endpoints != null)
                SerializeList_ListOfEndpoints(writer, "Endpoints", response.Endpoints);
            // NextToken
            if (response.NextToken != null)
                writer.WriteElementString("NextToken", response.NextToken.ToString());
        writer.WriteEndElement(); // Result
        writer.WriteStartElement("ResponseMetadata");
        writer.WriteElementString("RequestId", System.Guid.NewGuid().ToString());
        writer.WriteEndElement(); // ResponseMetadata
        writer.WriteEndElement(); // Response
        writer.Flush();
    }

    internal static ListOriginationNumbersRequest DeserializeListOriginationNumbersRequest(string requestBody)
    {
        var queryParams = System.Web.HttpUtility.ParseQueryString(requestBody);
        var request = new ListOriginationNumbersRequest();

        // NextToken
        var nextTokenValue = queryParams["NextToken"];
        if (nextTokenValue != null)
            request.NextToken = nextTokenValue;

        // MaxResults
        var maxResultsValue = queryParams["MaxResults"];
        if (maxResultsValue != null && int.TryParse(maxResultsValue, out var maxResultsParsed))
            request.MaxResults = maxResultsParsed;

        return request;
    }

    internal static void SerializeListOriginationNumbersResponse(ListOriginationNumbersResponse response, Stream stream)
    {
        var settings = new XmlWriterSettings { OmitXmlDeclaration = false, Encoding = new System.Text.UTF8Encoding(false), CloseOutput = false };
        using var writer = XmlWriter.Create(stream, settings);
        writer.WriteStartElement("ListOriginationNumbersResponse", "http://sns.amazonaws.com/doc/2010-03-31/");
        writer.WriteStartElement("ListOriginationNumbersResult");
            // NextToken
            if (response.NextToken != null)
                writer.WriteElementString("NextToken", response.NextToken.ToString());
            // PhoneNumbers
            if (response.PhoneNumbers != null)
                SerializeList_PhoneNumberInformationList(writer, "PhoneNumbers", response.PhoneNumbers);
        writer.WriteEndElement(); // Result
        writer.WriteStartElement("ResponseMetadata");
        writer.WriteElementString("RequestId", System.Guid.NewGuid().ToString());
        writer.WriteEndElement(); // ResponseMetadata
        writer.WriteEndElement(); // Response
        writer.Flush();
    }

    internal static ListPhoneNumbersOptedOutRequest DeserializeListPhoneNumbersOptedOutRequest(string requestBody)
    {
        var queryParams = System.Web.HttpUtility.ParseQueryString(requestBody);
        var request = new ListPhoneNumbersOptedOutRequest();

        // nextToken
        var nextTokenValue = queryParams["nextToken"];
        if (nextTokenValue != null)
            request.NextToken = nextTokenValue;

        return request;
    }

    internal static void SerializeListPhoneNumbersOptedOutResponse(ListPhoneNumbersOptedOutResponse response, Stream stream)
    {
        var settings = new XmlWriterSettings { OmitXmlDeclaration = false, Encoding = new System.Text.UTF8Encoding(false), CloseOutput = false };
        using var writer = XmlWriter.Create(stream, settings);
        writer.WriteStartElement("ListPhoneNumbersOptedOutResponse", "http://sns.amazonaws.com/doc/2010-03-31/");
        writer.WriteStartElement("ListPhoneNumbersOptedOutResult");
            // phoneNumbers
            if (response.PhoneNumbers != null)
                SerializeList_PhoneNumberList(writer, "phoneNumbers", response.PhoneNumbers);
            // nextToken
            if (response.NextToken != null)
                writer.WriteElementString("nextToken", response.NextToken.ToString());
        writer.WriteEndElement(); // Result
        writer.WriteStartElement("ResponseMetadata");
        writer.WriteElementString("RequestId", System.Guid.NewGuid().ToString());
        writer.WriteEndElement(); // ResponseMetadata
        writer.WriteEndElement(); // Response
        writer.Flush();
    }

    internal static ListPlatformApplicationsRequest DeserializeListPlatformApplicationsRequest(string requestBody)
    {
        var queryParams = System.Web.HttpUtility.ParseQueryString(requestBody);
        var request = new ListPlatformApplicationsRequest();

        // NextToken
        var nextTokenValue = queryParams["NextToken"];
        if (nextTokenValue != null)
            request.NextToken = nextTokenValue;

        return request;
    }

    internal static void SerializeListPlatformApplicationsResponse(ListPlatformApplicationsResponse response, Stream stream)
    {
        var settings = new XmlWriterSettings { OmitXmlDeclaration = false, Encoding = new System.Text.UTF8Encoding(false), CloseOutput = false };
        using var writer = XmlWriter.Create(stream, settings);
        writer.WriteStartElement("ListPlatformApplicationsResponse", "http://sns.amazonaws.com/doc/2010-03-31/");
        writer.WriteStartElement("ListPlatformApplicationsResult");
            // PlatformApplications
            if (response.PlatformApplications != null)
                SerializeList_ListOfPlatformApplications(writer, "PlatformApplications", response.PlatformApplications);
            // NextToken
            if (response.NextToken != null)
                writer.WriteElementString("NextToken", response.NextToken.ToString());
        writer.WriteEndElement(); // Result
        writer.WriteStartElement("ResponseMetadata");
        writer.WriteElementString("RequestId", System.Guid.NewGuid().ToString());
        writer.WriteEndElement(); // ResponseMetadata
        writer.WriteEndElement(); // Response
        writer.Flush();
    }

    internal static ListSMSSandboxPhoneNumbersRequest DeserializeListSMSSandboxPhoneNumbersRequest(string requestBody)
    {
        var queryParams = System.Web.HttpUtility.ParseQueryString(requestBody);
        var request = new ListSMSSandboxPhoneNumbersRequest();

        // NextToken
        var nextTokenValue = queryParams["NextToken"];
        if (nextTokenValue != null)
            request.NextToken = nextTokenValue;

        // MaxResults
        var maxResultsValue = queryParams["MaxResults"];
        if (maxResultsValue != null && int.TryParse(maxResultsValue, out var maxResultsParsed))
            request.MaxResults = maxResultsParsed;

        return request;
    }

    internal static void SerializeListSMSSandboxPhoneNumbersResponse(ListSMSSandboxPhoneNumbersResponse response, Stream stream)
    {
        var settings = new XmlWriterSettings { OmitXmlDeclaration = false, Encoding = new System.Text.UTF8Encoding(false), CloseOutput = false };
        using var writer = XmlWriter.Create(stream, settings);
        writer.WriteStartElement("ListSMSSandboxPhoneNumbersResponse", "http://sns.amazonaws.com/doc/2010-03-31/");
        writer.WriteStartElement("ListSMSSandboxPhoneNumbersResult");
            // PhoneNumbers
            if (response.PhoneNumbers != null)
                SerializeList_SMSSandboxPhoneNumberList(writer, "PhoneNumbers", response.PhoneNumbers);
            // NextToken
            if (response.NextToken != null)
                writer.WriteElementString("NextToken", response.NextToken.ToString());
        writer.WriteEndElement(); // Result
        writer.WriteStartElement("ResponseMetadata");
        writer.WriteElementString("RequestId", System.Guid.NewGuid().ToString());
        writer.WriteEndElement(); // ResponseMetadata
        writer.WriteEndElement(); // Response
        writer.Flush();
    }

    internal static ListSubscriptionsRequest DeserializeListSubscriptionsRequest(string requestBody)
    {
        var queryParams = System.Web.HttpUtility.ParseQueryString(requestBody);
        var request = new ListSubscriptionsRequest();

        // NextToken
        var nextTokenValue = queryParams["NextToken"];
        if (nextTokenValue != null)
            request.NextToken = nextTokenValue;

        return request;
    }

    internal static void SerializeListSubscriptionsResponse(ListSubscriptionsResponse response, Stream stream)
    {
        var settings = new XmlWriterSettings { OmitXmlDeclaration = false, Encoding = new System.Text.UTF8Encoding(false), CloseOutput = false };
        using var writer = XmlWriter.Create(stream, settings);
        writer.WriteStartElement("ListSubscriptionsResponse", "http://sns.amazonaws.com/doc/2010-03-31/");
        writer.WriteStartElement("ListSubscriptionsResult");
            // Subscriptions
            if (response.Subscriptions != null)
                SerializeList_SubscriptionsList(writer, "Subscriptions", response.Subscriptions);
            // NextToken
            if (response.NextToken != null)
                writer.WriteElementString("NextToken", response.NextToken.ToString());
        writer.WriteEndElement(); // Result
        writer.WriteStartElement("ResponseMetadata");
        writer.WriteElementString("RequestId", System.Guid.NewGuid().ToString());
        writer.WriteEndElement(); // ResponseMetadata
        writer.WriteEndElement(); // Response
        writer.Flush();
    }

    internal static ListSubscriptionsByTopicRequest DeserializeListSubscriptionsByTopicRequest(string requestBody)
    {
        var queryParams = System.Web.HttpUtility.ParseQueryString(requestBody);
        var request = new ListSubscriptionsByTopicRequest();

        // TopicArn
        var topicArnValue = queryParams["TopicArn"];
        if (topicArnValue != null)
            request.TopicArn = topicArnValue;

        // NextToken
        var nextTokenValue = queryParams["NextToken"];
        if (nextTokenValue != null)
            request.NextToken = nextTokenValue;

        return request;
    }

    internal static void SerializeListSubscriptionsByTopicResponse(ListSubscriptionsByTopicResponse response, Stream stream)
    {
        var settings = new XmlWriterSettings { OmitXmlDeclaration = false, Encoding = new System.Text.UTF8Encoding(false), CloseOutput = false };
        using var writer = XmlWriter.Create(stream, settings);
        writer.WriteStartElement("ListSubscriptionsByTopicResponse", "http://sns.amazonaws.com/doc/2010-03-31/");
        writer.WriteStartElement("ListSubscriptionsByTopicResult");
            // Subscriptions
            if (response.Subscriptions != null)
                SerializeList_SubscriptionsList(writer, "Subscriptions", response.Subscriptions);
            // NextToken
            if (response.NextToken != null)
                writer.WriteElementString("NextToken", response.NextToken.ToString());
        writer.WriteEndElement(); // Result
        writer.WriteStartElement("ResponseMetadata");
        writer.WriteElementString("RequestId", System.Guid.NewGuid().ToString());
        writer.WriteEndElement(); // ResponseMetadata
        writer.WriteEndElement(); // Response
        writer.Flush();
    }

    internal static ListTagsForResourceRequest DeserializeListTagsForResourceRequest(string requestBody)
    {
        var queryParams = System.Web.HttpUtility.ParseQueryString(requestBody);
        var request = new ListTagsForResourceRequest();

        // ResourceArn
        var resourceArnValue = queryParams["ResourceArn"];
        if (resourceArnValue != null)
            request.ResourceArn = resourceArnValue;

        return request;
    }

    internal static void SerializeListTagsForResourceResponse(ListTagsForResourceResponse response, Stream stream)
    {
        var settings = new XmlWriterSettings { OmitXmlDeclaration = false, Encoding = new System.Text.UTF8Encoding(false), CloseOutput = false };
        using var writer = XmlWriter.Create(stream, settings);
        writer.WriteStartElement("ListTagsForResourceResponse", "http://sns.amazonaws.com/doc/2010-03-31/");
        writer.WriteStartElement("ListTagsForResourceResult");
            // Tags
            if (response.Tags != null)
                SerializeList_TagList(writer, "Tags", response.Tags);
        writer.WriteEndElement(); // Result
        writer.WriteStartElement("ResponseMetadata");
        writer.WriteElementString("RequestId", System.Guid.NewGuid().ToString());
        writer.WriteEndElement(); // ResponseMetadata
        writer.WriteEndElement(); // Response
        writer.Flush();
    }

    internal static ListTopicsRequest DeserializeListTopicsRequest(string requestBody)
    {
        var queryParams = System.Web.HttpUtility.ParseQueryString(requestBody);
        var request = new ListTopicsRequest();

        // NextToken
        var nextTokenValue = queryParams["NextToken"];
        if (nextTokenValue != null)
            request.NextToken = nextTokenValue;

        return request;
    }

    internal static void SerializeListTopicsResponse(ListTopicsResponse response, Stream stream)
    {
        var settings = new XmlWriterSettings { OmitXmlDeclaration = false, Encoding = new System.Text.UTF8Encoding(false), CloseOutput = false };
        using var writer = XmlWriter.Create(stream, settings);
        writer.WriteStartElement("ListTopicsResponse", "http://sns.amazonaws.com/doc/2010-03-31/");
        writer.WriteStartElement("ListTopicsResult");
            // Topics
            if (response.Topics != null)
                SerializeList_TopicsList(writer, "Topics", response.Topics);
            // NextToken
            if (response.NextToken != null)
                writer.WriteElementString("NextToken", response.NextToken.ToString());
        writer.WriteEndElement(); // Result
        writer.WriteStartElement("ResponseMetadata");
        writer.WriteElementString("RequestId", System.Guid.NewGuid().ToString());
        writer.WriteEndElement(); // ResponseMetadata
        writer.WriteEndElement(); // Response
        writer.Flush();
    }

    internal static OptInPhoneNumberRequest DeserializeOptInPhoneNumberRequest(string requestBody)
    {
        var queryParams = System.Web.HttpUtility.ParseQueryString(requestBody);
        var request = new OptInPhoneNumberRequest();

        // phoneNumber
        var phoneNumberValue = queryParams["phoneNumber"];
        if (phoneNumberValue != null)
            request.PhoneNumber = phoneNumberValue;

        return request;
    }

    internal static void SerializeOptInPhoneNumberResponse(OptInPhoneNumberResponse response, Stream stream)
    {
        var settings = new XmlWriterSettings { OmitXmlDeclaration = false, Encoding = new System.Text.UTF8Encoding(false), CloseOutput = false };
        using var writer = XmlWriter.Create(stream, settings);
        writer.WriteStartElement("OptInPhoneNumberResponse", "http://sns.amazonaws.com/doc/2010-03-31/");
        writer.WriteStartElement("OptInPhoneNumberResult");
        writer.WriteEndElement(); // Result
        writer.WriteStartElement("ResponseMetadata");
        writer.WriteElementString("RequestId", System.Guid.NewGuid().ToString());
        writer.WriteEndElement(); // ResponseMetadata
        writer.WriteEndElement(); // Response
        writer.Flush();
    }

    internal static PublishRequest DeserializePublishRequest(string requestBody)
    {
        var queryParams = System.Web.HttpUtility.ParseQueryString(requestBody);
        var request = new PublishRequest();

        // TopicArn
        var topicArnValue = queryParams["TopicArn"];
        if (topicArnValue != null)
            request.TopicArn = topicArnValue;

        // TargetArn
        var targetArnValue = queryParams["TargetArn"];
        if (targetArnValue != null)
            request.TargetArn = targetArnValue;

        // PhoneNumber
        var phoneNumberValue = queryParams["PhoneNumber"];
        if (phoneNumberValue != null)
            request.PhoneNumber = phoneNumberValue;

        // Message
        var messageValue = queryParams["Message"];
        if (messageValue != null)
            request.Message = messageValue;

        // Subject
        var subjectValue = queryParams["Subject"];
        if (subjectValue != null)
            request.Subject = subjectValue;

        // MessageStructure
        var messageStructureValue = queryParams["MessageStructure"];
        if (messageStructureValue != null)
            request.MessageStructure = messageStructureValue;

        // MessageAttributes
        request.MessageAttributes = DeserializeMap_MessageAttributeMap(queryParams, "MessageAttributes");

        // MessageDeduplicationId
        var messageDeduplicationIdValue = queryParams["MessageDeduplicationId"];
        if (messageDeduplicationIdValue != null)
            request.MessageDeduplicationId = messageDeduplicationIdValue;

        // MessageGroupId
        var messageGroupIdValue = queryParams["MessageGroupId"];
        if (messageGroupIdValue != null)
            request.MessageGroupId = messageGroupIdValue;

        return request;
    }

    internal static void SerializePublishResponse(PublishResponse response, Stream stream)
    {
        var settings = new XmlWriterSettings { OmitXmlDeclaration = false, Encoding = new System.Text.UTF8Encoding(false), CloseOutput = false };
        using var writer = XmlWriter.Create(stream, settings);
        writer.WriteStartElement("PublishResponse", "http://sns.amazonaws.com/doc/2010-03-31/");
        writer.WriteStartElement("PublishResult");
            // MessageId
            if (response.MessageId != null)
                writer.WriteElementString("MessageId", response.MessageId.ToString());
            // SequenceNumber
            if (response.SequenceNumber != null)
                writer.WriteElementString("SequenceNumber", response.SequenceNumber.ToString());
        writer.WriteEndElement(); // Result
        writer.WriteStartElement("ResponseMetadata");
        writer.WriteElementString("RequestId", System.Guid.NewGuid().ToString());
        writer.WriteEndElement(); // ResponseMetadata
        writer.WriteEndElement(); // Response
        writer.Flush();
    }

    internal static PublishBatchRequest DeserializePublishBatchRequest(string requestBody)
    {
        var queryParams = System.Web.HttpUtility.ParseQueryString(requestBody);
        var request = new PublishBatchRequest();

        // TopicArn
        var topicArnValue = queryParams["TopicArn"];
        if (topicArnValue != null)
            request.TopicArn = topicArnValue;

        // PublishBatchRequestEntries
        request.PublishBatchRequestEntries = DeserializeList_PublishBatchRequestEntryList(queryParams, "PublishBatchRequestEntries");

        return request;
    }

    internal static void SerializePublishBatchResponse(PublishBatchResponse response, Stream stream)
    {
        var settings = new XmlWriterSettings { OmitXmlDeclaration = false, Encoding = new System.Text.UTF8Encoding(false), CloseOutput = false };
        using var writer = XmlWriter.Create(stream, settings);
        writer.WriteStartElement("PublishBatchResponse", "http://sns.amazonaws.com/doc/2010-03-31/");
        writer.WriteStartElement("PublishBatchResult");
            // Successful
            if (response.Successful != null)
                SerializeList_PublishBatchResultEntryList(writer, "Successful", response.Successful);
            // Failed
            if (response.Failed != null)
                SerializeList_BatchResultErrorEntryList(writer, "Failed", response.Failed);
        writer.WriteEndElement(); // Result
        writer.WriteStartElement("ResponseMetadata");
        writer.WriteElementString("RequestId", System.Guid.NewGuid().ToString());
        writer.WriteEndElement(); // ResponseMetadata
        writer.WriteEndElement(); // Response
        writer.Flush();
    }

    internal static PutDataProtectionPolicyRequest DeserializePutDataProtectionPolicyRequest(string requestBody)
    {
        var queryParams = System.Web.HttpUtility.ParseQueryString(requestBody);
        var request = new PutDataProtectionPolicyRequest();

        // ResourceArn
        var resourceArnValue = queryParams["ResourceArn"];
        if (resourceArnValue != null)
            request.ResourceArn = resourceArnValue;

        // DataProtectionPolicy
        var dataProtectionPolicyValue = queryParams["DataProtectionPolicy"];
        if (dataProtectionPolicyValue != null)
            request.DataProtectionPolicy = dataProtectionPolicyValue;

        return request;
    }

    internal static void SerializePutDataProtectionPolicyResponse(PutDataProtectionPolicyResponse response, Stream stream)
    {
        var settings = new XmlWriterSettings { OmitXmlDeclaration = false, Encoding = new System.Text.UTF8Encoding(false), CloseOutput = false };
        using var writer = XmlWriter.Create(stream, settings);
        writer.WriteStartElement("PutDataProtectionPolicyResponse", "http://sns.amazonaws.com/doc/2010-03-31/");
        writer.WriteStartElement("ResponseMetadata");
        writer.WriteElementString("RequestId", System.Guid.NewGuid().ToString());
        writer.WriteEndElement(); // ResponseMetadata
        writer.WriteEndElement(); // Response
        writer.Flush();
    }

    internal static RemovePermissionRequest DeserializeRemovePermissionRequest(string requestBody)
    {
        var queryParams = System.Web.HttpUtility.ParseQueryString(requestBody);
        var request = new RemovePermissionRequest();

        // TopicArn
        var topicArnValue = queryParams["TopicArn"];
        if (topicArnValue != null)
            request.TopicArn = topicArnValue;

        // Label
        var labelValue = queryParams["Label"];
        if (labelValue != null)
            request.Label = labelValue;

        return request;
    }

    internal static void SerializeRemovePermissionResponse(RemovePermissionResponse response, Stream stream)
    {
        var settings = new XmlWriterSettings { OmitXmlDeclaration = false, Encoding = new System.Text.UTF8Encoding(false), CloseOutput = false };
        using var writer = XmlWriter.Create(stream, settings);
        writer.WriteStartElement("RemovePermissionResponse", "http://sns.amazonaws.com/doc/2010-03-31/");
        writer.WriteStartElement("ResponseMetadata");
        writer.WriteElementString("RequestId", System.Guid.NewGuid().ToString());
        writer.WriteEndElement(); // ResponseMetadata
        writer.WriteEndElement(); // Response
        writer.Flush();
    }

    internal static SetEndpointAttributesRequest DeserializeSetEndpointAttributesRequest(string requestBody)
    {
        var queryParams = System.Web.HttpUtility.ParseQueryString(requestBody);
        var request = new SetEndpointAttributesRequest();

        // EndpointArn
        var endpointArnValue = queryParams["EndpointArn"];
        if (endpointArnValue != null)
            request.EndpointArn = endpointArnValue;

        // Attributes
        request.Attributes = DeserializeMap_MapStringToString(queryParams, "Attributes");

        return request;
    }

    internal static void SerializeSetEndpointAttributesResponse(SetEndpointAttributesResponse response, Stream stream)
    {
        var settings = new XmlWriterSettings { OmitXmlDeclaration = false, Encoding = new System.Text.UTF8Encoding(false), CloseOutput = false };
        using var writer = XmlWriter.Create(stream, settings);
        writer.WriteStartElement("SetEndpointAttributesResponse", "http://sns.amazonaws.com/doc/2010-03-31/");
        writer.WriteStartElement("ResponseMetadata");
        writer.WriteElementString("RequestId", System.Guid.NewGuid().ToString());
        writer.WriteEndElement(); // ResponseMetadata
        writer.WriteEndElement(); // Response
        writer.Flush();
    }

    internal static SetPlatformApplicationAttributesRequest DeserializeSetPlatformApplicationAttributesRequest(string requestBody)
    {
        var queryParams = System.Web.HttpUtility.ParseQueryString(requestBody);
        var request = new SetPlatformApplicationAttributesRequest();

        // PlatformApplicationArn
        var platformApplicationArnValue = queryParams["PlatformApplicationArn"];
        if (platformApplicationArnValue != null)
            request.PlatformApplicationArn = platformApplicationArnValue;

        // Attributes
        request.Attributes = DeserializeMap_MapStringToString(queryParams, "Attributes");

        return request;
    }

    internal static void SerializeSetPlatformApplicationAttributesResponse(SetPlatformApplicationAttributesResponse response, Stream stream)
    {
        var settings = new XmlWriterSettings { OmitXmlDeclaration = false, Encoding = new System.Text.UTF8Encoding(false), CloseOutput = false };
        using var writer = XmlWriter.Create(stream, settings);
        writer.WriteStartElement("SetPlatformApplicationAttributesResponse", "http://sns.amazonaws.com/doc/2010-03-31/");
        writer.WriteStartElement("ResponseMetadata");
        writer.WriteElementString("RequestId", System.Guid.NewGuid().ToString());
        writer.WriteEndElement(); // ResponseMetadata
        writer.WriteEndElement(); // Response
        writer.Flush();
    }

    internal static SetSMSAttributesRequest DeserializeSetSMSAttributesRequest(string requestBody)
    {
        var queryParams = System.Web.HttpUtility.ParseQueryString(requestBody);
        var request = new SetSMSAttributesRequest();

        // attributes
        request.Attributes = DeserializeMap_MapStringToString(queryParams, "attributes");

        return request;
    }

    internal static void SerializeSetSMSAttributesResponse(SetSMSAttributesResponse response, Stream stream)
    {
        var settings = new XmlWriterSettings { OmitXmlDeclaration = false, Encoding = new System.Text.UTF8Encoding(false), CloseOutput = false };
        using var writer = XmlWriter.Create(stream, settings);
        writer.WriteStartElement("SetSMSAttributesResponse", "http://sns.amazonaws.com/doc/2010-03-31/");
        writer.WriteStartElement("SetSMSAttributesResult");
        writer.WriteEndElement(); // Result
        writer.WriteStartElement("ResponseMetadata");
        writer.WriteElementString("RequestId", System.Guid.NewGuid().ToString());
        writer.WriteEndElement(); // ResponseMetadata
        writer.WriteEndElement(); // Response
        writer.Flush();
    }

    internal static SetSubscriptionAttributesRequest DeserializeSetSubscriptionAttributesRequest(string requestBody)
    {
        var queryParams = System.Web.HttpUtility.ParseQueryString(requestBody);
        var request = new SetSubscriptionAttributesRequest();

        // SubscriptionArn
        var subscriptionArnValue = queryParams["SubscriptionArn"];
        if (subscriptionArnValue != null)
            request.SubscriptionArn = subscriptionArnValue;

        // AttributeName
        var attributeNameValue = queryParams["AttributeName"];
        if (attributeNameValue != null)
            request.AttributeName = attributeNameValue;

        // AttributeValue
        var attributeValueValue = queryParams["AttributeValue"];
        if (attributeValueValue != null)
            request.AttributeValue = attributeValueValue;

        return request;
    }

    internal static void SerializeSetSubscriptionAttributesResponse(SetSubscriptionAttributesResponse response, Stream stream)
    {
        var settings = new XmlWriterSettings { OmitXmlDeclaration = false, Encoding = new System.Text.UTF8Encoding(false), CloseOutput = false };
        using var writer = XmlWriter.Create(stream, settings);
        writer.WriteStartElement("SetSubscriptionAttributesResponse", "http://sns.amazonaws.com/doc/2010-03-31/");
        writer.WriteStartElement("ResponseMetadata");
        writer.WriteElementString("RequestId", System.Guid.NewGuid().ToString());
        writer.WriteEndElement(); // ResponseMetadata
        writer.WriteEndElement(); // Response
        writer.Flush();
    }

    internal static SetTopicAttributesRequest DeserializeSetTopicAttributesRequest(string requestBody)
    {
        var queryParams = System.Web.HttpUtility.ParseQueryString(requestBody);
        var request = new SetTopicAttributesRequest();

        // TopicArn
        var topicArnValue = queryParams["TopicArn"];
        if (topicArnValue != null)
            request.TopicArn = topicArnValue;

        // AttributeName
        var attributeNameValue = queryParams["AttributeName"];
        if (attributeNameValue != null)
            request.AttributeName = attributeNameValue;

        // AttributeValue
        var attributeValueValue = queryParams["AttributeValue"];
        if (attributeValueValue != null)
            request.AttributeValue = attributeValueValue;

        return request;
    }

    internal static void SerializeSetTopicAttributesResponse(SetTopicAttributesResponse response, Stream stream)
    {
        var settings = new XmlWriterSettings { OmitXmlDeclaration = false, Encoding = new System.Text.UTF8Encoding(false), CloseOutput = false };
        using var writer = XmlWriter.Create(stream, settings);
        writer.WriteStartElement("SetTopicAttributesResponse", "http://sns.amazonaws.com/doc/2010-03-31/");
        writer.WriteStartElement("ResponseMetadata");
        writer.WriteElementString("RequestId", System.Guid.NewGuid().ToString());
        writer.WriteEndElement(); // ResponseMetadata
        writer.WriteEndElement(); // Response
        writer.Flush();
    }

    internal static SubscribeRequest DeserializeSubscribeRequest(string requestBody)
    {
        var queryParams = System.Web.HttpUtility.ParseQueryString(requestBody);
        var request = new SubscribeRequest();

        // TopicArn
        var topicArnValue = queryParams["TopicArn"];
        if (topicArnValue != null)
            request.TopicArn = topicArnValue;

        // Protocol
        var protocolValue = queryParams["Protocol"];
        if (protocolValue != null)
            request.Protocol = protocolValue;

        // Endpoint
        var endpointValue = queryParams["Endpoint"];
        if (endpointValue != null)
            request.Endpoint = endpointValue;

        // Attributes
        request.Attributes = DeserializeMap_SubscriptionAttributesMap(queryParams, "Attributes");

        // ReturnSubscriptionArn
        var returnSubscriptionArnValue = queryParams["ReturnSubscriptionArn"];
        if (returnSubscriptionArnValue != null && bool.TryParse(returnSubscriptionArnValue, out var returnSubscriptionArnParsed))
            request.ReturnSubscriptionArn = returnSubscriptionArnParsed;

        return request;
    }

    internal static void SerializeSubscribeResponse(SubscribeResponse response, Stream stream)
    {
        var settings = new XmlWriterSettings { OmitXmlDeclaration = false, Encoding = new System.Text.UTF8Encoding(false), CloseOutput = false };
        using var writer = XmlWriter.Create(stream, settings);
        writer.WriteStartElement("SubscribeResponse", "http://sns.amazonaws.com/doc/2010-03-31/");
        writer.WriteStartElement("SubscribeResult");
            // SubscriptionArn
            if (response.SubscriptionArn != null)
                writer.WriteElementString("SubscriptionArn", response.SubscriptionArn.ToString());
        writer.WriteEndElement(); // Result
        writer.WriteStartElement("ResponseMetadata");
        writer.WriteElementString("RequestId", System.Guid.NewGuid().ToString());
        writer.WriteEndElement(); // ResponseMetadata
        writer.WriteEndElement(); // Response
        writer.Flush();
    }

    internal static TagResourceRequest DeserializeTagResourceRequest(string requestBody)
    {
        var queryParams = System.Web.HttpUtility.ParseQueryString(requestBody);
        var request = new TagResourceRequest();

        // ResourceArn
        var resourceArnValue = queryParams["ResourceArn"];
        if (resourceArnValue != null)
            request.ResourceArn = resourceArnValue;

        // Tags
        request.Tags = DeserializeList_TagList(queryParams, "Tags");

        return request;
    }

    internal static void SerializeTagResourceResponse(TagResourceResponse response, Stream stream)
    {
        var settings = new XmlWriterSettings { OmitXmlDeclaration = false, Encoding = new System.Text.UTF8Encoding(false), CloseOutput = false };
        using var writer = XmlWriter.Create(stream, settings);
        writer.WriteStartElement("TagResourceResponse", "http://sns.amazonaws.com/doc/2010-03-31/");
        writer.WriteStartElement("TagResourceResult");
        writer.WriteEndElement(); // Result
        writer.WriteStartElement("ResponseMetadata");
        writer.WriteElementString("RequestId", System.Guid.NewGuid().ToString());
        writer.WriteEndElement(); // ResponseMetadata
        writer.WriteEndElement(); // Response
        writer.Flush();
    }

    internal static UnsubscribeRequest DeserializeUnsubscribeRequest(string requestBody)
    {
        var queryParams = System.Web.HttpUtility.ParseQueryString(requestBody);
        var request = new UnsubscribeRequest();

        // SubscriptionArn
        var subscriptionArnValue = queryParams["SubscriptionArn"];
        if (subscriptionArnValue != null)
            request.SubscriptionArn = subscriptionArnValue;

        return request;
    }

    internal static void SerializeUnsubscribeResponse(UnsubscribeResponse response, Stream stream)
    {
        var settings = new XmlWriterSettings { OmitXmlDeclaration = false, Encoding = new System.Text.UTF8Encoding(false), CloseOutput = false };
        using var writer = XmlWriter.Create(stream, settings);
        writer.WriteStartElement("UnsubscribeResponse", "http://sns.amazonaws.com/doc/2010-03-31/");
        writer.WriteStartElement("ResponseMetadata");
        writer.WriteElementString("RequestId", System.Guid.NewGuid().ToString());
        writer.WriteEndElement(); // ResponseMetadata
        writer.WriteEndElement(); // Response
        writer.Flush();
    }

    internal static UntagResourceRequest DeserializeUntagResourceRequest(string requestBody)
    {
        var queryParams = System.Web.HttpUtility.ParseQueryString(requestBody);
        var request = new UntagResourceRequest();

        // ResourceArn
        var resourceArnValue = queryParams["ResourceArn"];
        if (resourceArnValue != null)
            request.ResourceArn = resourceArnValue;

        // TagKeys
        request.TagKeys = DeserializeList_TagKeyList(queryParams, "TagKeys");

        return request;
    }

    internal static void SerializeUntagResourceResponse(UntagResourceResponse response, Stream stream)
    {
        var settings = new XmlWriterSettings { OmitXmlDeclaration = false, Encoding = new System.Text.UTF8Encoding(false), CloseOutput = false };
        using var writer = XmlWriter.Create(stream, settings);
        writer.WriteStartElement("UntagResourceResponse", "http://sns.amazonaws.com/doc/2010-03-31/");
        writer.WriteStartElement("UntagResourceResult");
        writer.WriteEndElement(); // Result
        writer.WriteStartElement("ResponseMetadata");
        writer.WriteElementString("RequestId", System.Guid.NewGuid().ToString());
        writer.WriteEndElement(); // ResponseMetadata
        writer.WriteEndElement(); // Response
        writer.Flush();
    }

    internal static VerifySMSSandboxPhoneNumberRequest DeserializeVerifySMSSandboxPhoneNumberRequest(string requestBody)
    {
        var queryParams = System.Web.HttpUtility.ParseQueryString(requestBody);
        var request = new VerifySMSSandboxPhoneNumberRequest();

        // PhoneNumber
        var phoneNumberValue = queryParams["PhoneNumber"];
        if (phoneNumberValue != null)
            request.PhoneNumber = phoneNumberValue;

        // OneTimePassword
        var oneTimePasswordValue = queryParams["OneTimePassword"];
        if (oneTimePasswordValue != null)
            request.OneTimePassword = oneTimePasswordValue;

        return request;
    }

    internal static void SerializeVerifySMSSandboxPhoneNumberResponse(VerifySMSSandboxPhoneNumberResponse response, Stream stream)
    {
        var settings = new XmlWriterSettings { OmitXmlDeclaration = false, Encoding = new System.Text.UTF8Encoding(false), CloseOutput = false };
        using var writer = XmlWriter.Create(stream, settings);
        writer.WriteStartElement("VerifySMSSandboxPhoneNumberResponse", "http://sns.amazonaws.com/doc/2010-03-31/");
        writer.WriteStartElement("VerifySMSSandboxPhoneNumberResult");
        writer.WriteEndElement(); // Result
        writer.WriteStartElement("ResponseMetadata");
        writer.WriteElementString("RequestId", System.Guid.NewGuid().ToString());
        writer.WriteEndElement(); // ResponseMetadata
        writer.WriteEndElement(); // Response
        writer.Flush();
    }

    // Helper methods

    private static List<string>? DeserializeList_ActionsList(NameValueCollection queryParams, string prefix)
    {
        var list = new List<string>();
        int index = 1;
        while (true)
        {
            var key = $"{prefix}.member.{index}";
            var value = queryParams[key];
            if (value != null)
                list.Add(value);
            else
                break;
            index++;
        }
        return list.Count > 0 ? list : null;
    }

    private static List<string>? DeserializeList_DelegatesList(NameValueCollection queryParams, string prefix)
    {
        var list = new List<string>();
        int index = 1;
        while (true)
        {
            var key = $"{prefix}.member.{index}";
            var value = queryParams[key];
            if (value != null)
                list.Add(value);
            else
                break;
            index++;
        }
        return list.Count > 0 ? list : null;
    }

    private static List<string>? DeserializeList_ListString(NameValueCollection queryParams, string prefix)
    {
        var list = new List<string>();
        int index = 1;
        while (true)
        {
            var key = $"{prefix}.member.{index}";
            var value = queryParams[key];
            if (value != null)
                list.Add(value);
            else
                break;
            index++;
        }
        return list.Count > 0 ? list : null;
    }

    private static List<PublishBatchRequestEntry>? DeserializeList_PublishBatchRequestEntryList(NameValueCollection queryParams, string prefix)
    {
        var list = new List<PublishBatchRequestEntry>();
        int index = 1;
        while (true)
        {
            var key = $"{prefix}.member.{index}";
            // TODO: Deserialize structure from queryParams with prefix
            break;
            index++;
        }
        return list.Count > 0 ? list : null;
    }

    private static List<string>? DeserializeList_TagKeyList(NameValueCollection queryParams, string prefix)
    {
        var list = new List<string>();
        int index = 1;
        while (true)
        {
            var key = $"{prefix}.member.{index}";
            var value = queryParams[key];
            if (value != null)
                list.Add(value);
            else
                break;
            index++;
        }
        return list.Count > 0 ? list : null;
    }

    private static List<Tag>? DeserializeList_TagList(NameValueCollection queryParams, string prefix)
    {
        var list = new List<Tag>();
        int index = 1;
        while (true)
        {
            var key = $"{prefix}.member.{index}";
            // TODO: Deserialize structure from queryParams with prefix
            break;
            index++;
        }
        return list.Count > 0 ? list : null;
    }

    private static Dictionary<string, string>? DeserializeMap_MapStringToString(NameValueCollection queryParams, string prefix)
    {
        var map = new Dictionary<string, string>();
        int index = 1;
        while (true)
        {
            var keyParam = $"{prefix}.entry.{index}.key";
            var valueParam = $"{prefix}.entry.{index}.value";
            var key = queryParams[keyParam];
            var value = queryParams[valueParam];
            if (key != null && value != null)
            {
                map[key] = value;
            }
            else
                break;
            index++;
        }
        return map.Count > 0 ? map : null;
    }

    private static Dictionary<string, MessageAttributeValue>? DeserializeMap_MessageAttributeMap(NameValueCollection queryParams, string prefix)
    {
        var map = new Dictionary<string, MessageAttributeValue>();
        int index = 1;
        while (true)
        {
            var keyParam = $"{prefix}.entry.{index}.Name";
            var valueParam = $"{prefix}.entry.{index}.Value";
            var key = queryParams[keyParam];
            if (key != null)
            {
                var structure = DeserializeStructure_MessageAttributeValue(queryParams, valueParam);
                if (structure != null)
                {
                    map[key] = structure;
                }
                else
                {
                    break;
                }
            }
            else
                break;
            index++;
        }
        return map.Count > 0 ? map : null;
    }

    private static Dictionary<string, string>? DeserializeMap_SubscriptionAttributesMap(NameValueCollection queryParams, string prefix)
    {
        var map = new Dictionary<string, string>();
        int index = 1;
        while (true)
        {
            var keyParam = $"{prefix}.entry.{index}.key";
            var valueParam = $"{prefix}.entry.{index}.value";
            var key = queryParams[keyParam];
            var value = queryParams[valueParam];
            if (key != null && value != null)
            {
                map[key] = value;
            }
            else
                break;
            index++;
        }
        return map.Count > 0 ? map : null;
    }

    private static Dictionary<string, string>? DeserializeMap_TopicAttributesMap(NameValueCollection queryParams, string prefix)
    {
        var map = new Dictionary<string, string>();
        int index = 1;
        while (true)
        {
            var keyParam = $"{prefix}.entry.{index}.key";
            var valueParam = $"{prefix}.entry.{index}.value";
            var key = queryParams[keyParam];
            var value = queryParams[valueParam];
            if (key != null && value != null)
            {
                map[key] = value;
            }
            else
                break;
            index++;
        }
        return map.Count > 0 ? map : null;
    }

    private static void SerializeList_BatchResultErrorEntryList(XmlWriter writer, string elementName, List<BatchResultErrorEntry> list)
    {
        writer.WriteStartElement(elementName);
        foreach (var item in list)
        {
            SerializeStructure_BatchResultErrorEntry(writer, "member", item);
        }
        writer.WriteEndElement();
    }

    private static void SerializeList_ListOfEndpoints(XmlWriter writer, string elementName, List<Endpoint> list)
    {
        writer.WriteStartElement(elementName);
        foreach (var item in list)
        {
            SerializeStructure_Endpoint(writer, "member", item);
        }
        writer.WriteEndElement();
    }

    private static void SerializeList_ListOfPlatformApplications(XmlWriter writer, string elementName, List<PlatformApplication> list)
    {
        writer.WriteStartElement(elementName);
        foreach (var item in list)
        {
            SerializeStructure_PlatformApplication(writer, "member", item);
        }
        writer.WriteEndElement();
    }

    private static void SerializeList_PhoneNumberInformationList(XmlWriter writer, string elementName, List<PhoneNumberInformation> list)
    {
        writer.WriteStartElement(elementName);
        foreach (var item in list)
        {
            SerializeStructure_PhoneNumberInformation(writer, "member", item);
        }
        writer.WriteEndElement();
    }

    private static void SerializeList_PhoneNumberList(XmlWriter writer, string elementName, List<string> list)
    {
        writer.WriteStartElement(elementName);
        foreach (var item in list)
        {
            writer.WriteElementString("member", item);
        }
        writer.WriteEndElement();
    }

    private static void SerializeList_PublishBatchResultEntryList(XmlWriter writer, string elementName, List<PublishBatchResultEntry> list)
    {
        writer.WriteStartElement(elementName);
        foreach (var item in list)
        {
            SerializeStructure_PublishBatchResultEntry(writer, "member", item);
        }
        writer.WriteEndElement();
    }

    private static void SerializeList_SMSSandboxPhoneNumberList(XmlWriter writer, string elementName, List<SMSSandboxPhoneNumber> list)
    {
        writer.WriteStartElement(elementName);
        foreach (var item in list)
        {
            SerializeStructure_SMSSandboxPhoneNumber(writer, "member", item);
        }
        writer.WriteEndElement();
    }

    private static void SerializeList_SubscriptionsList(XmlWriter writer, string elementName, List<Subscription> list)
    {
        writer.WriteStartElement(elementName);
        foreach (var item in list)
        {
            SerializeStructure_Subscription(writer, "member", item);
        }
        writer.WriteEndElement();
    }

    private static void SerializeList_TagList(XmlWriter writer, string elementName, List<Tag> list)
    {
        writer.WriteStartElement(elementName);
        foreach (var item in list)
        {
            SerializeStructure_Tag(writer, "member", item);
        }
        writer.WriteEndElement();
    }

    private static void SerializeList_TopicsList(XmlWriter writer, string elementName, List<Topic> list)
    {
        writer.WriteStartElement(elementName);
        foreach (var item in list)
        {
            SerializeStructure_Topic(writer, "member", item);
        }
        writer.WriteEndElement();
    }

    private static void SerializeMap_MapStringToString(XmlWriter writer, string elementName, Dictionary<string, string> map)
    {
        writer.WriteStartElement(elementName);
        foreach (var kvp in map)
        {
            writer.WriteStartElement("entry");
            writer.WriteElementString("key", kvp.Key);
            writer.WriteElementString("value", kvp.Value);
            writer.WriteEndElement();
        }
        writer.WriteEndElement();
    }

    private static void SerializeMap_SubscriptionAttributesMap(XmlWriter writer, string elementName, Dictionary<string, string> map)
    {
        writer.WriteStartElement(elementName);
        foreach (var kvp in map)
        {
            writer.WriteStartElement("entry");
            writer.WriteElementString("key", kvp.Key);
            writer.WriteElementString("value", kvp.Value);
            writer.WriteEndElement();
        }
        writer.WriteEndElement();
    }

    private static void SerializeMap_TopicAttributesMap(XmlWriter writer, string elementName, Dictionary<string, string> map)
    {
        writer.WriteStartElement(elementName);
        foreach (var kvp in map)
        {
            writer.WriteStartElement("entry");
            writer.WriteElementString("key", kvp.Key);
            writer.WriteElementString("value", kvp.Value);
            writer.WriteEndElement();
        }
        writer.WriteEndElement();
    }

    private static MessageAttributeValue? DeserializeStructure_MessageAttributeValue(NameValueCollection queryParams, string prefix)
    {
        var structure = new MessageAttributeValue();
        var hasAnyValue = false;

        // DataType
        var dataTypeParam = $"{prefix}.DataType";
        var dataTypeValue = queryParams[dataTypeParam];
        if (dataTypeValue != null)
        {
            structure.DataType = dataTypeValue;
            hasAnyValue = true;
        }

        // StringValue
        var stringValueParam = $"{prefix}.StringValue";
        var stringValueValue = queryParams[stringValueParam];
        if (stringValueValue != null)
        {
            structure.StringValue = stringValueValue;
            hasAnyValue = true;
        }

        // BinaryValue
        var binaryValueParam = $"{prefix}.BinaryValue";
        var binaryValueValue = queryParams[binaryValueParam];
        if (binaryValueValue != null)
        {
            structure.BinaryValue = new MemoryStream(Convert.FromBase64String(binaryValueValue));
            hasAnyValue = true;
        }

        return hasAnyValue ? structure : null;
    }

    private static void SerializeStructure_BatchResultErrorEntry(XmlWriter writer, string elementName, BatchResultErrorEntry structure)
    {
        writer.WriteStartElement(elementName);
        if (structure.Id != null)
            writer.WriteElementString("Id", structure.Id);
        if (structure.Code != null)
            writer.WriteElementString("Code", structure.Code);
        if (structure.Message != null)
            writer.WriteElementString("Message", structure.Message);
        if (structure.SenderFault != null)
            writer.WriteElementString("SenderFault", structure.SenderFault.ToString());
        writer.WriteEndElement();
    }

    private static void SerializeStructure_Endpoint(XmlWriter writer, string elementName, Endpoint structure)
    {
        writer.WriteStartElement(elementName);
        if (structure.EndpointArn != null)
            writer.WriteElementString("EndpointArn", structure.EndpointArn);
        writer.WriteEndElement();
    }

    private static void SerializeStructure_PhoneNumberInformation(XmlWriter writer, string elementName, PhoneNumberInformation structure)
    {
        writer.WriteStartElement(elementName);
        if (structure.PhoneNumber != null)
            writer.WriteElementString("PhoneNumber", structure.PhoneNumber);
        if (structure.Status != null)
            writer.WriteElementString("Status", structure.Status);
        if (structure.Iso2CountryCode != null)
            writer.WriteElementString("Iso2CountryCode", structure.Iso2CountryCode);
        if (structure.RouteType != null)
            writer.WriteElementString("RouteType", structure.RouteType);
        writer.WriteEndElement();
    }

    private static void SerializeStructure_PlatformApplication(XmlWriter writer, string elementName, PlatformApplication structure)
    {
        writer.WriteStartElement(elementName);
        if (structure.PlatformApplicationArn != null)
            writer.WriteElementString("PlatformApplicationArn", structure.PlatformApplicationArn);
        writer.WriteEndElement();
    }

    private static void SerializeStructure_PublishBatchResultEntry(XmlWriter writer, string elementName, PublishBatchResultEntry structure)
    {
        writer.WriteStartElement(elementName);
        if (structure.Id != null)
            writer.WriteElementString("Id", structure.Id);
        if (structure.MessageId != null)
            writer.WriteElementString("MessageId", structure.MessageId);
        if (structure.SequenceNumber != null)
            writer.WriteElementString("SequenceNumber", structure.SequenceNumber);
        writer.WriteEndElement();
    }

    private static void SerializeStructure_SMSSandboxPhoneNumber(XmlWriter writer, string elementName, SMSSandboxPhoneNumber structure)
    {
        writer.WriteStartElement(elementName);
        if (structure.PhoneNumber != null)
            writer.WriteElementString("PhoneNumber", structure.PhoneNumber);
        if (structure.Status != null)
            writer.WriteElementString("Status", structure.Status);
        writer.WriteEndElement();
    }

    private static void SerializeStructure_Subscription(XmlWriter writer, string elementName, Subscription structure)
    {
        writer.WriteStartElement(elementName);
        if (structure.SubscriptionArn != null)
            writer.WriteElementString("SubscriptionArn", structure.SubscriptionArn);
        if (structure.Owner != null)
            writer.WriteElementString("Owner", structure.Owner);
        if (structure.Protocol != null)
            writer.WriteElementString("Protocol", structure.Protocol);
        if (structure.Endpoint != null)
            writer.WriteElementString("Endpoint", structure.Endpoint);
        if (structure.TopicArn != null)
            writer.WriteElementString("TopicArn", structure.TopicArn);
        writer.WriteEndElement();
    }

    private static void SerializeStructure_Tag(XmlWriter writer, string elementName, Tag structure)
    {
        writer.WriteStartElement(elementName);
        if (structure.Key != null)
            writer.WriteElementString("Key", structure.Key);
        if (structure.Value != null)
            writer.WriteElementString("Value", structure.Value);
        writer.WriteEndElement();
    }

    private static void SerializeStructure_Topic(XmlWriter writer, string elementName, Topic structure)
    {
        writer.WriteStartElement(elementName);
        if (structure.TopicArn != null)
            writer.WriteElementString("TopicArn", structure.TopicArn);
        writer.WriteEndElement();
    }

}
