// <auto-generated/>
// Generated JSON protocol handler for Sqs

using System.Net;
using System.Net.Http.Json;
using System.Text;
using System.Text.Json;
using Amazon.SQS;
using Amazon.SQS.Model;
using Amazon.Runtime;
using LocalSqsSnsMessaging.Http.Serialization;

namespace LocalSqsSnsMessaging.Http.Handlers;

/// <summary>
/// Handles Sqs operations using JSON protocol.
/// </summary>
internal static partial class SqsOperationHandler
{
    private static readonly JsonSerializerOptions JsonOptions = new()
    {
        PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
        PropertyNameCaseInsensitive = true,
        DefaultIgnoreCondition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull,
        Converters = { new MemoryStreamJsonConverter() }
    };

    public static async Task<HttpResponseMessage> HandleAsync(
        HttpRequestMessage request,
        string operationName,
        InMemoryAwsBus bus,
        CancellationToken cancellationToken)
    {
        ArgumentNullException.ThrowIfNull(request);
        ArgumentNullException.ThrowIfNull(operationName);
        ArgumentNullException.ThrowIfNull(bus);

        using IAmazonSQS client = bus.CreateRawSqsClient();

        return operationName switch
        {
            "AddPermission" => await HandleAddPermissionAsync(request, client, cancellationToken),
            "CancelMessageMoveTask" => await HandleCancelMessageMoveTaskAsync(request, client, cancellationToken),
            "ChangeMessageVisibility" => await HandleChangeMessageVisibilityAsync(request, client, cancellationToken),
            "ChangeMessageVisibilityBatch" => await HandleChangeMessageVisibilityBatchAsync(request, client, cancellationToken),
            "CreateQueue" => await HandleCreateQueueAsync(request, client, cancellationToken),
            "DeleteMessage" => await HandleDeleteMessageAsync(request, client, cancellationToken),
            "DeleteMessageBatch" => await HandleDeleteMessageBatchAsync(request, client, cancellationToken),
            "DeleteQueue" => await HandleDeleteQueueAsync(request, client, cancellationToken),
            "GetQueueAttributes" => await HandleGetQueueAttributesAsync(request, client, cancellationToken),
            "GetQueueUrl" => await HandleGetQueueUrlAsync(request, client, cancellationToken),
            "ListDeadLetterSourceQueues" => await HandleListDeadLetterSourceQueuesAsync(request, client, cancellationToken),
            "ListMessageMoveTasks" => await HandleListMessageMoveTasksAsync(request, client, cancellationToken),
            "ListQueueTags" => await HandleListQueueTagsAsync(request, client, cancellationToken),
            "ListQueues" => await HandleListQueuesAsync(request, client, cancellationToken),
            "PurgeQueue" => await HandlePurgeQueueAsync(request, client, cancellationToken),
            "ReceiveMessage" => await HandleReceiveMessageAsync(request, client, cancellationToken),
            "RemovePermission" => await HandleRemovePermissionAsync(request, client, cancellationToken),
            "SendMessage" => await HandleSendMessageAsync(request, client, cancellationToken),
            "SendMessageBatch" => await HandleSendMessageBatchAsync(request, client, cancellationToken),
            "SetQueueAttributes" => await HandleSetQueueAttributesAsync(request, client, cancellationToken),
            "StartMessageMoveTask" => await HandleStartMessageMoveTaskAsync(request, client, cancellationToken),
            "TagQueue" => await HandleTagQueueAsync(request, client, cancellationToken),
            "UntagQueue" => await HandleUntagQueueAsync(request, client, cancellationToken),
            _ => throw new NotSupportedException($"Sqs operation '{operationName}' is not supported.")
        };
    }

    private static async Task<HttpResponseMessage> HandleAddPermissionAsync(
        HttpRequestMessage request,
        IAmazonSQS client,
        CancellationToken cancellationToken)
    {
        try
        {
            var requestObject = await request.Content!.ReadFromJsonAsync<AddPermissionRequest>(JsonOptions, cancellationToken).ConfigureAwait(false);
            var result = await client.AddPermissionAsync(requestObject, cancellationToken).ConfigureAwait(false);

            var response = new HttpResponseMessage(HttpStatusCode.OK)
            {
                Content = JsonContent.Create(result, options: JsonOptions)
            };
            response.Content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/x-amz-json-1.0");
            return response;
        }
        catch (OperationCanceledException)
        {
            throw;
        }
        catch (AmazonServiceException ex)
        {
            return CreateErrorResponse(ex);
        }
    }

    private static async Task<HttpResponseMessage> HandleCancelMessageMoveTaskAsync(
        HttpRequestMessage request,
        IAmazonSQS client,
        CancellationToken cancellationToken)
    {
        try
        {
            var requestObject = await request.Content!.ReadFromJsonAsync<CancelMessageMoveTaskRequest>(JsonOptions, cancellationToken).ConfigureAwait(false);
            var result = await client.CancelMessageMoveTaskAsync(requestObject, cancellationToken).ConfigureAwait(false);

            var response = new HttpResponseMessage(HttpStatusCode.OK)
            {
                Content = JsonContent.Create(result, options: JsonOptions)
            };
            response.Content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/x-amz-json-1.0");
            return response;
        }
        catch (OperationCanceledException)
        {
            throw;
        }
        catch (AmazonServiceException ex)
        {
            return CreateErrorResponse(ex);
        }
    }

    private static async Task<HttpResponseMessage> HandleChangeMessageVisibilityAsync(
        HttpRequestMessage request,
        IAmazonSQS client,
        CancellationToken cancellationToken)
    {
        try
        {
            var requestObject = await request.Content!.ReadFromJsonAsync<ChangeMessageVisibilityRequest>(JsonOptions, cancellationToken).ConfigureAwait(false);
            var result = await client.ChangeMessageVisibilityAsync(requestObject, cancellationToken).ConfigureAwait(false);

            var response = new HttpResponseMessage(HttpStatusCode.OK)
            {
                Content = JsonContent.Create(result, options: JsonOptions)
            };
            response.Content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/x-amz-json-1.0");
            return response;
        }
        catch (OperationCanceledException)
        {
            throw;
        }
        catch (AmazonServiceException ex)
        {
            return CreateErrorResponse(ex);
        }
    }

    private static async Task<HttpResponseMessage> HandleChangeMessageVisibilityBatchAsync(
        HttpRequestMessage request,
        IAmazonSQS client,
        CancellationToken cancellationToken)
    {
        try
        {
            var requestObject = await request.Content!.ReadFromJsonAsync<ChangeMessageVisibilityBatchRequest>(JsonOptions, cancellationToken).ConfigureAwait(false);
            var result = await client.ChangeMessageVisibilityBatchAsync(requestObject, cancellationToken).ConfigureAwait(false);

            var response = new HttpResponseMessage(HttpStatusCode.OK)
            {
                Content = JsonContent.Create(result, options: JsonOptions)
            };
            response.Content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/x-amz-json-1.0");
            return response;
        }
        catch (OperationCanceledException)
        {
            throw;
        }
        catch (AmazonServiceException ex)
        {
            return CreateErrorResponse(ex);
        }
    }

    private static async Task<HttpResponseMessage> HandleCreateQueueAsync(
        HttpRequestMessage request,
        IAmazonSQS client,
        CancellationToken cancellationToken)
    {
        try
        {
            var requestObject = await request.Content!.ReadFromJsonAsync<CreateQueueRequest>(JsonOptions, cancellationToken).ConfigureAwait(false);
            var result = await client.CreateQueueAsync(requestObject, cancellationToken).ConfigureAwait(false);

            var response = new HttpResponseMessage(HttpStatusCode.OK)
            {
                Content = JsonContent.Create(result, options: JsonOptions)
            };
            response.Content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/x-amz-json-1.0");
            return response;
        }
        catch (OperationCanceledException)
        {
            throw;
        }
        catch (AmazonServiceException ex)
        {
            return CreateErrorResponse(ex);
        }
    }

    private static async Task<HttpResponseMessage> HandleDeleteMessageAsync(
        HttpRequestMessage request,
        IAmazonSQS client,
        CancellationToken cancellationToken)
    {
        try
        {
            var requestObject = await request.Content!.ReadFromJsonAsync<DeleteMessageRequest>(JsonOptions, cancellationToken).ConfigureAwait(false);
            var result = await client.DeleteMessageAsync(requestObject, cancellationToken).ConfigureAwait(false);

            var response = new HttpResponseMessage(HttpStatusCode.OK)
            {
                Content = JsonContent.Create(result, options: JsonOptions)
            };
            response.Content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/x-amz-json-1.0");
            return response;
        }
        catch (OperationCanceledException)
        {
            throw;
        }
        catch (AmazonServiceException ex)
        {
            return CreateErrorResponse(ex);
        }
    }

    private static async Task<HttpResponseMessage> HandleDeleteMessageBatchAsync(
        HttpRequestMessage request,
        IAmazonSQS client,
        CancellationToken cancellationToken)
    {
        try
        {
            var requestObject = await request.Content!.ReadFromJsonAsync<DeleteMessageBatchRequest>(JsonOptions, cancellationToken).ConfigureAwait(false);
            var result = await client.DeleteMessageBatchAsync(requestObject, cancellationToken).ConfigureAwait(false);

            var response = new HttpResponseMessage(HttpStatusCode.OK)
            {
                Content = JsonContent.Create(result, options: JsonOptions)
            };
            response.Content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/x-amz-json-1.0");
            return response;
        }
        catch (OperationCanceledException)
        {
            throw;
        }
        catch (AmazonServiceException ex)
        {
            return CreateErrorResponse(ex);
        }
    }

    private static async Task<HttpResponseMessage> HandleDeleteQueueAsync(
        HttpRequestMessage request,
        IAmazonSQS client,
        CancellationToken cancellationToken)
    {
        try
        {
            var requestObject = await request.Content!.ReadFromJsonAsync<DeleteQueueRequest>(JsonOptions, cancellationToken).ConfigureAwait(false);
            var result = await client.DeleteQueueAsync(requestObject, cancellationToken).ConfigureAwait(false);

            var response = new HttpResponseMessage(HttpStatusCode.OK)
            {
                Content = JsonContent.Create(result, options: JsonOptions)
            };
            response.Content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/x-amz-json-1.0");
            return response;
        }
        catch (OperationCanceledException)
        {
            throw;
        }
        catch (AmazonServiceException ex)
        {
            return CreateErrorResponse(ex);
        }
    }

    private static async Task<HttpResponseMessage> HandleGetQueueAttributesAsync(
        HttpRequestMessage request,
        IAmazonSQS client,
        CancellationToken cancellationToken)
    {
        try
        {
            var requestObject = await request.Content!.ReadFromJsonAsync<GetQueueAttributesRequest>(JsonOptions, cancellationToken).ConfigureAwait(false);
            var result = await client.GetQueueAttributesAsync(requestObject, cancellationToken).ConfigureAwait(false);

            var response = new HttpResponseMessage(HttpStatusCode.OK)
            {
                Content = JsonContent.Create(result, options: JsonOptions)
            };
            response.Content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/x-amz-json-1.0");
            return response;
        }
        catch (OperationCanceledException)
        {
            throw;
        }
        catch (AmazonServiceException ex)
        {
            return CreateErrorResponse(ex);
        }
    }

    private static async Task<HttpResponseMessage> HandleGetQueueUrlAsync(
        HttpRequestMessage request,
        IAmazonSQS client,
        CancellationToken cancellationToken)
    {
        try
        {
            var requestObject = await request.Content!.ReadFromJsonAsync<GetQueueUrlRequest>(JsonOptions, cancellationToken).ConfigureAwait(false);
            var result = await client.GetQueueUrlAsync(requestObject, cancellationToken).ConfigureAwait(false);

            var response = new HttpResponseMessage(HttpStatusCode.OK)
            {
                Content = JsonContent.Create(result, options: JsonOptions)
            };
            response.Content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/x-amz-json-1.0");
            return response;
        }
        catch (OperationCanceledException)
        {
            throw;
        }
        catch (AmazonServiceException ex)
        {
            return CreateErrorResponse(ex);
        }
    }

    private static async Task<HttpResponseMessage> HandleListDeadLetterSourceQueuesAsync(
        HttpRequestMessage request,
        IAmazonSQS client,
        CancellationToken cancellationToken)
    {
        try
        {
            var requestObject = await request.Content!.ReadFromJsonAsync<ListDeadLetterSourceQueuesRequest>(JsonOptions, cancellationToken).ConfigureAwait(false);
            var result = await client.ListDeadLetterSourceQueuesAsync(requestObject, cancellationToken).ConfigureAwait(false);

            var response = new HttpResponseMessage(HttpStatusCode.OK)
            {
                Content = JsonContent.Create(result, options: JsonOptions)
            };
            response.Content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/x-amz-json-1.0");
            return response;
        }
        catch (OperationCanceledException)
        {
            throw;
        }
        catch (AmazonServiceException ex)
        {
            return CreateErrorResponse(ex);
        }
    }

    private static async Task<HttpResponseMessage> HandleListMessageMoveTasksAsync(
        HttpRequestMessage request,
        IAmazonSQS client,
        CancellationToken cancellationToken)
    {
        try
        {
            var requestObject = await request.Content!.ReadFromJsonAsync<ListMessageMoveTasksRequest>(JsonOptions, cancellationToken).ConfigureAwait(false);
            var result = await client.ListMessageMoveTasksAsync(requestObject, cancellationToken).ConfigureAwait(false);

            var response = new HttpResponseMessage(HttpStatusCode.OK)
            {
                Content = JsonContent.Create(result, options: JsonOptions)
            };
            response.Content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/x-amz-json-1.0");
            return response;
        }
        catch (OperationCanceledException)
        {
            throw;
        }
        catch (AmazonServiceException ex)
        {
            return CreateErrorResponse(ex);
        }
    }

    private static async Task<HttpResponseMessage> HandleListQueueTagsAsync(
        HttpRequestMessage request,
        IAmazonSQS client,
        CancellationToken cancellationToken)
    {
        try
        {
            var requestObject = await request.Content!.ReadFromJsonAsync<ListQueueTagsRequest>(JsonOptions, cancellationToken).ConfigureAwait(false);
            var result = await client.ListQueueTagsAsync(requestObject, cancellationToken).ConfigureAwait(false);

            var response = new HttpResponseMessage(HttpStatusCode.OK)
            {
                Content = JsonContent.Create(result, options: JsonOptions)
            };
            response.Content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/x-amz-json-1.0");
            return response;
        }
        catch (OperationCanceledException)
        {
            throw;
        }
        catch (AmazonServiceException ex)
        {
            return CreateErrorResponse(ex);
        }
    }

    private static async Task<HttpResponseMessage> HandleListQueuesAsync(
        HttpRequestMessage request,
        IAmazonSQS client,
        CancellationToken cancellationToken)
    {
        try
        {
            var requestObject = await request.Content!.ReadFromJsonAsync<ListQueuesRequest>(JsonOptions, cancellationToken).ConfigureAwait(false);
            var result = await client.ListQueuesAsync(requestObject, cancellationToken).ConfigureAwait(false);

            var response = new HttpResponseMessage(HttpStatusCode.OK)
            {
                Content = JsonContent.Create(result, options: JsonOptions)
            };
            response.Content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/x-amz-json-1.0");
            return response;
        }
        catch (OperationCanceledException)
        {
            throw;
        }
        catch (AmazonServiceException ex)
        {
            return CreateErrorResponse(ex);
        }
    }

    private static async Task<HttpResponseMessage> HandlePurgeQueueAsync(
        HttpRequestMessage request,
        IAmazonSQS client,
        CancellationToken cancellationToken)
    {
        try
        {
            var requestObject = await request.Content!.ReadFromJsonAsync<PurgeQueueRequest>(JsonOptions, cancellationToken).ConfigureAwait(false);
            var result = await client.PurgeQueueAsync(requestObject, cancellationToken).ConfigureAwait(false);

            var response = new HttpResponseMessage(HttpStatusCode.OK)
            {
                Content = JsonContent.Create(result, options: JsonOptions)
            };
            response.Content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/x-amz-json-1.0");
            return response;
        }
        catch (OperationCanceledException)
        {
            throw;
        }
        catch (AmazonServiceException ex)
        {
            return CreateErrorResponse(ex);
        }
    }

    private static async Task<HttpResponseMessage> HandleReceiveMessageAsync(
        HttpRequestMessage request,
        IAmazonSQS client,
        CancellationToken cancellationToken)
    {
        try
        {
            var requestObject = await request.Content!.ReadFromJsonAsync<ReceiveMessageRequest>(JsonOptions, cancellationToken).ConfigureAwait(false);
            var result = await client.ReceiveMessageAsync(requestObject, cancellationToken).ConfigureAwait(false);

            var response = new HttpResponseMessage(HttpStatusCode.OK)
            {
                Content = JsonContent.Create(result, options: JsonOptions)
            };
            response.Content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/x-amz-json-1.0");
            return response;
        }
        catch (OperationCanceledException)
        {
            throw;
        }
        catch (AmazonServiceException ex)
        {
            return CreateErrorResponse(ex);
        }
    }

    private static async Task<HttpResponseMessage> HandleRemovePermissionAsync(
        HttpRequestMessage request,
        IAmazonSQS client,
        CancellationToken cancellationToken)
    {
        try
        {
            var requestObject = await request.Content!.ReadFromJsonAsync<RemovePermissionRequest>(JsonOptions, cancellationToken).ConfigureAwait(false);
            var result = await client.RemovePermissionAsync(requestObject, cancellationToken).ConfigureAwait(false);

            var response = new HttpResponseMessage(HttpStatusCode.OK)
            {
                Content = JsonContent.Create(result, options: JsonOptions)
            };
            response.Content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/x-amz-json-1.0");
            return response;
        }
        catch (OperationCanceledException)
        {
            throw;
        }
        catch (AmazonServiceException ex)
        {
            return CreateErrorResponse(ex);
        }
    }

    private static async Task<HttpResponseMessage> HandleSendMessageAsync(
        HttpRequestMessage request,
        IAmazonSQS client,
        CancellationToken cancellationToken)
    {
        try
        {
            var requestObject = await request.Content!.ReadFromJsonAsync<SendMessageRequest>(JsonOptions, cancellationToken).ConfigureAwait(false);
            var result = await client.SendMessageAsync(requestObject, cancellationToken).ConfigureAwait(false);

            var response = new HttpResponseMessage(HttpStatusCode.OK)
            {
                Content = JsonContent.Create(result, options: JsonOptions)
            };
            response.Content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/x-amz-json-1.0");
            return response;
        }
        catch (OperationCanceledException)
        {
            throw;
        }
        catch (AmazonServiceException ex)
        {
            return CreateErrorResponse(ex);
        }
    }

    private static async Task<HttpResponseMessage> HandleSendMessageBatchAsync(
        HttpRequestMessage request,
        IAmazonSQS client,
        CancellationToken cancellationToken)
    {
        try
        {
            var requestObject = await request.Content!.ReadFromJsonAsync<SendMessageBatchRequest>(JsonOptions, cancellationToken).ConfigureAwait(false);
            var result = await client.SendMessageBatchAsync(requestObject, cancellationToken).ConfigureAwait(false);

            var response = new HttpResponseMessage(HttpStatusCode.OK)
            {
                Content = JsonContent.Create(result, options: JsonOptions)
            };
            response.Content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/x-amz-json-1.0");
            return response;
        }
        catch (OperationCanceledException)
        {
            throw;
        }
        catch (AmazonServiceException ex)
        {
            return CreateErrorResponse(ex);
        }
    }

    private static async Task<HttpResponseMessage> HandleSetQueueAttributesAsync(
        HttpRequestMessage request,
        IAmazonSQS client,
        CancellationToken cancellationToken)
    {
        try
        {
            var requestObject = await request.Content!.ReadFromJsonAsync<SetQueueAttributesRequest>(JsonOptions, cancellationToken).ConfigureAwait(false);
            var result = await client.SetQueueAttributesAsync(requestObject, cancellationToken).ConfigureAwait(false);

            var response = new HttpResponseMessage(HttpStatusCode.OK)
            {
                Content = JsonContent.Create(result, options: JsonOptions)
            };
            response.Content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/x-amz-json-1.0");
            return response;
        }
        catch (OperationCanceledException)
        {
            throw;
        }
        catch (AmazonServiceException ex)
        {
            return CreateErrorResponse(ex);
        }
    }

    private static async Task<HttpResponseMessage> HandleStartMessageMoveTaskAsync(
        HttpRequestMessage request,
        IAmazonSQS client,
        CancellationToken cancellationToken)
    {
        try
        {
            var requestObject = await request.Content!.ReadFromJsonAsync<StartMessageMoveTaskRequest>(JsonOptions, cancellationToken).ConfigureAwait(false);
            var result = await client.StartMessageMoveTaskAsync(requestObject, cancellationToken).ConfigureAwait(false);

            var response = new HttpResponseMessage(HttpStatusCode.OK)
            {
                Content = JsonContent.Create(result, options: JsonOptions)
            };
            response.Content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/x-amz-json-1.0");
            return response;
        }
        catch (OperationCanceledException)
        {
            throw;
        }
        catch (AmazonServiceException ex)
        {
            return CreateErrorResponse(ex);
        }
    }

    private static async Task<HttpResponseMessage> HandleTagQueueAsync(
        HttpRequestMessage request,
        IAmazonSQS client,
        CancellationToken cancellationToken)
    {
        try
        {
            var requestObject = await request.Content!.ReadFromJsonAsync<TagQueueRequest>(JsonOptions, cancellationToken).ConfigureAwait(false);
            var result = await client.TagQueueAsync(requestObject, cancellationToken).ConfigureAwait(false);

            var response = new HttpResponseMessage(HttpStatusCode.OK)
            {
                Content = JsonContent.Create(result, options: JsonOptions)
            };
            response.Content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/x-amz-json-1.0");
            return response;
        }
        catch (OperationCanceledException)
        {
            throw;
        }
        catch (AmazonServiceException ex)
        {
            return CreateErrorResponse(ex);
        }
    }

    private static async Task<HttpResponseMessage> HandleUntagQueueAsync(
        HttpRequestMessage request,
        IAmazonSQS client,
        CancellationToken cancellationToken)
    {
        try
        {
            var requestObject = await request.Content!.ReadFromJsonAsync<UntagQueueRequest>(JsonOptions, cancellationToken).ConfigureAwait(false);
            var result = await client.UntagQueueAsync(requestObject, cancellationToken).ConfigureAwait(false);

            var response = new HttpResponseMessage(HttpStatusCode.OK)
            {
                Content = JsonContent.Create(result, options: JsonOptions)
            };
            response.Content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/x-amz-json-1.0");
            return response;
        }
        catch (OperationCanceledException)
        {
            throw;
        }
        catch (AmazonServiceException ex)
        {
            return CreateErrorResponse(ex);
        }
    }

    private static HttpResponseMessage CreateErrorResponse(Exception exception)
    {
        // Extract error code from AmazonServiceException if available
        string errorCode;
        string errorMessage;
        HttpStatusCode statusCode;

        if (exception is AmazonServiceException awsException)
        {
            errorCode = awsException.ErrorCode ?? exception.GetType().Name.Replace("Exception", "");
            errorMessage = awsException.Message;
            statusCode = awsException.StatusCode;
        }
        else
        {
            errorCode = exception.GetType().Name.Replace("Exception", "");
            errorMessage = exception.Message;
            statusCode = HttpStatusCode.InternalServerError;
        }

        // Format error code in AWS format: com.amazonaws.sqs#ErrorCode
        var errorType = $"com.amazonaws.sqs#{errorCode}";

        var errorJson = $$"""
        {
            "__type": "{{errorType}}",
            "message": "{{errorMessage.Replace("\"", "\\\"", StringComparison.Ordinal)}}"
        }
        """;

        return new HttpResponseMessage(statusCode)
        {
            Content = new StringContent(errorJson, Encoding.UTF8, "application/x-amz-json-1.0")
        };
    }
}
