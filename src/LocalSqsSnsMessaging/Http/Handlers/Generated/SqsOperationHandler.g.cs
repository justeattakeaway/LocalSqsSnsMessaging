// <auto-generated/>
// Generated JSON protocol handler for Sqs

using Amazon.SQS;
using Amazon.SQS.Model;

namespace LocalSqsSnsMessaging.Http.Handlers;

/// <summary>
/// Handles Sqs operations using JSON protocol with generated serializers.
/// </summary>
internal static partial class SqsOperationHandler
{
    public static async Task<(object Response, string OperationName)> HandleAsync(
        AwsRequestContext context,
        InMemoryAwsBus bus,
        CancellationToken cancellationToken)
    {
        ArgumentNullException.ThrowIfNull(context);
        ArgumentNullException.ThrowIfNull(bus);

        using IAmazonSQS client = bus.CreateSqsClient();

        return context.OperationName switch
        {
            "AddPermission" => await HandleAddPermissionAsync(context, client, cancellationToken),
            "CancelMessageMoveTask" => await HandleCancelMessageMoveTaskAsync(context, client, cancellationToken),
            "ChangeMessageVisibility" => await HandleChangeMessageVisibilityAsync(context, client, cancellationToken),
            "ChangeMessageVisibilityBatch" => await HandleChangeMessageVisibilityBatchAsync(context, client, cancellationToken),
            "CreateQueue" => await HandleCreateQueueAsync(context, client, cancellationToken),
            "DeleteMessage" => await HandleDeleteMessageAsync(context, client, cancellationToken),
            "DeleteMessageBatch" => await HandleDeleteMessageBatchAsync(context, client, cancellationToken),
            "DeleteQueue" => await HandleDeleteQueueAsync(context, client, cancellationToken),
            "GetQueueAttributes" => await HandleGetQueueAttributesAsync(context, client, cancellationToken),
            "GetQueueUrl" => await HandleGetQueueUrlAsync(context, client, cancellationToken),
            "ListDeadLetterSourceQueues" => await HandleListDeadLetterSourceQueuesAsync(context, client, cancellationToken),
            "ListMessageMoveTasks" => await HandleListMessageMoveTasksAsync(context, client, cancellationToken),
            "ListQueueTags" => await HandleListQueueTagsAsync(context, client, cancellationToken),
            "ListQueues" => await HandleListQueuesAsync(context, client, cancellationToken),
            "PurgeQueue" => await HandlePurgeQueueAsync(context, client, cancellationToken),
            "ReceiveMessage" => await HandleReceiveMessageAsync(context, client, cancellationToken),
            "RemovePermission" => await HandleRemovePermissionAsync(context, client, cancellationToken),
            "SendMessage" => await HandleSendMessageAsync(context, client, cancellationToken),
            "SendMessageBatch" => await HandleSendMessageBatchAsync(context, client, cancellationToken),
            "SetQueueAttributes" => await HandleSetQueueAttributesAsync(context, client, cancellationToken),
            "StartMessageMoveTask" => await HandleStartMessageMoveTaskAsync(context, client, cancellationToken),
            "TagQueue" => await HandleTagQueueAsync(context, client, cancellationToken),
            "UntagQueue" => await HandleUntagQueueAsync(context, client, cancellationToken),
            _ => throw new NotSupportedException($"Sqs operation '{context.OperationName}' is not supported.")
        };
    }

    private static async Task<(object, string)> HandleAddPermissionAsync(
        AwsRequestContext context,
        IAmazonSQS client,
        CancellationToken cancellationToken)
    {
        var request = Serialization.AwsJsonRequestDeserializer.Deserialize<AddPermissionRequest>(context.RequestBody);
        var response = await client.AddPermissionAsync(request, cancellationToken).ConfigureAwait(false);
        return (response, "AddPermission");
    }

    private static async Task<(object, string)> HandleCancelMessageMoveTaskAsync(
        AwsRequestContext context,
        IAmazonSQS client,
        CancellationToken cancellationToken)
    {
        var request = Serialization.AwsJsonRequestDeserializer.Deserialize<CancelMessageMoveTaskRequest>(context.RequestBody);
        var response = await client.CancelMessageMoveTaskAsync(request, cancellationToken).ConfigureAwait(false);
        return (response, "CancelMessageMoveTask");
    }

    private static async Task<(object, string)> HandleChangeMessageVisibilityAsync(
        AwsRequestContext context,
        IAmazonSQS client,
        CancellationToken cancellationToken)
    {
        var request = Serialization.AwsJsonRequestDeserializer.Deserialize<ChangeMessageVisibilityRequest>(context.RequestBody);
        var response = await client.ChangeMessageVisibilityAsync(request, cancellationToken).ConfigureAwait(false);
        return (response, "ChangeMessageVisibility");
    }

    private static async Task<(object, string)> HandleChangeMessageVisibilityBatchAsync(
        AwsRequestContext context,
        IAmazonSQS client,
        CancellationToken cancellationToken)
    {
        var request = Serialization.AwsJsonRequestDeserializer.Deserialize<ChangeMessageVisibilityBatchRequest>(context.RequestBody);
        var response = await client.ChangeMessageVisibilityBatchAsync(request, cancellationToken).ConfigureAwait(false);
        return (response, "ChangeMessageVisibilityBatch");
    }

    private static async Task<(object, string)> HandleCreateQueueAsync(
        AwsRequestContext context,
        IAmazonSQS client,
        CancellationToken cancellationToken)
    {
        var request = Serialization.AwsJsonRequestDeserializer.Deserialize<CreateQueueRequest>(context.RequestBody);
        var response = await client.CreateQueueAsync(request, cancellationToken).ConfigureAwait(false);
        return (response, "CreateQueue");
    }

    private static async Task<(object, string)> HandleDeleteMessageAsync(
        AwsRequestContext context,
        IAmazonSQS client,
        CancellationToken cancellationToken)
    {
        var request = Serialization.AwsJsonRequestDeserializer.Deserialize<DeleteMessageRequest>(context.RequestBody);
        var response = await client.DeleteMessageAsync(request, cancellationToken).ConfigureAwait(false);
        return (response, "DeleteMessage");
    }

    private static async Task<(object, string)> HandleDeleteMessageBatchAsync(
        AwsRequestContext context,
        IAmazonSQS client,
        CancellationToken cancellationToken)
    {
        var request = Serialization.AwsJsonRequestDeserializer.Deserialize<DeleteMessageBatchRequest>(context.RequestBody);
        var response = await client.DeleteMessageBatchAsync(request, cancellationToken).ConfigureAwait(false);
        return (response, "DeleteMessageBatch");
    }

    private static async Task<(object, string)> HandleDeleteQueueAsync(
        AwsRequestContext context,
        IAmazonSQS client,
        CancellationToken cancellationToken)
    {
        var request = Serialization.AwsJsonRequestDeserializer.Deserialize<DeleteQueueRequest>(context.RequestBody);
        var response = await client.DeleteQueueAsync(request, cancellationToken).ConfigureAwait(false);
        return (response, "DeleteQueue");
    }

    private static async Task<(object, string)> HandleGetQueueAttributesAsync(
        AwsRequestContext context,
        IAmazonSQS client,
        CancellationToken cancellationToken)
    {
        var request = Serialization.AwsJsonRequestDeserializer.Deserialize<GetQueueAttributesRequest>(context.RequestBody);
        var response = await client.GetQueueAttributesAsync(request, cancellationToken).ConfigureAwait(false);
        return (response, "GetQueueAttributes");
    }

    private static async Task<(object, string)> HandleGetQueueUrlAsync(
        AwsRequestContext context,
        IAmazonSQS client,
        CancellationToken cancellationToken)
    {
        var request = Serialization.AwsJsonRequestDeserializer.Deserialize<GetQueueUrlRequest>(context.RequestBody);
        var response = await client.GetQueueUrlAsync(request, cancellationToken).ConfigureAwait(false);
        return (response, "GetQueueUrl");
    }

    private static async Task<(object, string)> HandleListDeadLetterSourceQueuesAsync(
        AwsRequestContext context,
        IAmazonSQS client,
        CancellationToken cancellationToken)
    {
        var request = Serialization.AwsJsonRequestDeserializer.Deserialize<ListDeadLetterSourceQueuesRequest>(context.RequestBody);
        var response = await client.ListDeadLetterSourceQueuesAsync(request, cancellationToken).ConfigureAwait(false);
        return (response, "ListDeadLetterSourceQueues");
    }

    private static async Task<(object, string)> HandleListMessageMoveTasksAsync(
        AwsRequestContext context,
        IAmazonSQS client,
        CancellationToken cancellationToken)
    {
        var request = Serialization.AwsJsonRequestDeserializer.Deserialize<ListMessageMoveTasksRequest>(context.RequestBody);
        var response = await client.ListMessageMoveTasksAsync(request, cancellationToken).ConfigureAwait(false);
        return (response, "ListMessageMoveTasks");
    }

    private static async Task<(object, string)> HandleListQueueTagsAsync(
        AwsRequestContext context,
        IAmazonSQS client,
        CancellationToken cancellationToken)
    {
        var request = Serialization.AwsJsonRequestDeserializer.Deserialize<ListQueueTagsRequest>(context.RequestBody);
        var response = await client.ListQueueTagsAsync(request, cancellationToken).ConfigureAwait(false);
        return (response, "ListQueueTags");
    }

    private static async Task<(object, string)> HandleListQueuesAsync(
        AwsRequestContext context,
        IAmazonSQS client,
        CancellationToken cancellationToken)
    {
        var request = Serialization.AwsJsonRequestDeserializer.Deserialize<ListQueuesRequest>(context.RequestBody);
        var response = await client.ListQueuesAsync(request, cancellationToken).ConfigureAwait(false);
        return (response, "ListQueues");
    }

    private static async Task<(object, string)> HandlePurgeQueueAsync(
        AwsRequestContext context,
        IAmazonSQS client,
        CancellationToken cancellationToken)
    {
        var request = Serialization.AwsJsonRequestDeserializer.Deserialize<PurgeQueueRequest>(context.RequestBody);
        var response = await client.PurgeQueueAsync(request, cancellationToken).ConfigureAwait(false);
        return (response, "PurgeQueue");
    }

    private static async Task<(object, string)> HandleReceiveMessageAsync(
        AwsRequestContext context,
        IAmazonSQS client,
        CancellationToken cancellationToken)
    {
        var request = Serialization.AwsJsonRequestDeserializer.Deserialize<ReceiveMessageRequest>(context.RequestBody);
        var response = await client.ReceiveMessageAsync(request, cancellationToken).ConfigureAwait(false);
        return (response, "ReceiveMessage");
    }

    private static async Task<(object, string)> HandleRemovePermissionAsync(
        AwsRequestContext context,
        IAmazonSQS client,
        CancellationToken cancellationToken)
    {
        var request = Serialization.AwsJsonRequestDeserializer.Deserialize<RemovePermissionRequest>(context.RequestBody);
        var response = await client.RemovePermissionAsync(request, cancellationToken).ConfigureAwait(false);
        return (response, "RemovePermission");
    }

    private static async Task<(object, string)> HandleSendMessageAsync(
        AwsRequestContext context,
        IAmazonSQS client,
        CancellationToken cancellationToken)
    {
        var request = Serialization.AwsJsonRequestDeserializer.Deserialize<SendMessageRequest>(context.RequestBody);
        var response = await client.SendMessageAsync(request, cancellationToken).ConfigureAwait(false);
        return (response, "SendMessage");
    }

    private static async Task<(object, string)> HandleSendMessageBatchAsync(
        AwsRequestContext context,
        IAmazonSQS client,
        CancellationToken cancellationToken)
    {
        var request = Serialization.AwsJsonRequestDeserializer.Deserialize<SendMessageBatchRequest>(context.RequestBody);
        var response = await client.SendMessageBatchAsync(request, cancellationToken).ConfigureAwait(false);
        return (response, "SendMessageBatch");
    }

    private static async Task<(object, string)> HandleSetQueueAttributesAsync(
        AwsRequestContext context,
        IAmazonSQS client,
        CancellationToken cancellationToken)
    {
        var request = Serialization.AwsJsonRequestDeserializer.Deserialize<SetQueueAttributesRequest>(context.RequestBody);
        var response = await client.SetQueueAttributesAsync(request, cancellationToken).ConfigureAwait(false);
        return (response, "SetQueueAttributes");
    }

    private static async Task<(object, string)> HandleStartMessageMoveTaskAsync(
        AwsRequestContext context,
        IAmazonSQS client,
        CancellationToken cancellationToken)
    {
        var request = Serialization.AwsJsonRequestDeserializer.Deserialize<StartMessageMoveTaskRequest>(context.RequestBody);
        var response = await client.StartMessageMoveTaskAsync(request, cancellationToken).ConfigureAwait(false);
        return (response, "StartMessageMoveTask");
    }

    private static async Task<(object, string)> HandleTagQueueAsync(
        AwsRequestContext context,
        IAmazonSQS client,
        CancellationToken cancellationToken)
    {
        var request = Serialization.AwsJsonRequestDeserializer.Deserialize<TagQueueRequest>(context.RequestBody);
        var response = await client.TagQueueAsync(request, cancellationToken).ConfigureAwait(false);
        return (response, "TagQueue");
    }

    private static async Task<(object, string)> HandleUntagQueueAsync(
        AwsRequestContext context,
        IAmazonSQS client,
        CancellationToken cancellationToken)
    {
        var request = Serialization.AwsJsonRequestDeserializer.Deserialize<UntagQueueRequest>(context.RequestBody);
        var response = await client.UntagQueueAsync(request, cancellationToken).ConfigureAwait(false);
        return (response, "UntagQueue");
    }

}
