// <auto-generated/>
// Generated JSON protocol serializers for Sqs
#nullable enable
#pragma warning disable CS0618 // Type or member is obsolete

using System.Text.Json;
using Amazon.SQS.Model;

namespace LocalSqsSnsMessaging.Http.Handlers;

/// <summary>
/// Generated JSON protocol serializers for Sqs operations.
/// </summary>
internal static class SqsJsonSerializers
{
    internal static AddPermissionRequest DeserializeAddPermissionRequest(Stream stream)
    {
        using var doc = JsonDocument.Parse(stream);
        var root = doc.RootElement;
        var request = new AddPermissionRequest();

        // QueueUrl
        if (root.TryGetProperty("queueUrl", out var queueUrlElem))
            request.QueueUrl = queueUrlElem.GetString();

        // Label
        if (root.TryGetProperty("label", out var labelElem))
            request.Label = labelElem.GetString();

        // AWSAccountIds
        if (root.TryGetProperty("aWSAccountIds", out var aWSAccountIdsElem) && aWSAccountIdsElem.ValueKind == JsonValueKind.Array)
        {
            request.AWSAccountIds = new List<string>();
            foreach (var item in aWSAccountIdsElem.EnumerateArray())
            {
                request.AWSAccountIds.Add(item.GetString()!);
            }
        }

        // Actions
        if (root.TryGetProperty("actions", out var actionsElem) && actionsElem.ValueKind == JsonValueKind.Array)
        {
            request.Actions = new List<string>();
            foreach (var item in actionsElem.EnumerateArray())
            {
                request.Actions.Add(item.GetString()!);
            }
        }

        return request;
    }

    internal static void SerializeAddPermissionResponse(AddPermissionResponse response, Stream stream)
    {
        using var writer = new Utf8JsonWriter(stream, new JsonWriterOptions { SkipValidation = true });
        writer.WriteStartObject();
        writer.WriteEndObject();
        writer.Flush();
    }

    internal static CancelMessageMoveTaskRequest DeserializeCancelMessageMoveTaskRequest(Stream stream)
    {
        using var doc = JsonDocument.Parse(stream);
        var root = doc.RootElement;
        var request = new CancelMessageMoveTaskRequest();

        // TaskHandle
        if (root.TryGetProperty("taskHandle", out var taskHandleElem))
            request.TaskHandle = taskHandleElem.GetString();

        return request;
    }

    internal static void SerializeCancelMessageMoveTaskResponse(CancelMessageMoveTaskResponse response, Stream stream)
    {
        using var writer = new Utf8JsonWriter(stream, new JsonWriterOptions { SkipValidation = true });
        writer.WriteStartObject();

        // ApproximateNumberOfMessagesMoved
        if (response.ApproximateNumberOfMessagesMoved.HasValue)
            writer.WriteNumber("approximateNumberOfMessagesMoved", response.ApproximateNumberOfMessagesMoved.Value);

        writer.WriteEndObject();
        writer.Flush();
    }

    internal static ChangeMessageVisibilityRequest DeserializeChangeMessageVisibilityRequest(Stream stream)
    {
        using var doc = JsonDocument.Parse(stream);
        var root = doc.RootElement;
        var request = new ChangeMessageVisibilityRequest();

        // QueueUrl
        if (root.TryGetProperty("queueUrl", out var queueUrlElem))
            request.QueueUrl = queueUrlElem.GetString();

        // ReceiptHandle
        if (root.TryGetProperty("receiptHandle", out var receiptHandleElem))
            request.ReceiptHandle = receiptHandleElem.GetString();

        // VisibilityTimeout
        if (root.TryGetProperty("visibilityTimeout", out var visibilityTimeoutElem) && visibilityTimeoutElem.TryGetInt32(out var visibilityTimeoutVal))
            request.VisibilityTimeout = visibilityTimeoutVal;

        return request;
    }

    internal static void SerializeChangeMessageVisibilityResponse(ChangeMessageVisibilityResponse response, Stream stream)
    {
        using var writer = new Utf8JsonWriter(stream, new JsonWriterOptions { SkipValidation = true });
        writer.WriteStartObject();
        writer.WriteEndObject();
        writer.Flush();
    }

    internal static ChangeMessageVisibilityBatchRequest DeserializeChangeMessageVisibilityBatchRequest(Stream stream)
    {
        using var doc = JsonDocument.Parse(stream);
        var root = doc.RootElement;
        var request = new ChangeMessageVisibilityBatchRequest();

        // QueueUrl
        if (root.TryGetProperty("queueUrl", out var queueUrlElem))
            request.QueueUrl = queueUrlElem.GetString();

        // Entries
        if (root.TryGetProperty("entries", out var entriesElem) && entriesElem.ValueKind == JsonValueKind.Array)
        {
            request.Entries = new List<ChangeMessageVisibilityBatchRequestEntry>();
            foreach (var item in entriesElem.EnumerateArray())
            {
                // TODO: Deserialize ChangeMessageVisibilityBatchRequestEntry structure
            }
        }

        return request;
    }

    internal static void SerializeChangeMessageVisibilityBatchResponse(ChangeMessageVisibilityBatchResponse response, Stream stream)
    {
        using var writer = new Utf8JsonWriter(stream, new JsonWriterOptions { SkipValidation = true });
        writer.WriteStartObject();

        // Successful
        if (response.Successful != null && response.Successful.Count > 0)
        {
            writer.WritePropertyName("successful");
            writer.WriteStartArray();
            foreach (var item in response.Successful)
            {
                writer.WriteStartObject();
                if (item.Id != null)
                    writer.WriteString("id", item.Id);
                writer.WriteEndObject();
            }
            writer.WriteEndArray();
        }

        // Failed
        if (response.Failed != null && response.Failed.Count > 0)
        {
            writer.WritePropertyName("failed");
            writer.WriteStartArray();
            foreach (var item in response.Failed)
            {
                writer.WriteStartObject();
                if (item.Id != null)
                    writer.WriteString("id", item.Id);
                if (item.SenderFault.HasValue)
                    writer.WriteBoolean("senderFault", item.SenderFault.Value);
                if (item.Code != null)
                    writer.WriteString("code", item.Code);
                if (item.Message != null)
                    writer.WriteString("message", item.Message);
                writer.WriteEndObject();
            }
            writer.WriteEndArray();
        }

        writer.WriteEndObject();
        writer.Flush();
    }

    internal static CreateQueueRequest DeserializeCreateQueueRequest(Stream stream)
    {
        using var doc = JsonDocument.Parse(stream);
        var root = doc.RootElement;
        var request = new CreateQueueRequest();

        // QueueName
        if (root.TryGetProperty("queueName", out var queueNameElem))
            request.QueueName = queueNameElem.GetString();

        // Attributes
        if (root.TryGetProperty("attributes", out var attributesElem) && attributesElem.ValueKind == JsonValueKind.Object)
        {
            request.Attributes = new Dictionary<string, string>();
            foreach (var prop in attributesElem.EnumerateObject())
            {
                request.Attributes[prop.Name] = prop.Value.GetString()!;
            }
        }

        // tags
        if (root.TryGetProperty("tags", out var tagsElem) && tagsElem.ValueKind == JsonValueKind.Object)
        {
            request.Tags = new Dictionary<string, string>();
            foreach (var prop in tagsElem.EnumerateObject())
            {
                request.Tags[prop.Name] = prop.Value.GetString()!;
            }
        }

        return request;
    }

    internal static void SerializeCreateQueueResponse(CreateQueueResponse response, Stream stream)
    {
        using var writer = new Utf8JsonWriter(stream, new JsonWriterOptions { SkipValidation = true });
        writer.WriteStartObject();

        // QueueUrl
        if (response.QueueUrl != null)
            writer.WriteString("queueUrl", response.QueueUrl);

        writer.WriteEndObject();
        writer.Flush();
    }

    internal static DeleteMessageRequest DeserializeDeleteMessageRequest(Stream stream)
    {
        using var doc = JsonDocument.Parse(stream);
        var root = doc.RootElement;
        var request = new DeleteMessageRequest();

        // QueueUrl
        if (root.TryGetProperty("queueUrl", out var queueUrlElem))
            request.QueueUrl = queueUrlElem.GetString();

        // ReceiptHandle
        if (root.TryGetProperty("receiptHandle", out var receiptHandleElem))
            request.ReceiptHandle = receiptHandleElem.GetString();

        return request;
    }

    internal static void SerializeDeleteMessageResponse(DeleteMessageResponse response, Stream stream)
    {
        using var writer = new Utf8JsonWriter(stream, new JsonWriterOptions { SkipValidation = true });
        writer.WriteStartObject();
        writer.WriteEndObject();
        writer.Flush();
    }

    internal static DeleteMessageBatchRequest DeserializeDeleteMessageBatchRequest(Stream stream)
    {
        using var doc = JsonDocument.Parse(stream);
        var root = doc.RootElement;
        var request = new DeleteMessageBatchRequest();

        // QueueUrl
        if (root.TryGetProperty("queueUrl", out var queueUrlElem))
            request.QueueUrl = queueUrlElem.GetString();

        // Entries
        if (root.TryGetProperty("entries", out var entriesElem) && entriesElem.ValueKind == JsonValueKind.Array)
        {
            request.Entries = new List<DeleteMessageBatchRequestEntry>();
            foreach (var item in entriesElem.EnumerateArray())
            {
                // TODO: Deserialize DeleteMessageBatchRequestEntry structure
            }
        }

        return request;
    }

    internal static void SerializeDeleteMessageBatchResponse(DeleteMessageBatchResponse response, Stream stream)
    {
        using var writer = new Utf8JsonWriter(stream, new JsonWriterOptions { SkipValidation = true });
        writer.WriteStartObject();

        // Successful
        if (response.Successful != null && response.Successful.Count > 0)
        {
            writer.WritePropertyName("successful");
            writer.WriteStartArray();
            foreach (var item in response.Successful)
            {
                writer.WriteStartObject();
                if (item.Id != null)
                    writer.WriteString("id", item.Id);
                writer.WriteEndObject();
            }
            writer.WriteEndArray();
        }

        // Failed
        if (response.Failed != null && response.Failed.Count > 0)
        {
            writer.WritePropertyName("failed");
            writer.WriteStartArray();
            foreach (var item in response.Failed)
            {
                writer.WriteStartObject();
                if (item.Id != null)
                    writer.WriteString("id", item.Id);
                if (item.SenderFault.HasValue)
                    writer.WriteBoolean("senderFault", item.SenderFault.Value);
                if (item.Code != null)
                    writer.WriteString("code", item.Code);
                if (item.Message != null)
                    writer.WriteString("message", item.Message);
                writer.WriteEndObject();
            }
            writer.WriteEndArray();
        }

        writer.WriteEndObject();
        writer.Flush();
    }

    internal static DeleteQueueRequest DeserializeDeleteQueueRequest(Stream stream)
    {
        using var doc = JsonDocument.Parse(stream);
        var root = doc.RootElement;
        var request = new DeleteQueueRequest();

        // QueueUrl
        if (root.TryGetProperty("queueUrl", out var queueUrlElem))
            request.QueueUrl = queueUrlElem.GetString();

        return request;
    }

    internal static void SerializeDeleteQueueResponse(DeleteQueueResponse response, Stream stream)
    {
        using var writer = new Utf8JsonWriter(stream, new JsonWriterOptions { SkipValidation = true });
        writer.WriteStartObject();
        writer.WriteEndObject();
        writer.Flush();
    }

    internal static GetQueueAttributesRequest DeserializeGetQueueAttributesRequest(Stream stream)
    {
        using var doc = JsonDocument.Parse(stream);
        var root = doc.RootElement;
        var request = new GetQueueAttributesRequest();

        // QueueUrl
        if (root.TryGetProperty("queueUrl", out var queueUrlElem))
            request.QueueUrl = queueUrlElem.GetString();

        // AttributeNames
        if (root.TryGetProperty("attributeNames", out var attributeNamesElem) && attributeNamesElem.ValueKind == JsonValueKind.Array)
        {
            request.AttributeNames = new List<string>();
            foreach (var item in attributeNamesElem.EnumerateArray())
            {
                request.AttributeNames.Add(item.GetString()!);
            }
        }

        return request;
    }

    internal static void SerializeGetQueueAttributesResponse(GetQueueAttributesResponse response, Stream stream)
    {
        using var writer = new Utf8JsonWriter(stream, new JsonWriterOptions { SkipValidation = true });
        writer.WriteStartObject();

        // Attributes
        if (response.Attributes != null && response.Attributes.Count > 0)
        {
            writer.WritePropertyName("attributes");
            writer.WriteStartObject();
            foreach (var kvp in response.Attributes)
            {
                writer.WriteString(kvp.Key, kvp.Value);
            }
            writer.WriteEndObject();
        }

        writer.WriteEndObject();
        writer.Flush();
    }

    internal static GetQueueUrlRequest DeserializeGetQueueUrlRequest(Stream stream)
    {
        using var doc = JsonDocument.Parse(stream);
        var root = doc.RootElement;
        var request = new GetQueueUrlRequest();

        // QueueName
        if (root.TryGetProperty("queueName", out var queueNameElem))
            request.QueueName = queueNameElem.GetString();

        // QueueOwnerAWSAccountId
        if (root.TryGetProperty("queueOwnerAWSAccountId", out var queueOwnerAWSAccountIdElem))
            request.QueueOwnerAWSAccountId = queueOwnerAWSAccountIdElem.GetString();

        return request;
    }

    internal static void SerializeGetQueueUrlResponse(GetQueueUrlResponse response, Stream stream)
    {
        using var writer = new Utf8JsonWriter(stream, new JsonWriterOptions { SkipValidation = true });
        writer.WriteStartObject();

        // QueueUrl
        if (response.QueueUrl != null)
            writer.WriteString("queueUrl", response.QueueUrl);

        writer.WriteEndObject();
        writer.Flush();
    }

    internal static ListDeadLetterSourceQueuesRequest DeserializeListDeadLetterSourceQueuesRequest(Stream stream)
    {
        using var doc = JsonDocument.Parse(stream);
        var root = doc.RootElement;
        var request = new ListDeadLetterSourceQueuesRequest();

        // QueueUrl
        if (root.TryGetProperty("queueUrl", out var queueUrlElem))
            request.QueueUrl = queueUrlElem.GetString();

        // NextToken
        if (root.TryGetProperty("nextToken", out var nextTokenElem))
            request.NextToken = nextTokenElem.GetString();

        // MaxResults
        if (root.TryGetProperty("maxResults", out var maxResultsElem) && maxResultsElem.TryGetInt32(out var maxResultsVal))
            request.MaxResults = maxResultsVal;

        return request;
    }

    internal static void SerializeListDeadLetterSourceQueuesResponse(ListDeadLetterSourceQueuesResponse response, Stream stream)
    {
        using var writer = new Utf8JsonWriter(stream, new JsonWriterOptions { SkipValidation = true });
        writer.WriteStartObject();

        // queueUrls
        if (response.QueueUrls != null && response.QueueUrls.Count > 0)
        {
            writer.WritePropertyName("queueUrls");
            writer.WriteStartArray();
            foreach (var item in response.QueueUrls)
            {
                writer.WriteStringValue(item);
            }
            writer.WriteEndArray();
        }

        // NextToken
        if (response.NextToken != null)
            writer.WriteString("nextToken", response.NextToken);

        writer.WriteEndObject();
        writer.Flush();
    }

    internal static ListMessageMoveTasksRequest DeserializeListMessageMoveTasksRequest(Stream stream)
    {
        using var doc = JsonDocument.Parse(stream);
        var root = doc.RootElement;
        var request = new ListMessageMoveTasksRequest();

        // SourceArn
        if (root.TryGetProperty("sourceArn", out var sourceArnElem))
            request.SourceArn = sourceArnElem.GetString();

        // MaxResults
        if (root.TryGetProperty("maxResults", out var maxResultsElem) && maxResultsElem.TryGetInt32(out var maxResultsVal))
            request.MaxResults = maxResultsVal;

        return request;
    }

    internal static void SerializeListMessageMoveTasksResponse(ListMessageMoveTasksResponse response, Stream stream)
    {
        using var writer = new Utf8JsonWriter(stream, new JsonWriterOptions { SkipValidation = true });
        writer.WriteStartObject();

        // Results
        if (response.Results != null && response.Results.Count > 0)
        {
            writer.WritePropertyName("results");
            writer.WriteStartArray();
            foreach (var item in response.Results)
            {
                writer.WriteStartObject();
                if (item.TaskHandle != null)
                    writer.WriteString("taskHandle", item.TaskHandle);
                if (item.Status != null)
                    writer.WriteString("status", item.Status);
                if (item.SourceArn != null)
                    writer.WriteString("sourceArn", item.SourceArn);
                if (item.DestinationArn != null)
                    writer.WriteString("destinationArn", item.DestinationArn);
                if (item.MaxNumberOfMessagesPerSecond.HasValue)
                    writer.WriteNumber("maxNumberOfMessagesPerSecond", item.MaxNumberOfMessagesPerSecond.Value);
                if (item.ApproximateNumberOfMessagesMoved.HasValue)
                    writer.WriteNumber("approximateNumberOfMessagesMoved", item.ApproximateNumberOfMessagesMoved.Value);
                if (item.ApproximateNumberOfMessagesToMove.HasValue)
                    writer.WriteNumber("approximateNumberOfMessagesToMove", item.ApproximateNumberOfMessagesToMove.Value);
                if (item.FailureReason != null)
                    writer.WriteString("failureReason", item.FailureReason);
                if (item.StartedTimestamp.HasValue)
                    writer.WriteNumber("startedTimestamp", item.StartedTimestamp.Value);
                writer.WriteEndObject();
            }
            writer.WriteEndArray();
        }

        writer.WriteEndObject();
        writer.Flush();
    }

    internal static ListQueueTagsRequest DeserializeListQueueTagsRequest(Stream stream)
    {
        using var doc = JsonDocument.Parse(stream);
        var root = doc.RootElement;
        var request = new ListQueueTagsRequest();

        // QueueUrl
        if (root.TryGetProperty("queueUrl", out var queueUrlElem))
            request.QueueUrl = queueUrlElem.GetString();

        return request;
    }

    internal static void SerializeListQueueTagsResponse(ListQueueTagsResponse response, Stream stream)
    {
        using var writer = new Utf8JsonWriter(stream, new JsonWriterOptions { SkipValidation = true });
        writer.WriteStartObject();

        // Tags
        if (response.Tags != null && response.Tags.Count > 0)
        {
            writer.WritePropertyName("tags");
            writer.WriteStartObject();
            foreach (var kvp in response.Tags)
            {
                writer.WriteString(kvp.Key, kvp.Value);
            }
            writer.WriteEndObject();
        }

        writer.WriteEndObject();
        writer.Flush();
    }

    internal static ListQueuesRequest DeserializeListQueuesRequest(Stream stream)
    {
        using var doc = JsonDocument.Parse(stream);
        var root = doc.RootElement;
        var request = new ListQueuesRequest();

        // QueueNamePrefix
        if (root.TryGetProperty("queueNamePrefix", out var queueNamePrefixElem))
            request.QueueNamePrefix = queueNamePrefixElem.GetString();

        // NextToken
        if (root.TryGetProperty("nextToken", out var nextTokenElem))
            request.NextToken = nextTokenElem.GetString();

        // MaxResults
        if (root.TryGetProperty("maxResults", out var maxResultsElem) && maxResultsElem.TryGetInt32(out var maxResultsVal))
            request.MaxResults = maxResultsVal;

        return request;
    }

    internal static void SerializeListQueuesResponse(ListQueuesResponse response, Stream stream)
    {
        using var writer = new Utf8JsonWriter(stream, new JsonWriterOptions { SkipValidation = true });
        writer.WriteStartObject();

        // QueueUrls
        if (response.QueueUrls != null && response.QueueUrls.Count > 0)
        {
            writer.WritePropertyName("queueUrls");
            writer.WriteStartArray();
            foreach (var item in response.QueueUrls)
            {
                writer.WriteStringValue(item);
            }
            writer.WriteEndArray();
        }

        // NextToken
        if (response.NextToken != null)
            writer.WriteString("nextToken", response.NextToken);

        writer.WriteEndObject();
        writer.Flush();
    }

    internal static PurgeQueueRequest DeserializePurgeQueueRequest(Stream stream)
    {
        using var doc = JsonDocument.Parse(stream);
        var root = doc.RootElement;
        var request = new PurgeQueueRequest();

        // QueueUrl
        if (root.TryGetProperty("queueUrl", out var queueUrlElem))
            request.QueueUrl = queueUrlElem.GetString();

        return request;
    }

    internal static void SerializePurgeQueueResponse(PurgeQueueResponse response, Stream stream)
    {
        using var writer = new Utf8JsonWriter(stream, new JsonWriterOptions { SkipValidation = true });
        writer.WriteStartObject();
        writer.WriteEndObject();
        writer.Flush();
    }

    internal static ReceiveMessageRequest DeserializeReceiveMessageRequest(Stream stream)
    {
        using var doc = JsonDocument.Parse(stream);
        var root = doc.RootElement;
        var request = new ReceiveMessageRequest();

        // QueueUrl
        if (root.TryGetProperty("queueUrl", out var queueUrlElem))
            request.QueueUrl = queueUrlElem.GetString();

        // AttributeNames
        if (root.TryGetProperty("attributeNames", out var attributeNamesElem) && attributeNamesElem.ValueKind == JsonValueKind.Array)
        {
            request.AttributeNames = new List<string>();
            foreach (var item in attributeNamesElem.EnumerateArray())
            {
                request.AttributeNames.Add(item.GetString()!);
            }
        }

        // MessageSystemAttributeNames
        if (root.TryGetProperty("messageSystemAttributeNames", out var messageSystemAttributeNamesElem) && messageSystemAttributeNamesElem.ValueKind == JsonValueKind.Array)
        {
            request.MessageSystemAttributeNames = new List<string>();
            foreach (var item in messageSystemAttributeNamesElem.EnumerateArray())
            {
                request.MessageSystemAttributeNames.Add(item.GetString()!);
            }
        }

        // MessageAttributeNames
        if (root.TryGetProperty("messageAttributeNames", out var messageAttributeNamesElem) && messageAttributeNamesElem.ValueKind == JsonValueKind.Array)
        {
            request.MessageAttributeNames = new List<string>();
            foreach (var item in messageAttributeNamesElem.EnumerateArray())
            {
                request.MessageAttributeNames.Add(item.GetString()!);
            }
        }

        // MaxNumberOfMessages
        if (root.TryGetProperty("maxNumberOfMessages", out var maxNumberOfMessagesElem) && maxNumberOfMessagesElem.TryGetInt32(out var maxNumberOfMessagesVal))
            request.MaxNumberOfMessages = maxNumberOfMessagesVal;

        // VisibilityTimeout
        if (root.TryGetProperty("visibilityTimeout", out var visibilityTimeoutElem) && visibilityTimeoutElem.TryGetInt32(out var visibilityTimeoutVal))
            request.VisibilityTimeout = visibilityTimeoutVal;

        // WaitTimeSeconds
        if (root.TryGetProperty("waitTimeSeconds", out var waitTimeSecondsElem) && waitTimeSecondsElem.TryGetInt32(out var waitTimeSecondsVal))
            request.WaitTimeSeconds = waitTimeSecondsVal;

        // ReceiveRequestAttemptId
        if (root.TryGetProperty("receiveRequestAttemptId", out var receiveRequestAttemptIdElem))
            request.ReceiveRequestAttemptId = receiveRequestAttemptIdElem.GetString();

        return request;
    }

    internal static void SerializeReceiveMessageResponse(ReceiveMessageResponse response, Stream stream)
    {
        using var writer = new Utf8JsonWriter(stream, new JsonWriterOptions { SkipValidation = true });
        writer.WriteStartObject();

        // Messages
        if (response.Messages != null && response.Messages.Count > 0)
        {
            writer.WritePropertyName("messages");
            writer.WriteStartArray();
            foreach (var item in response.Messages)
            {
                writer.WriteStartObject();
                if (item.MessageId != null)
                    writer.WriteString("messageId", item.MessageId);
                if (item.ReceiptHandle != null)
                    writer.WriteString("receiptHandle", item.ReceiptHandle);
                if (item.MD5OfBody != null)
                    writer.WriteString("mD5OfBody", item.MD5OfBody);
                if (item.Body != null)
                    writer.WriteString("body", item.Body);
                if (item.Attributes != null && item.Attributes.Count > 0)
                {
                    writer.WritePropertyName("attributes");
                    writer.WriteStartObject();
                    foreach (var kvp in item.Attributes)
                    {
                        writer.WriteString(kvp.Key, kvp.Value);
                    }
                    writer.WriteEndObject();
                }
                if (item.MD5OfMessageAttributes != null)
                    writer.WriteString("mD5OfMessageAttributes", item.MD5OfMessageAttributes);
                if (item.MessageAttributes != null && item.MessageAttributes.Count > 0)
                {
                    writer.WritePropertyName("messageAttributes");
                    writer.WriteStartObject();
                    foreach (var kvp in item.MessageAttributes)
                    {
                        writer.WritePropertyName(kvp.Key);
                        writer.WriteStartObject();
                        if (kvp.Value.StringValue != null)
                            writer.WriteString("stringValue", kvp.Value.StringValue);
                        if (kvp.Value.BinaryValue != null)
                            writer.WriteString("binaryValue", Convert.ToBase64String(kvp.Value.BinaryValue.ToArray()));
                        if (kvp.Value.StringListValues != null && kvp.Value.StringListValues.Count > 0)
                        {
                            writer.WritePropertyName("stringListValues");
                            writer.WriteStartArray();
                            foreach (var item0 in kvp.Value.StringListValues)
                            {
                                writer.WriteStringValue(item0);
                            }
                            writer.WriteEndArray();
                        }
                        if (kvp.Value.BinaryListValues != null && kvp.Value.BinaryListValues.Count > 0)
                        {
                            writer.WritePropertyName("binaryListValues");
                            writer.WriteStartArray();
                            foreach (var item1 in kvp.Value.BinaryListValues)
                            {
                                writer.WriteStringValue(Convert.ToBase64String(item1.ToArray()));
                            }
                            writer.WriteEndArray();
                        }
                        if (kvp.Value.DataType != null)
                            writer.WriteString("dataType", kvp.Value.DataType);
                        writer.WriteEndObject();
                    }
                    writer.WriteEndObject();
                }
                writer.WriteEndObject();
            }
            writer.WriteEndArray();
        }

        writer.WriteEndObject();
        writer.Flush();
    }

    internal static RemovePermissionRequest DeserializeRemovePermissionRequest(Stream stream)
    {
        using var doc = JsonDocument.Parse(stream);
        var root = doc.RootElement;
        var request = new RemovePermissionRequest();

        // QueueUrl
        if (root.TryGetProperty("queueUrl", out var queueUrlElem))
            request.QueueUrl = queueUrlElem.GetString();

        // Label
        if (root.TryGetProperty("label", out var labelElem))
            request.Label = labelElem.GetString();

        return request;
    }

    internal static void SerializeRemovePermissionResponse(RemovePermissionResponse response, Stream stream)
    {
        using var writer = new Utf8JsonWriter(stream, new JsonWriterOptions { SkipValidation = true });
        writer.WriteStartObject();
        writer.WriteEndObject();
        writer.Flush();
    }

    internal static SendMessageRequest DeserializeSendMessageRequest(Stream stream)
    {
        using var doc = JsonDocument.Parse(stream);
        var root = doc.RootElement;
        var request = new SendMessageRequest();

        // QueueUrl
        if (root.TryGetProperty("queueUrl", out var queueUrlElem))
            request.QueueUrl = queueUrlElem.GetString();

        // MessageBody
        if (root.TryGetProperty("messageBody", out var messageBodyElem))
            request.MessageBody = messageBodyElem.GetString();

        // DelaySeconds
        if (root.TryGetProperty("delaySeconds", out var delaySecondsElem) && delaySecondsElem.TryGetInt32(out var delaySecondsVal))
            request.DelaySeconds = delaySecondsVal;

        // MessageAttributes
        if (root.TryGetProperty("messageAttributes", out var messageAttributesElem) && messageAttributesElem.ValueKind == JsonValueKind.Object)
        {
            request.MessageAttributes = new Dictionary<string, MessageAttributeValue>();
            foreach (var prop in messageAttributesElem.EnumerateObject())
            {
                request.MessageAttributes[prop.Name] = new MessageAttributeValue();
                if (prop.Value.TryGetProperty("stringValue", out var stringValueElem))
                    request.MessageAttributes[prop.Name].StringValue = stringValueElem.GetString();
                if (prop.Value.TryGetProperty("binaryValue", out var binaryValueElem))
                {
                    var base64 = binaryValueElem.GetString();
                    if (base64 != null)
                        request.MessageAttributes[prop.Name].BinaryValue = new MemoryStream(Convert.FromBase64String(base64));
                }
                if (prop.Value.TryGetProperty("stringListValues", out var stringListValuesElem) && stringListValuesElem.ValueKind == JsonValueKind.Array)
                {
                    request.MessageAttributes[prop.Name].StringListValues = new List<string>();
                    foreach (var item in stringListValuesElem.EnumerateArray())
                    {
                        request.MessageAttributes[prop.Name].StringListValues.Add(item.GetString()!);
                    }
                }
                if (prop.Value.TryGetProperty("binaryListValues", out var binaryListValuesElem) && binaryListValuesElem.ValueKind == JsonValueKind.Array)
                {
                    request.MessageAttributes[prop.Name].BinaryListValues = new List<MemoryStream>();
                    foreach (var item in binaryListValuesElem.EnumerateArray())
                    {
                        // TODO: Deserialize blob
                    }
                }
                if (prop.Value.TryGetProperty("dataType", out var dataTypeElem))
                    request.MessageAttributes[prop.Name].DataType = dataTypeElem.GetString();
            }
        }

        // MessageSystemAttributes
        if (root.TryGetProperty("messageSystemAttributes", out var messageSystemAttributesElem) && messageSystemAttributesElem.ValueKind == JsonValueKind.Object)
        {
            request.MessageSystemAttributes = new Dictionary<string, MessageSystemAttributeValue>();
            foreach (var prop in messageSystemAttributesElem.EnumerateObject())
            {
                request.MessageSystemAttributes[prop.Name] = new MessageSystemAttributeValue();
                if (prop.Value.TryGetProperty("stringValue", out var stringValueElem))
                    request.MessageSystemAttributes[prop.Name].StringValue = stringValueElem.GetString();
                if (prop.Value.TryGetProperty("binaryValue", out var binaryValueElem))
                {
                    var base64 = binaryValueElem.GetString();
                    if (base64 != null)
                        request.MessageSystemAttributes[prop.Name].BinaryValue = new MemoryStream(Convert.FromBase64String(base64));
                }
                if (prop.Value.TryGetProperty("stringListValues", out var stringListValuesElem) && stringListValuesElem.ValueKind == JsonValueKind.Array)
                {
                    request.MessageSystemAttributes[prop.Name].StringListValues = new List<string>();
                    foreach (var item in stringListValuesElem.EnumerateArray())
                    {
                        request.MessageSystemAttributes[prop.Name].StringListValues.Add(item.GetString()!);
                    }
                }
                if (prop.Value.TryGetProperty("binaryListValues", out var binaryListValuesElem) && binaryListValuesElem.ValueKind == JsonValueKind.Array)
                {
                    request.MessageSystemAttributes[prop.Name].BinaryListValues = new List<MemoryStream>();
                    foreach (var item in binaryListValuesElem.EnumerateArray())
                    {
                        // TODO: Deserialize blob
                    }
                }
                if (prop.Value.TryGetProperty("dataType", out var dataTypeElem))
                    request.MessageSystemAttributes[prop.Name].DataType = dataTypeElem.GetString();
            }
        }

        // MessageDeduplicationId
        if (root.TryGetProperty("messageDeduplicationId", out var messageDeduplicationIdElem))
            request.MessageDeduplicationId = messageDeduplicationIdElem.GetString();

        // MessageGroupId
        if (root.TryGetProperty("messageGroupId", out var messageGroupIdElem))
            request.MessageGroupId = messageGroupIdElem.GetString();

        return request;
    }

    internal static void SerializeSendMessageResponse(SendMessageResponse response, Stream stream)
    {
        using var writer = new Utf8JsonWriter(stream, new JsonWriterOptions { SkipValidation = true });
        writer.WriteStartObject();

        // MD5OfMessageBody
        if (response.MD5OfMessageBody != null)
            writer.WriteString("mD5OfMessageBody", response.MD5OfMessageBody);

        // MD5OfMessageAttributes
        if (response.MD5OfMessageAttributes != null)
            writer.WriteString("mD5OfMessageAttributes", response.MD5OfMessageAttributes);

        // MD5OfMessageSystemAttributes
        if (response.MD5OfMessageSystemAttributes != null)
            writer.WriteString("mD5OfMessageSystemAttributes", response.MD5OfMessageSystemAttributes);

        // MessageId
        if (response.MessageId != null)
            writer.WriteString("messageId", response.MessageId);

        // SequenceNumber
        if (response.SequenceNumber != null)
            writer.WriteString("sequenceNumber", response.SequenceNumber);

        writer.WriteEndObject();
        writer.Flush();
    }

    internal static SendMessageBatchRequest DeserializeSendMessageBatchRequest(Stream stream)
    {
        using var doc = JsonDocument.Parse(stream);
        var root = doc.RootElement;
        var request = new SendMessageBatchRequest();

        // QueueUrl
        if (root.TryGetProperty("queueUrl", out var queueUrlElem))
            request.QueueUrl = queueUrlElem.GetString();

        // Entries
        if (root.TryGetProperty("entries", out var entriesElem) && entriesElem.ValueKind == JsonValueKind.Array)
        {
            request.Entries = new List<SendMessageBatchRequestEntry>();
            foreach (var item in entriesElem.EnumerateArray())
            {
                // TODO: Deserialize SendMessageBatchRequestEntry structure
            }
        }

        return request;
    }

    internal static void SerializeSendMessageBatchResponse(SendMessageBatchResponse response, Stream stream)
    {
        using var writer = new Utf8JsonWriter(stream, new JsonWriterOptions { SkipValidation = true });
        writer.WriteStartObject();

        // Successful
        if (response.Successful != null && response.Successful.Count > 0)
        {
            writer.WritePropertyName("successful");
            writer.WriteStartArray();
            foreach (var item in response.Successful)
            {
                writer.WriteStartObject();
                if (item.Id != null)
                    writer.WriteString("id", item.Id);
                if (item.MessageId != null)
                    writer.WriteString("messageId", item.MessageId);
                if (item.MD5OfMessageBody != null)
                    writer.WriteString("mD5OfMessageBody", item.MD5OfMessageBody);
                if (item.MD5OfMessageAttributes != null)
                    writer.WriteString("mD5OfMessageAttributes", item.MD5OfMessageAttributes);
                if (item.MD5OfMessageSystemAttributes != null)
                    writer.WriteString("mD5OfMessageSystemAttributes", item.MD5OfMessageSystemAttributes);
                if (item.SequenceNumber != null)
                    writer.WriteString("sequenceNumber", item.SequenceNumber);
                writer.WriteEndObject();
            }
            writer.WriteEndArray();
        }

        // Failed
        if (response.Failed != null && response.Failed.Count > 0)
        {
            writer.WritePropertyName("failed");
            writer.WriteStartArray();
            foreach (var item in response.Failed)
            {
                writer.WriteStartObject();
                if (item.Id != null)
                    writer.WriteString("id", item.Id);
                if (item.SenderFault.HasValue)
                    writer.WriteBoolean("senderFault", item.SenderFault.Value);
                if (item.Code != null)
                    writer.WriteString("code", item.Code);
                if (item.Message != null)
                    writer.WriteString("message", item.Message);
                writer.WriteEndObject();
            }
            writer.WriteEndArray();
        }

        writer.WriteEndObject();
        writer.Flush();
    }

    internal static SetQueueAttributesRequest DeserializeSetQueueAttributesRequest(Stream stream)
    {
        using var doc = JsonDocument.Parse(stream);
        var root = doc.RootElement;
        var request = new SetQueueAttributesRequest();

        // QueueUrl
        if (root.TryGetProperty("queueUrl", out var queueUrlElem))
            request.QueueUrl = queueUrlElem.GetString();

        // Attributes
        if (root.TryGetProperty("attributes", out var attributesElem) && attributesElem.ValueKind == JsonValueKind.Object)
        {
            request.Attributes = new Dictionary<string, string>();
            foreach (var prop in attributesElem.EnumerateObject())
            {
                request.Attributes[prop.Name] = prop.Value.GetString()!;
            }
        }

        return request;
    }

    internal static void SerializeSetQueueAttributesResponse(SetQueueAttributesResponse response, Stream stream)
    {
        using var writer = new Utf8JsonWriter(stream, new JsonWriterOptions { SkipValidation = true });
        writer.WriteStartObject();
        writer.WriteEndObject();
        writer.Flush();
    }

    internal static StartMessageMoveTaskRequest DeserializeStartMessageMoveTaskRequest(Stream stream)
    {
        using var doc = JsonDocument.Parse(stream);
        var root = doc.RootElement;
        var request = new StartMessageMoveTaskRequest();

        // SourceArn
        if (root.TryGetProperty("sourceArn", out var sourceArnElem))
            request.SourceArn = sourceArnElem.GetString();

        // DestinationArn
        if (root.TryGetProperty("destinationArn", out var destinationArnElem))
            request.DestinationArn = destinationArnElem.GetString();

        // MaxNumberOfMessagesPerSecond
        if (root.TryGetProperty("maxNumberOfMessagesPerSecond", out var maxNumberOfMessagesPerSecondElem) && maxNumberOfMessagesPerSecondElem.TryGetInt32(out var maxNumberOfMessagesPerSecondVal))
            request.MaxNumberOfMessagesPerSecond = maxNumberOfMessagesPerSecondVal;

        return request;
    }

    internal static void SerializeStartMessageMoveTaskResponse(StartMessageMoveTaskResponse response, Stream stream)
    {
        using var writer = new Utf8JsonWriter(stream, new JsonWriterOptions { SkipValidation = true });
        writer.WriteStartObject();

        // TaskHandle
        if (response.TaskHandle != null)
            writer.WriteString("taskHandle", response.TaskHandle);

        writer.WriteEndObject();
        writer.Flush();
    }

    internal static TagQueueRequest DeserializeTagQueueRequest(Stream stream)
    {
        using var doc = JsonDocument.Parse(stream);
        var root = doc.RootElement;
        var request = new TagQueueRequest();

        // QueueUrl
        if (root.TryGetProperty("queueUrl", out var queueUrlElem))
            request.QueueUrl = queueUrlElem.GetString();

        // Tags
        if (root.TryGetProperty("tags", out var tagsElem) && tagsElem.ValueKind == JsonValueKind.Object)
        {
            request.Tags = new Dictionary<string, string>();
            foreach (var prop in tagsElem.EnumerateObject())
            {
                request.Tags[prop.Name] = prop.Value.GetString()!;
            }
        }

        return request;
    }

    internal static void SerializeTagQueueResponse(TagQueueResponse response, Stream stream)
    {
        using var writer = new Utf8JsonWriter(stream, new JsonWriterOptions { SkipValidation = true });
        writer.WriteStartObject();
        writer.WriteEndObject();
        writer.Flush();
    }

    internal static UntagQueueRequest DeserializeUntagQueueRequest(Stream stream)
    {
        using var doc = JsonDocument.Parse(stream);
        var root = doc.RootElement;
        var request = new UntagQueueRequest();

        // QueueUrl
        if (root.TryGetProperty("queueUrl", out var queueUrlElem))
            request.QueueUrl = queueUrlElem.GetString();

        // TagKeys
        if (root.TryGetProperty("tagKeys", out var tagKeysElem) && tagKeysElem.ValueKind == JsonValueKind.Array)
        {
            request.TagKeys = new List<string>();
            foreach (var item in tagKeysElem.EnumerateArray())
            {
                request.TagKeys.Add(item.GetString()!);
            }
        }

        return request;
    }

    internal static void SerializeUntagQueueResponse(UntagQueueResponse response, Stream stream)
    {
        using var writer = new Utf8JsonWriter(stream, new JsonWriterOptions { SkipValidation = true });
        writer.WriteStartObject();
        writer.WriteEndObject();
        writer.Flush();
    }

}
