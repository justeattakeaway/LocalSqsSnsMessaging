// <auto-generated/>
// Generated JSON protocol serializers for Sqs
#nullable enable

using System.Text.Json;
using Amazon.SQS.Model;

namespace LocalSqsSnsMessaging.Http.Handlers;

/// <summary>
/// Generated JSON protocol serializers for Sqs operations.
/// </summary>
internal static class SqsJsonSerializers
{
    internal static string SerializeCancelMessageMoveTaskResponse(CancelMessageMoveTaskResponse response)
    {
        using var stream = new System.IO.MemoryStream();
        using var writer = new Utf8JsonWriter(stream);
        writer.WriteStartObject();

        // ApproximateNumberOfMessagesMoved
        if (response.ApproximateNumberOfMessagesMoved.HasValue)
            writer.WriteNumber("approximateNumberOfMessagesMoved", response.ApproximateNumberOfMessagesMoved.Value);

        writer.WriteEndObject();
        writer.Flush();
        return System.Text.Encoding.UTF8.GetString(stream.ToArray());
    }

    internal static string SerializeChangeMessageVisibilityBatchResponse(ChangeMessageVisibilityBatchResponse response)
    {
        using var stream = new System.IO.MemoryStream();
        using var writer = new Utf8JsonWriter(stream);
        writer.WriteStartObject();

        // Successful
        if (response.Successful != null && response.Successful.Count > 0)
        {
            writer.WritePropertyName("successful");
            writer.WriteStartArray();
            foreach (var item in response.Successful)
            {
                writer.WriteStartObject();
                if (item.Id != null)
                    writer.WriteString("id", item.Id);
                writer.WriteEndObject();
            }
            writer.WriteEndArray();
        }

        // Failed
        if (response.Failed != null && response.Failed.Count > 0)
        {
            writer.WritePropertyName("failed");
            writer.WriteStartArray();
            foreach (var item in response.Failed)
            {
                writer.WriteStartObject();
                if (item.Id != null)
                    writer.WriteString("id", item.Id);
                if (item.SenderFault.HasValue)
                    writer.WriteBoolean("senderFault", item.SenderFault.Value);
                if (item.Code != null)
                    writer.WriteString("code", item.Code);
                if (item.Message != null)
                    writer.WriteString("message", item.Message);
                writer.WriteEndObject();
            }
            writer.WriteEndArray();
        }

        writer.WriteEndObject();
        writer.Flush();
        return System.Text.Encoding.UTF8.GetString(stream.ToArray());
    }

    internal static string SerializeCreateQueueResponse(CreateQueueResponse response)
    {
        using var stream = new System.IO.MemoryStream();
        using var writer = new Utf8JsonWriter(stream);
        writer.WriteStartObject();

        // QueueUrl
        if (response.QueueUrl != null)
            writer.WriteString("queueUrl", response.QueueUrl);

        writer.WriteEndObject();
        writer.Flush();
        return System.Text.Encoding.UTF8.GetString(stream.ToArray());
    }

    internal static string SerializeDeleteMessageBatchResponse(DeleteMessageBatchResponse response)
    {
        using var stream = new System.IO.MemoryStream();
        using var writer = new Utf8JsonWriter(stream);
        writer.WriteStartObject();

        // Successful
        if (response.Successful != null && response.Successful.Count > 0)
        {
            writer.WritePropertyName("successful");
            writer.WriteStartArray();
            foreach (var item in response.Successful)
            {
                writer.WriteStartObject();
                if (item.Id != null)
                    writer.WriteString("id", item.Id);
                writer.WriteEndObject();
            }
            writer.WriteEndArray();
        }

        // Failed
        if (response.Failed != null && response.Failed.Count > 0)
        {
            writer.WritePropertyName("failed");
            writer.WriteStartArray();
            foreach (var item in response.Failed)
            {
                writer.WriteStartObject();
                if (item.Id != null)
                    writer.WriteString("id", item.Id);
                if (item.SenderFault.HasValue)
                    writer.WriteBoolean("senderFault", item.SenderFault.Value);
                if (item.Code != null)
                    writer.WriteString("code", item.Code);
                if (item.Message != null)
                    writer.WriteString("message", item.Message);
                writer.WriteEndObject();
            }
            writer.WriteEndArray();
        }

        writer.WriteEndObject();
        writer.Flush();
        return System.Text.Encoding.UTF8.GetString(stream.ToArray());
    }

    internal static string SerializeGetQueueAttributesResponse(GetQueueAttributesResponse response)
    {
        using var stream = new System.IO.MemoryStream();
        using var writer = new Utf8JsonWriter(stream);
        writer.WriteStartObject();

        // Attributes
        if (response.Attributes != null && response.Attributes.Count > 0)
        {
            writer.WritePropertyName("attributes");
            writer.WriteStartObject();
            foreach (var kvp in response.Attributes)
            {
                writer.WriteString(kvp.Key, kvp.Value);
            }
            writer.WriteEndObject();
        }

        writer.WriteEndObject();
        writer.Flush();
        return System.Text.Encoding.UTF8.GetString(stream.ToArray());
    }

    internal static string SerializeGetQueueUrlResponse(GetQueueUrlResponse response)
    {
        using var stream = new System.IO.MemoryStream();
        using var writer = new Utf8JsonWriter(stream);
        writer.WriteStartObject();

        // QueueUrl
        if (response.QueueUrl != null)
            writer.WriteString("queueUrl", response.QueueUrl);

        writer.WriteEndObject();
        writer.Flush();
        return System.Text.Encoding.UTF8.GetString(stream.ToArray());
    }

    internal static string SerializeListDeadLetterSourceQueuesResponse(ListDeadLetterSourceQueuesResponse response)
    {
        using var stream = new System.IO.MemoryStream();
        using var writer = new Utf8JsonWriter(stream);
        writer.WriteStartObject();

        // queueUrls
        if (response.QueueUrls != null && response.QueueUrls.Count > 0)
        {
            writer.WritePropertyName("queueUrls");
            writer.WriteStartArray();
            foreach (var item in response.QueueUrls)
            {
                writer.WriteStringValue(item);
            }
            writer.WriteEndArray();
        }

        // NextToken
        if (response.NextToken != null)
            writer.WriteString("nextToken", response.NextToken);

        writer.WriteEndObject();
        writer.Flush();
        return System.Text.Encoding.UTF8.GetString(stream.ToArray());
    }

    internal static string SerializeListMessageMoveTasksResponse(ListMessageMoveTasksResponse response)
    {
        using var stream = new System.IO.MemoryStream();
        using var writer = new Utf8JsonWriter(stream);
        writer.WriteStartObject();

        // Results
        if (response.Results != null && response.Results.Count > 0)
        {
            writer.WritePropertyName("results");
            writer.WriteStartArray();
            foreach (var item in response.Results)
            {
                writer.WriteStartObject();
                if (item.TaskHandle != null)
                    writer.WriteString("taskHandle", item.TaskHandle);
                if (item.Status != null)
                    writer.WriteString("status", item.Status);
                if (item.SourceArn != null)
                    writer.WriteString("sourceArn", item.SourceArn);
                if (item.DestinationArn != null)
                    writer.WriteString("destinationArn", item.DestinationArn);
                if (item.MaxNumberOfMessagesPerSecond.HasValue)
                    writer.WriteNumber("maxNumberOfMessagesPerSecond", item.MaxNumberOfMessagesPerSecond.Value);
                if (item.ApproximateNumberOfMessagesMoved.HasValue)
                    writer.WriteNumber("approximateNumberOfMessagesMoved", item.ApproximateNumberOfMessagesMoved.Value);
                if (item.ApproximateNumberOfMessagesToMove.HasValue)
                    writer.WriteNumber("approximateNumberOfMessagesToMove", item.ApproximateNumberOfMessagesToMove.Value);
                if (item.FailureReason != null)
                    writer.WriteString("failureReason", item.FailureReason);
                if (item.StartedTimestamp.HasValue)
                    writer.WriteNumber("startedTimestamp", item.StartedTimestamp.Value);
                writer.WriteEndObject();
            }
            writer.WriteEndArray();
        }

        writer.WriteEndObject();
        writer.Flush();
        return System.Text.Encoding.UTF8.GetString(stream.ToArray());
    }

    internal static string SerializeListQueueTagsResponse(ListQueueTagsResponse response)
    {
        using var stream = new System.IO.MemoryStream();
        using var writer = new Utf8JsonWriter(stream);
        writer.WriteStartObject();

        // Tags
        if (response.Tags != null && response.Tags.Count > 0)
        {
            writer.WritePropertyName("tags");
            writer.WriteStartObject();
            foreach (var kvp in response.Tags)
            {
                writer.WriteString(kvp.Key, kvp.Value);
            }
            writer.WriteEndObject();
        }

        writer.WriteEndObject();
        writer.Flush();
        return System.Text.Encoding.UTF8.GetString(stream.ToArray());
    }

    internal static string SerializeListQueuesResponse(ListQueuesResponse response)
    {
        using var stream = new System.IO.MemoryStream();
        using var writer = new Utf8JsonWriter(stream);
        writer.WriteStartObject();

        // QueueUrls
        if (response.QueueUrls != null && response.QueueUrls.Count > 0)
        {
            writer.WritePropertyName("queueUrls");
            writer.WriteStartArray();
            foreach (var item in response.QueueUrls)
            {
                writer.WriteStringValue(item);
            }
            writer.WriteEndArray();
        }

        // NextToken
        if (response.NextToken != null)
            writer.WriteString("nextToken", response.NextToken);

        writer.WriteEndObject();
        writer.Flush();
        return System.Text.Encoding.UTF8.GetString(stream.ToArray());
    }

    internal static string SerializeReceiveMessageResponse(ReceiveMessageResponse response)
    {
        using var stream = new System.IO.MemoryStream();
        using var writer = new Utf8JsonWriter(stream);
        writer.WriteStartObject();

        // Messages
        if (response.Messages != null && response.Messages.Count > 0)
        {
            writer.WritePropertyName("messages");
            writer.WriteStartArray();
            foreach (var item in response.Messages)
            {
                writer.WriteStartObject();
                if (item.MessageId != null)
                    writer.WriteString("messageId", item.MessageId);
                if (item.ReceiptHandle != null)
                    writer.WriteString("receiptHandle", item.ReceiptHandle);
                if (item.MD5OfBody != null)
                    writer.WriteString("mD5OfBody", item.MD5OfBody);
                if (item.Body != null)
                    writer.WriteString("body", item.Body);
                if (item.Attributes != null && item.Attributes.Count > 0)
                {
                    writer.WritePropertyName("attributes");
                    writer.WriteStartObject();
                    foreach (var kvp in item.Attributes)
                    {
                        writer.WriteString(kvp.Key, kvp.Value);
                    }
                    writer.WriteEndObject();
                }
                if (item.MD5OfMessageAttributes != null)
                    writer.WriteString("mD5OfMessageAttributes", item.MD5OfMessageAttributes);
                if (item.MessageAttributes != null && item.MessageAttributes.Count > 0)
                {
                    writer.WritePropertyName("messageAttributes");
                    writer.WriteStartObject();
                    foreach (var kvp in item.MessageAttributes)
                    {
                        writer.WritePropertyName(kvp.Key);
                        writer.WriteStartObject();
                        if (kvp.Value.StringValue != null)
                            writer.WriteString("stringValue", kvp.Value.StringValue);
                        if (kvp.Value.BinaryValue != null)
                            writer.WriteString("binaryValue", Convert.ToBase64String(kvp.Value.BinaryValue.ToArray()));
                        if (kvp.Value.StringListValues != null && kvp.Value.StringListValues.Count > 0)
                        {
                            writer.WritePropertyName("stringListValues");
                            writer.WriteStartArray();
                            foreach (var item0 in kvp.Value.StringListValues)
                            {
                                writer.WriteStringValue(item0);
                            }
                            writer.WriteEndArray();
                        }
                        if (kvp.Value.BinaryListValues != null && kvp.Value.BinaryListValues.Count > 0)
                        {
                            writer.WritePropertyName("binaryListValues");
                            writer.WriteStartArray();
                            foreach (var item1 in kvp.Value.BinaryListValues)
                            {
                                writer.WriteStringValue(Convert.ToBase64String(item1.ToArray()));
                            }
                            writer.WriteEndArray();
                        }
                        if (kvp.Value.DataType != null)
                            writer.WriteString("dataType", kvp.Value.DataType);
                        writer.WriteEndObject();
                    }
                    writer.WriteEndObject();
                }
                writer.WriteEndObject();
            }
            writer.WriteEndArray();
        }

        writer.WriteEndObject();
        writer.Flush();
        return System.Text.Encoding.UTF8.GetString(stream.ToArray());
    }

    internal static string SerializeSendMessageResponse(SendMessageResponse response)
    {
        using var stream = new System.IO.MemoryStream();
        using var writer = new Utf8JsonWriter(stream);
        writer.WriteStartObject();

        // MD5OfMessageBody
        if (response.MD5OfMessageBody != null)
            writer.WriteString("mD5OfMessageBody", response.MD5OfMessageBody);

        // MD5OfMessageAttributes
        if (response.MD5OfMessageAttributes != null)
            writer.WriteString("mD5OfMessageAttributes", response.MD5OfMessageAttributes);

        // MD5OfMessageSystemAttributes
        if (response.MD5OfMessageSystemAttributes != null)
            writer.WriteString("mD5OfMessageSystemAttributes", response.MD5OfMessageSystemAttributes);

        // MessageId
        if (response.MessageId != null)
            writer.WriteString("messageId", response.MessageId);

        // SequenceNumber
        if (response.SequenceNumber != null)
            writer.WriteString("sequenceNumber", response.SequenceNumber);

        writer.WriteEndObject();
        writer.Flush();
        return System.Text.Encoding.UTF8.GetString(stream.ToArray());
    }

    internal static string SerializeSendMessageBatchResponse(SendMessageBatchResponse response)
    {
        using var stream = new System.IO.MemoryStream();
        using var writer = new Utf8JsonWriter(stream);
        writer.WriteStartObject();

        // Successful
        if (response.Successful != null && response.Successful.Count > 0)
        {
            writer.WritePropertyName("successful");
            writer.WriteStartArray();
            foreach (var item in response.Successful)
            {
                writer.WriteStartObject();
                if (item.Id != null)
                    writer.WriteString("id", item.Id);
                if (item.MessageId != null)
                    writer.WriteString("messageId", item.MessageId);
                if (item.MD5OfMessageBody != null)
                    writer.WriteString("mD5OfMessageBody", item.MD5OfMessageBody);
                if (item.MD5OfMessageAttributes != null)
                    writer.WriteString("mD5OfMessageAttributes", item.MD5OfMessageAttributes);
                if (item.MD5OfMessageSystemAttributes != null)
                    writer.WriteString("mD5OfMessageSystemAttributes", item.MD5OfMessageSystemAttributes);
                if (item.SequenceNumber != null)
                    writer.WriteString("sequenceNumber", item.SequenceNumber);
                writer.WriteEndObject();
            }
            writer.WriteEndArray();
        }

        // Failed
        if (response.Failed != null && response.Failed.Count > 0)
        {
            writer.WritePropertyName("failed");
            writer.WriteStartArray();
            foreach (var item in response.Failed)
            {
                writer.WriteStartObject();
                if (item.Id != null)
                    writer.WriteString("id", item.Id);
                if (item.SenderFault.HasValue)
                    writer.WriteBoolean("senderFault", item.SenderFault.Value);
                if (item.Code != null)
                    writer.WriteString("code", item.Code);
                if (item.Message != null)
                    writer.WriteString("message", item.Message);
                writer.WriteEndObject();
            }
            writer.WriteEndArray();
        }

        writer.WriteEndObject();
        writer.Flush();
        return System.Text.Encoding.UTF8.GetString(stream.ToArray());
    }

    internal static string SerializeStartMessageMoveTaskResponse(StartMessageMoveTaskResponse response)
    {
        using var stream = new System.IO.MemoryStream();
        using var writer = new Utf8JsonWriter(stream);
        writer.WriteStartObject();

        // TaskHandle
        if (response.TaskHandle != null)
            writer.WriteString("taskHandle", response.TaskHandle);

        writer.WriteEndObject();
        writer.Flush();
        return System.Text.Encoding.UTF8.GetString(stream.ToArray());
    }

    /// <summary>
    /// Dispatches response serialization to the appropriate operation-specific serializer.
    /// </summary>
    internal static string SerializeResponse(object response, string operationName)
    {
        return operationName switch
        {
            "CancelMessageMoveTask" => SerializeCancelMessageMoveTaskResponse((CancelMessageMoveTaskResponse)response),
            "ChangeMessageVisibilityBatch" => SerializeChangeMessageVisibilityBatchResponse((ChangeMessageVisibilityBatchResponse)response),
            "CreateQueue" => SerializeCreateQueueResponse((CreateQueueResponse)response),
            "DeleteMessageBatch" => SerializeDeleteMessageBatchResponse((DeleteMessageBatchResponse)response),
            "GetQueueAttributes" => SerializeGetQueueAttributesResponse((GetQueueAttributesResponse)response),
            "GetQueueUrl" => SerializeGetQueueUrlResponse((GetQueueUrlResponse)response),
            "ListDeadLetterSourceQueues" => SerializeListDeadLetterSourceQueuesResponse((ListDeadLetterSourceQueuesResponse)response),
            "ListMessageMoveTasks" => SerializeListMessageMoveTasksResponse((ListMessageMoveTasksResponse)response),
            "ListQueueTags" => SerializeListQueueTagsResponse((ListQueueTagsResponse)response),
            "ListQueues" => SerializeListQueuesResponse((ListQueuesResponse)response),
            "ReceiveMessage" => SerializeReceiveMessageResponse((ReceiveMessageResponse)response),
            "SendMessage" => SerializeSendMessageResponse((SendMessageResponse)response),
            "SendMessageBatch" => SerializeSendMessageBatchResponse((SendMessageBatchResponse)response),
            "StartMessageMoveTask" => SerializeStartMessageMoveTaskResponse((StartMessageMoveTaskResponse)response),
            _ => throw new NotSupportedException($"Operation '{operationName}' does not have a response serializer.")
        };
    }

}
