
[38;5;11m   _____ _              _               _   _ ______ _______ Â [0m
[38;5;11m  / ____| |            | |             | \ | |  ____|__   __|Â [0m
[38;5;11m | (___ | |_ _ __ _   _| | _____ _ __  |  \| | |__     | |   Â [0m
[38;5;11m  \___ \| __| '__| | | | |/ / _ \ '__| | . ` |  __|    | |   Â [0m
[38;5;11m  ____) | |_| |  | |_| |   <  __/ |    | |\  | |____   | |   Â [0m
[38;5;11m |_____/ \__|_|   \__, |_|\_\___|_| (_)|_| \_|______|  |_|   Â [0m
[38;5;11m                   __/ |                                     Â [0m
[38;5;11m                  |___/                                      Â [0m


[12:29:44 INF] Logging enabled at level Trace
Version: [38;5;2m4.3.0[0m
[12:29:44 DBG] Stryker starting, version: 4.3.0

[12:29:44 INF] Stryker will use a max of 6 parallel testsessions.
[12:29:44 DBG] Stryker started with options: {"MsBuildPath": null, "DevMode": false, "ProjectPath": "/Users/stuart.lang/RiderProjects/ConsoleApp9", "IsSolutionContext": true, "WorkingDirectory": "/Users/stuart.lang/RiderProjects/ConsoleApp9", "OutputPath": "/Users/stuart.lang/RiderProjects/ConsoleApp9/StrykerOutput/2024-11-05.12-29-44", "ReportPath": "/Users/stuart.lang/RiderProjects/ConsoleApp9/StrykerOutput/2024-11-05.12-29-44/reports", "ReportFileName": "mutation-report", "SolutionPath": "/Users/stuart.lang/RiderProjects/ConsoleApp9/LocalSqsSnsMessaging.sln", "Configuration": "Debug", "TargetFramework": "net8.0", "LogOptions": {"LogToFile": false, "LogLevel": "Verbose", "$type": "LogOptions"}, "MutationLevel": "Standard", "Thresholds": {"High": 80, "Low": 60, "Break": 0, "$type": "Thresholds"}, "AdditionalTimeout": 5000, "LanguageVersion": "Latest", "Concurrency": 6, "SourceProjectName": "LocalSqsSnsMessaging.csproj", "TestProjects": ["/Users/stuart.lang/RiderProjects/ConsoleApp9/tests/LocalSqsSnsMessaging.Tests/LocalSqsSnsMessaging.Tests.csproj"], "TestCaseFilter": "(FullyQualifiedName~LocalSqsSnsMessaging.Tests.LocalAwsMessaging)", "Reporters": ["Progress", "Html"], "WithBaseline": false, "BaselineProvider": "Disk", "AzureFileStorageUrl": "", "AzureFileStorageSas": "", "DashboardUrl": "https://dashboard.stryker-mutator.io", "DashboardApiKey": null, "Since": false, "SinceTarget": "master", "DiffIgnoreChanges": [], "FallbackVersion": "master", "ModuleName": "LocalSqsSnsMessaging", "ReportTypeToOpen": null, "Mutate": [{"Glob": {"Tokens": [{"TrailingPathSeparator": {"Value": "/", "$type": "PathSeparatorToken"}, "LeadingPathSeparator": null, "$type": "WildcardDirectoryToken"}, {"$type": "WildcardToken"}], "$type": "Glob"}, "IsExclude": false, "TextSpans": [{"Start": 0, "End": 2147483647, "Length": 2147483647, "IsEmpty": false, "$type": "TextSpan"}], "$type": "FilePattern"}], "IgnoredMethods": [], "ExcludedMutations": [], "ExcludedLinqExpressions": [], "OptimizationMode": "CoverageBasedTest", "ProjectName": "LocalSqsSnsMessaging", "ProjectVersion": "", "BreakOnInitialTestFailure": false, "MutantIdProvider": {"$type": "BasicIdProvider"}, "$type": "StrykerOptions"}
[12:29:44 INF] Analysis starting.
[12:29:44 INF] Identifying projects to mutate in /Users/stuart.lang/RiderProjects/ConsoleApp9/LocalSqsSnsMessaging.sln. This can take a while.
[12:29:44 DBG] Analyzing 5 projects.
[12:29:44 DBG] Analyzing tests/LocalSqsSnsMessaging.Tests.Shared/LocalSqsSnsMessaging.Tests.Shared.csproj
[12:29:44 DBG] Analyzing src/LocalSqsSnsMessaging/LocalSqsSnsMessaging.csproj
[12:29:44 DBG] Analyzing tests/LocalSqsSnsMessaging.Tests.Verification/LocalSqsSnsMessaging.Tests.Verification.csproj
[12:29:44 DBG] Analyzing tests/LocalSqsSnsMessaging.Tests/LocalSqsSnsMessaging.Tests.csproj
[12:29:44 DBG] Analyzing tests/LocalSqsSnsMessaging.Tests.AppHost/LocalSqsSnsMessaging.Tests.AppHost.csproj
[12:29:45 VRB]   GET https://api.nuget.org/v3/registration5-gz-semver2/dotnet-stryker/index.json
[12:29:45 VRB]   OK https://api.nuget.org/v3/registration5-gz-semver2/dotnet-stryker/index.json 125ms
[12:29:45 VRB]   CACHE https://api.nuget.org/v3/registration5-gz-semver2/dotnet-stryker/index.json
[12:29:46 DBG] Analysis of project tests/LocalSqsSnsMessaging.Tests.Verification/LocalSqsSnsMessaging.Tests.Verification.csproj succeeded.
[12:29:46 DBG] Analysis of project src/LocalSqsSnsMessaging/LocalSqsSnsMessaging.csproj succeeded.
[12:29:46 DBG] Analysis of project tests/LocalSqsSnsMessaging.Tests/LocalSqsSnsMessaging.Tests.csproj succeeded.
[12:29:46 DBG] Analysis of project tests/LocalSqsSnsMessaging.Tests.Shared/LocalSqsSnsMessaging.Tests.Shared.csproj succeeded.
[12:29:46 DBG] Analysis of project tests/LocalSqsSnsMessaging.Tests.AppHost/LocalSqsSnsMessaging.Tests.AppHost.csproj succeeded.
[12:29:46 DBG] Skipping auto-generated code file: /Users/stuart.lang/RiderProjects/ConsoleApp9/artifacts/obj/LocalSqsSnsMessaging/debug/LocalSqsSnsMessaging.GlobalUsings.g.cs
[12:29:46 DBG] Skipping auto-generated code file: /Users/stuart.lang/RiderProjects/ConsoleApp9/artifacts/obj/LocalSqsSnsMessaging/debug/.NETCoreApp,Version=v8.0.AssemblyAttributes.cs
[12:29:46 DBG] Skipping auto-generated code file: /Users/stuart.lang/RiderProjects/ConsoleApp9/artifacts/obj/LocalSqsSnsMessaging/debug/LocalSqsSnsMessaging.AssemblyInfo.cs
[12:29:46 INF] Found project /Users/stuart.lang/RiderProjects/ConsoleApp9/src/LocalSqsSnsMessaging/LocalSqsSnsMessaging.csproj to mutate.
[12:29:46 INF] Analysis complete.
[12:29:46 INF] Building solution LocalSqsSnsMessaging.sln
[12:29:46 DBG] Started initial build using dotnet build
[12:29:46 INF] Building project LocalSqsSnsMessaging.sln using dotnet build LocalSqsSnsMessaging.sln -c Debug (directory /Users/stuart.lang/RiderProjects/ConsoleApp9.)
[12:29:51 VRB] Initial build output   Determining projects to restore...
  All projects are up-to-date for restore.
  LocalSqsSnsMessaging -> /Users/stuart.lang/RiderProjects/ConsoleApp9/artifacts/bin/LocalSqsSnsMessaging/debug/LocalSqsSnsMessaging.dll
  LocalSqsSnsMessaging.Tests.AppHost -> /Users/stuart.lang/RiderProjects/ConsoleApp9/artifacts/bin/LocalSqsSnsMessaging.Tests.AppHost/debug/LocalSqsSnsMessaging.Tests.AppHost.dll
  LocalSqsSnsMessaging.Tests.Shared -> /Users/stuart.lang/RiderProjects/ConsoleApp9/artifacts/bin/LocalSqsSnsMessaging.Tests.Shared/debug/LocalSqsSnsMessaging.Tests.Shared.dll
  LocalSqsSnsMessaging.Tests -> /Users/stuart.lang/RiderProjects/ConsoleApp9/artifacts/bin/LocalSqsSnsMessaging.Tests/debug/LocalSqsSnsMessaging.Tests.dll
  LocalSqsSnsMessaging.Tests.Verification -> /Users/stuart.lang/RiderProjects/ConsoleApp9/artifacts/bin/LocalSqsSnsMessaging.Tests.Verification/debug/LocalSqsSnsMessaging.Tests.Verification.dll

Build succeeded.
    0 Warning(s)
    0 Error(s)

Time Elapsed 00:00:04.07

[12:29:51 DBG] Initial build successful
[12:29:51 DBG] VsTest zip was copied to: /var/folders/w3/hly5zs3n64v0qgvfl1jzstmm0000gq/T/lpsgislk.50f/.vstest/vstest.zip
[12:29:51 DBG] VsTest zip was unzipped to: /var/folders/w3/hly5zs3n64v0qgvfl1jzstmm0000gq/T/lpsgislk.50f/.vstest
[12:29:51 DBG] Using vstest from deployed vstest package
[12:29:51 DBG] Using vstest.console: OSX for OS /var/folders/w3/hly5zs3n64v0qgvfl1jzstmm0000gq/T/lpsgislk.50f/.vstest/tools/netcoreapp3.1/vstest.console.dll
[12:29:52 DBG] TestDiscoverer: Discovery settings: <RunSettings>
 <RunConfiguration>

<MaxCpuCount>6</MaxCpuCount>
<TestCaseFilter>(FullyQualifiedName~LocalSqsSnsMessaging.Tests.LocalAwsMessaging)</TestCaseFilter>
  <InIsolation>true</InIsolation>
<DisableAppDomain>true</DisableAppDomain>  <DesignMode>true</DesignMode>
 </RunConfiguration>
</RunSettings>
[12:29:52 DBG] TestDiscoverer: Test Discovery Message: Unhandled exception. System.IO.FileNotFoundException: Could not load file or assembly 'Microsoft.TestPlatform.CoreUtilities, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'. The system cannot find the file specified.
Test Discovery Message: File name: 'Microsoft.TestPlatform.CoreUtilities, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'
Test Discovery Message: Microsoft.VisualStudio.TestPlatform.ObjectModel.TestPlatformException: Testhost process for source(s) '/Users/stuart.lang/RiderProjects/ConsoleApp9/artifacts/bin/LocalSqsSnsMessaging.Tests.Shared/debug/LocalSqsSnsMessaging.Tests.Shared.dll' exited with error: Unhandled exception. System.IO.FileNotFoundException: Could not load file or assembly 'Microsoft.TestPlatform.CoreUtilities, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'. The system cannot find the file specified.
File name: 'Microsoft.TestPlatform.CoreUtilities, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'
. Please check the diagnostic logs for more information.
   at Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyOperationManager.ThrowOnTestHostExited(IEnumerable`1 sources, Boolean testHostExited) in /_/src/Microsoft.TestPlatform.CrossPlatEngine/Client/ProxyOperationManager.cs:line 520
   at Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyOperationManager.SetupChannel(IEnumerable`1 sources, String runSettings) in /_/src/Microsoft.TestPlatform.CrossPlatEngine/Client/ProxyOperationManager.cs:line 290
   at Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyDiscoveryManager.InitializeDiscovery(DiscoveryCriteria discoveryCriteria, ITestDiscoveryEventsHandler2 eventHandler, Boolean skipDefaultAdapters) in /_/src/Microsoft.TestPlatform.CrossPlatEngine/Client/ProxyDiscoveryManager.cs:line 149
[12:29:52 ERR] TestDiscoverer: Test discovery has been aborted!
[12:29:52 WRN] No test detected for project '/Users/stuart.lang/RiderProjects/ConsoleApp9/tests/LocalSqsSnsMessaging.Tests.Shared/LocalSqsSnsMessaging.Tests.Shared.csproj'. No cause identified.
[12:29:53 VRB] Test Case : name= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SnsPublishAsyncTestsLocalAwsMessaging.PublishAsync_WithRawDelivery_ShouldDeliverMessageDirectly (id= e29b17b3-99c0-fecb-1020-9cfce25c3706, FQN= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SnsPublishAsyncTestsLocalAwsMessaging.PublishAsync_WithRawDelivery_ShouldDeliverMessageDirectly).
[12:29:53 VRB] Test Case : name= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SnsPublishAsyncTestsLocalAwsMessaging.PublishAsync_WithRawDelivery_ShouldCalculateMD5OfBody (id= a05dd7ff-be1e-2bcf-8ed3-4d74096ab01e, FQN= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SnsPublishAsyncTestsLocalAwsMessaging.PublishAsync_WithRawDelivery_ShouldCalculateMD5OfBody).
[12:29:53 VRB] Test Case : name= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SnsPublishAsyncTestsLocalAwsMessaging.PublishAsync_WithNonRawDelivery_ShouldWrapMessageInSNSFormat (id= a9ea90b6-cd2b-ad5c-f568-e654a1209a9d, FQN= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SnsPublishAsyncTestsLocalAwsMessaging.PublishAsync_WithNonRawDelivery_ShouldWrapMessageInSNSFormat).
[12:29:53 VRB] Test Case : name= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SnsPublishAsyncTestsLocalAwsMessaging.PublishAsync_WithNonExistentTopic_ShouldThrowException (id= bf0ca134-2137-2bc3-2928-b3afcc2d61d3, FQN= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SnsPublishAsyncTestsLocalAwsMessaging.PublishAsync_WithNonExistentTopic_ShouldThrowException).
[12:29:53 VRB] Test Case : name= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SnsPublishAsyncTestsLocalAwsMessaging.SetTopicAttributes_ShouldSetAndRetrieveAttributes (id= 779c0651-579b-c4a3-b619-0a5f48d45828, FQN= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SnsPublishAsyncTestsLocalAwsMessaging.SetTopicAttributes_ShouldSetAndRetrieveAttributes).
[12:29:53 VRB] Test Case : name= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SnsPublishAsyncTestsLocalAwsMessaging.SetTopicAttributes_ForNonExistentTopic_ShouldThrowException (id= b837c14e-b9e3-4448-11cd-d5e398651627, FQN= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SnsPublishAsyncTestsLocalAwsMessaging.SetTopicAttributes_ForNonExistentTopic_ShouldThrowException).
[12:29:53 VRB] Test Case : name= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SnsPublishAsyncTestsLocalAwsMessaging.GetSubscriptionAttributes_ShouldRetrieveCorrectAttributes (id= 96d429b2-fc57-0e8b-9f82-4e5227dd4406, FQN= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SnsPublishAsyncTestsLocalAwsMessaging.GetSubscriptionAttributes_ShouldRetrieveCorrectAttributes).
[12:29:53 VRB] Test Case : name= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SnsPublishAsyncTestsLocalAwsMessaging.GetSubscriptionAttributes_ForNonExistentSubscription_ShouldThrowException (id= eef44a0b-b16e-8ae3-03d0-32cd1498b5eb, FQN= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SnsPublishAsyncTestsLocalAwsMessaging.GetSubscriptionAttributes_ForNonExistentSubscription_ShouldThrowException).
[12:29:53 VRB] Test Case : name= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SnsPublishAsyncTestsLocalAwsMessaging.SetSubscriptionAttributes_ShouldUpdateAttributes (id= 2865ebd0-2011-8f2c-9b99-98d3ab523632, FQN= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SnsPublishAsyncTestsLocalAwsMessaging.SetSubscriptionAttributes_ShouldUpdateAttributes).
[12:29:53 VRB] Test Case : name= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SnsPublishAsyncTestsLocalAwsMessaging.ListSubscriptionsAsync_ShouldReturnAllSubscriptions (id= 209c50ce-ebec-7375-d690-d9f54cee77cb, FQN= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SnsPublishAsyncTestsLocalAwsMessaging.ListSubscriptionsAsync_ShouldReturnAllSubscriptions).
[12:29:53 VRB] Test Case : name= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SnsPublishAsyncTestsLocalAwsMessaging.ListSubscriptionsByTopicAsync_ShouldReturnSubscriptionsForSpecificTopic (id= 57698f3b-8d15-5b16-461d-3d4b4c8814d5, FQN= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SnsPublishAsyncTestsLocalAwsMessaging.ListSubscriptionsByTopicAsync_ShouldReturnSubscriptionsForSpecificTopic).
[12:29:53 VRB] Test Case : name= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SnsPublishAsyncTestsLocalAwsMessaging.ListSubscriptionsAsync_WithMoreThan100Subscriptions_ShouldReturnPaginatedResults (id= c60cae7a-7f29-de98-9d1a-1f50d77ab0e8, FQN= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SnsPublishAsyncTestsLocalAwsMessaging.ListSubscriptionsAsync_WithMoreThan100Subscriptions_ShouldReturnPaginatedResults).
[12:29:53 VRB] Test Case : name= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SnsPublishAsyncTestsLocalAwsMessaging.PublishAsync_ToFifoTopic_ShouldDeliverMessageToFifoQueue_InOrder (id= 8582af64-6347-310e-d14e-64440da7266b, FQN= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SnsPublishAsyncTestsLocalAwsMessaging.PublishAsync_ToFifoTopic_ShouldDeliverMessageToFifoQueue_InOrder).
[12:29:53 VRB] Test Case : name= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SnsPublishAsyncTestsLocalAwsMessaging.PublishAsync_ToFifoTopic_ShouldPreventDuplicates (id= f702c01e-bfe5-c386-435d-206ab8b97a67, FQN= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SnsPublishAsyncTestsLocalAwsMessaging.PublishAsync_ToFifoTopic_ShouldPreventDuplicates).
[12:29:53 VRB] Test Case : name= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SnsPublishAsyncTestsLocalAwsMessaging.PublishAsync_ToFifoTopic_WithMultipleMessageGroups_ShouldMaintainOrderWithinGroups (id= 6c395e29-fc98-69de-4852-e5deb9f4b1c9, FQN= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SnsPublishAsyncTestsLocalAwsMessaging.PublishAsync_ToFifoTopic_WithMultipleMessageGroups_ShouldMaintainOrderWithinGroups).
[12:29:53 VRB] Test Case : name= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SnsPublishAsyncTestsLocalAwsMessaging.PublishAsync_MessageExceedsMaximumSize_ThrowsInvalidParameterException (id= 55c4817e-e70b-bd2c-0757-a68bdd1b425d, FQN= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SnsPublishAsyncTestsLocalAwsMessaging.PublishAsync_MessageExceedsMaximumSize_ThrowsInvalidParameterException).
[12:29:53 VRB] Test Case : name= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SnsPublishAsyncTestsLocalAwsMessaging.PublishAsync_MessageAttributesExceedMaximumSize_ThrowsInvalidParameterException (id= 57c79725-9766-8458-0bc0-2252b9cd9340, FQN= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SnsPublishAsyncTestsLocalAwsMessaging.PublishAsync_MessageAttributesExceedMaximumSize_ThrowsInvalidParameterException).
[12:29:53 VRB] Test Case : name= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SnsPublishAsyncTestsLocalAwsMessaging.PublishAsync_ExactlyMaximumSize_Succeeds (id= 27c0dfe2-ba56-c9bf-9da2-5b304eb2e01b, FQN= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SnsPublishAsyncTestsLocalAwsMessaging.PublishAsync_ExactlyMaximumSize_Succeeds).
[12:29:53 VRB] Test Case : name= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SnsPublishAsyncTestsLocalAwsMessaging.PublishAsync_WithSubjectAndMessageAttributes_ExceedsLimit_ThrowsInvalidParameterException (id= fc0b3da9-6dae-bfb5-2487-72e610a0d169, FQN= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SnsPublishAsyncTestsLocalAwsMessaging.PublishAsync_WithSubjectAndMessageAttributes_ExceedsLimit_ThrowsInvalidParameterException).
[12:29:53 VRB] Test Case : name= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsChangeMessageVisibilityAsyncLocalAwsMessagingTests.ChangeMessageVisibilityAsync_ValidRequest_ChangesVisibilityTimeout (id= fb9361ea-43e7-01c9-179c-e7367c61b01f, FQN= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsChangeMessageVisibilityAsyncLocalAwsMessagingTests.ChangeMessageVisibilityAsync_ValidRequest_ChangesVisibilityTimeout).
[12:29:53 VRB] Test Case : name= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsChangeMessageVisibilityAsyncLocalAwsMessagingTests.ChangeMessageVisibilityAsync_SetToZero_MakesMessageImmediatelyAvailable (id= 45838bfa-6a5b-60d7-9ed3-2b019b4aed3f, FQN= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsChangeMessageVisibilityAsyncLocalAwsMessagingTests.ChangeMessageVisibilityAsync_SetToZero_MakesMessageImmediatelyAvailable).
[12:29:53 VRB] Test Case : name= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsChangeMessageVisibilityAsyncLocalAwsMessagingTests.ChangeMessageVisibilityAsync_InvalidReceiptHandle_ThrowsException (id= 43da5d33-ef39-1dc6-78b8-a23d835c6cfc, FQN= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsChangeMessageVisibilityAsyncLocalAwsMessagingTests.ChangeMessageVisibilityAsync_InvalidReceiptHandle_ThrowsException).
[12:29:53 VRB] Test Case : name= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsChangeMessageVisibilityAsyncLocalAwsMessagingTests.ChangeMessageVisibilityAsync_MessageNotInFlight_ThrowsException (id= 788518ff-b9bf-da49-26dd-6c9e0cdf0fdb, FQN= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsChangeMessageVisibilityAsyncLocalAwsMessagingTests.ChangeMessageVisibilityAsync_MessageNotInFlight_ThrowsException).
[12:29:53 VRB] Test Case : name= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsChangeMessageVisibilityAsyncLocalAwsMessagingTests.ChangeMessageVisibilityAsync_ChangeMultipleTimes_LastChangeApplies (id= d624dc07-32d1-3d66-4668-8afc5efa25a7, FQN= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsChangeMessageVisibilityAsyncLocalAwsMessagingTests.ChangeMessageVisibilityAsync_ChangeMultipleTimes_LastChangeApplies).
[12:29:53 VRB] Test Case : name= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsFifoTestsLocalAwsMessaging.CreateFifoQueue_SetsCorrectAttributes (id= 77fa84b9-b9ee-01bb-f52c-00896836864b, FQN= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsFifoTestsLocalAwsMessaging.CreateFifoQueue_SetsCorrectAttributes).
[12:29:53 VRB] Test Case : name= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsFifoTestsLocalAwsMessaging.SendMessageToFifoQueue_RequiresMessageGroupId (id= 70f69332-70eb-bd31-e365-22431468288e, FQN= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsFifoTestsLocalAwsMessaging.SendMessageToFifoQueue_RequiresMessageGroupId).
[12:29:53 VRB] Test Case : name= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsFifoTestsLocalAwsMessaging.FifoQueue_EnforcesMessageGroupOrdering (id= 20fa155e-bc30-89da-4ad6-8ffa0d3d7859, FQN= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsFifoTestsLocalAwsMessaging.FifoQueue_EnforcesMessageGroupOrdering).
[12:29:53 VRB] Test Case : name= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsFifoTestsLocalAwsMessaging.FifoQueue_MessageDeduplication (id= bbd27d5e-6cf9-dba0-0fb7-21b5f595f731, FQN= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsFifoTestsLocalAwsMessaging.FifoQueue_MessageDeduplication).
[12:29:53 VRB] Test Case : name= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsFifoTestsLocalAwsMessaging.FifoQueue_ContentBasedDeduplication (id= dee15e5d-feea-7743-7076-7193fd536c24, FQN= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsFifoTestsLocalAwsMessaging.FifoQueue_ContentBasedDeduplication).
[12:29:53 VRB] Test Case : name= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsFifoTestsLocalAwsMessaging.FifoQueue_HighThroughputMode (id= d9550c86-d0fd-2acc-dfbe-21e035e5e729, FQN= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsFifoTestsLocalAwsMessaging.FifoQueue_HighThroughputMode).
[12:29:53 VRB] Test Case : name= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsQueueTagsLocalAwsMessagingTests.TagQueueAsync_ValidTags_TagsAreApplied (id= 4a892fa8-02ff-68d6-743d-7a41df1b953d, FQN= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsQueueTagsLocalAwsMessagingTests.TagQueueAsync_ValidTags_TagsAreApplied).
[12:29:53 VRB] Test Case : name= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsQueueTagsLocalAwsMessagingTests.TagQueueAsync_InvalidQueueUrl_ThrowsException (id= 5ef0fb1f-71e6-5c8b-578d-4e38199297bf, FQN= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsQueueTagsLocalAwsMessagingTests.TagQueueAsync_InvalidQueueUrl_ThrowsException).
[12:29:53 VRB] Test Case : name= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsQueueTagsLocalAwsMessagingTests.UntagQueueAsync_ExistingTags_TagsAreRemoved (id= 93b18d30-13db-5e76-517c-88cb307a1bba, FQN= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsQueueTagsLocalAwsMessagingTests.UntagQueueAsync_ExistingTags_TagsAreRemoved).
[12:29:53 VRB] Test Case : name= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsQueueTagsLocalAwsMessagingTests.UntagQueueAsync_NonexistentTags_NoError (id= a8471b21-eb3b-4220-d51a-44f14af99bbd, FQN= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsQueueTagsLocalAwsMessagingTests.UntagQueueAsync_NonexistentTags_NoError).
[12:29:53 VRB] Test Case : name= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsQueueTagsLocalAwsMessagingTests.ListQueueTagsAsync_NoTags_ReturnsEmptyDictionary (id= c8e0b986-c561-7fab-8c1f-608dd5ed51fc, FQN= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsQueueTagsLocalAwsMessagingTests.ListQueueTagsAsync_NoTags_ReturnsEmptyDictionary).
[12:29:53 VRB] Test Case : name= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsQueueTagsLocalAwsMessagingTests.TagQueueAsync_UpdateExistingTag_TagValueIsUpdated (id= c76acffc-8085-7841-9ed0-7f21827e6a22, FQN= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsQueueTagsLocalAwsMessagingTests.TagQueueAsync_UpdateExistingTag_TagValueIsUpdated).
[12:29:53 VRB] Test Case : name= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsQueueTagsLocalAwsMessagingTests.TagQueueAsync_MaximumTags_Success (id= 8382b047-c1f7-1523-5683-c42278dd5545, FQN= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsQueueTagsLocalAwsMessagingTests.TagQueueAsync_MaximumTags_Success).
[12:29:53 VRB] Test Case : name= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsQueueTagsLocalAwsMessagingTests.TagQueueAsync_EmptyTagValue_Success (id= 64b26779-58c1-5007-0dc8-65d5fe5bf575, FQN= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsQueueTagsLocalAwsMessagingTests.TagQueueAsync_EmptyTagValue_Success).
[12:29:53 VRB] Test Case : name= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsQueueTagsLocalAwsMessagingTests.TagQueueAsync_NullTagValue_Success (id= f6f6c70d-e56d-1762-b6ba-2e8f2c0812e7, FQN= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsQueueTagsLocalAwsMessagingTests.TagQueueAsync_NullTagValue_Success).
[12:29:53 VRB] Test Case : name= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsQueueTagsLocalAwsMessagingTests.TagQueueAsync_UpdateTagToEmptyValue_Success (id= 726824e1-7c64-4316-88ea-4715522c3166, FQN= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsQueueTagsLocalAwsMessagingTests.TagQueueAsync_UpdateTagToEmptyValue_Success).
[12:29:53 VRB] Test Case : name= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsReceiveMessageAsyncTestsLocalAwsMessaging.ReceiveMessageAsync_QueueNotFound_ThrowsQueueDoesNotExistException (id= 448929f2-3314-d787-8b4f-d39983932e72, FQN= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsReceiveMessageAsyncTestsLocalAwsMessaging.ReceiveMessageAsync_QueueNotFound_ThrowsQueueDoesNotExistException).
[12:29:53 VRB] Test Case : name= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsReceiveMessageAsyncTestsLocalAwsMessaging.ReceiveMessageAsync_NoMessages_ReturnsEmptyList (id= ca9f2816-0cdd-fe5a-f452-cbe8678c4ece, FQN= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsReceiveMessageAsyncTestsLocalAwsMessaging.ReceiveMessageAsync_NoMessages_ReturnsEmptyList).
[12:29:53 VRB] Test Case : name= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsReceiveMessageAsyncTestsLocalAwsMessaging.ReceiveMessageAsync_MessagesAvailable_ReturnsMessages (id= 535b526d-ca9b-4db8-b42d-fab468fcb6f5, FQN= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsReceiveMessageAsyncTestsLocalAwsMessaging.ReceiveMessageAsync_MessagesAvailable_ReturnsMessages).
[12:29:53 VRB] Test Case : name= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsReceiveMessageAsyncTestsLocalAwsMessaging.ReceiveMessageAsync_WaitsForMessages_ReturnsMessagesWhenAvailable (id= 6bf7f640-0cea-6db8-747f-8488910d0ed5, FQN= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsReceiveMessageAsyncTestsLocalAwsMessaging.ReceiveMessageAsync_WaitsForMessages_ReturnsMessagesWhenAvailable).
[12:29:53 VRB] Test Case : name= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsReceiveMessageAsyncTestsLocalAwsMessaging.ReceiveMessageAsync_Timeout_ReturnsEmptyList (id= 7f5a4e24-fa5a-7934-40b7-0cbb98dafef7, FQN= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsReceiveMessageAsyncTestsLocalAwsMessaging.ReceiveMessageAsync_Timeout_ReturnsEmptyList).
[12:29:53 VRB] Test Case : name= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsReceiveMessageAsyncTestsLocalAwsMessaging.ReceiveMessageAsync_CancellationRequested_ReturnsEmptyList (id= 4060ab4c-88d9-d279-bef0-a0cb5e6b3421, FQN= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsReceiveMessageAsyncTestsLocalAwsMessaging.ReceiveMessageAsync_CancellationRequested_ReturnsEmptyList).
[12:29:53 VRB] Test Case : name= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsReceiveMessageAsyncTestsLocalAwsMessaging.ReceiveMessageAsync_RespectVisibilityTimeout (id= 53d9d9cc-8bef-ed63-9722-fa45c76a58b8, FQN= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsReceiveMessageAsyncTestsLocalAwsMessaging.ReceiveMessageAsync_RespectVisibilityTimeout).
[12:29:53 VRB] Test Case : name= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsReceiveMessageAsyncTestsLocalAwsMessaging.ReceiveMessageAsync_DelayedMessageBecomesVisible (id= a17af0d8-adfd-01c5-b05d-3fc6c12b716e, FQN= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsReceiveMessageAsyncTestsLocalAwsMessaging.ReceiveMessageAsync_DelayedMessageBecomesVisible).
[12:29:53 VRB] Test Case : name= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsReceiveMessageAsyncTestsLocalAwsMessaging.ReceiveMessageAsync_MultipleMessagesWithDifferentDelays (id= ee445fd5-6e77-f1f6-4970-640144bd1aaf, FQN= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsReceiveMessageAsyncTestsLocalAwsMessaging.ReceiveMessageAsync_MultipleMessagesWithDifferentDelays).
[12:29:53 VRB] Test Case : name= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsReceiveMessageAsyncTestsLocalAwsMessaging.ReceiveMessageAsync_ApproximateReceiveCount_IncreasesWithEachReceive (id= d34f4a0e-e17d-05f6-0300-2f5c95829028, FQN= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsReceiveMessageAsyncTestsLocalAwsMessaging.ReceiveMessageAsync_ApproximateReceiveCount_IncreasesWithEachReceive).
[12:29:53 VRB] Test Case : name= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsReceiveMessageAsyncTestsLocalAwsMessaging.ReceiveMessageAsync_ApproximateReceiveCount_ResetAfterDelete (id= 73bfc5e6-3e4e-417e-4fcd-b5a85f1cf4fe, FQN= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsReceiveMessageAsyncTestsLocalAwsMessaging.ReceiveMessageAsync_ApproximateReceiveCount_ResetAfterDelete).
[12:29:53 VRB] Test Case : name= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsReceiveMessageAsyncTestsLocalAwsMessaging.ReceiveMessageAsync_ApproximateReceiveCount_MultipleMessages (id= 8563ebaa-b5c8-3f47-479d-bf42e11cda4e, FQN= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsReceiveMessageAsyncTestsLocalAwsMessaging.ReceiveMessageAsync_ApproximateReceiveCount_MultipleMessages).
[12:29:53 VRB] Test Case : name= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsReceiveMessageAsyncTestsLocalAwsMessaging.ReceiveMessageAsync_MessageMovedToErrorQueue_AfterMaxReceives (id= 46b15f21-5bee-762b-41e6-6ae4dddfa070, FQN= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsReceiveMessageAsyncTestsLocalAwsMessaging.ReceiveMessageAsync_MessageMovedToErrorQueue_AfterMaxReceives).
[12:29:53 VRB] Test Case : name= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsReceiveMessageAsyncTestsLocalAwsMessaging.ReceiveMessageAsync_MessageNotMovedToErrorQueue_IfDeletedBeforeMaxReceives (id= 4793e6ac-16f6-ca62-6488-14d803ed06f5, FQN= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsReceiveMessageAsyncTestsLocalAwsMessaging.ReceiveMessageAsync_MessageNotMovedToErrorQueue_IfDeletedBeforeMaxReceives).
[12:29:53 VRB] Test Case : name= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsReceiveMessageAsyncTestsLocalAwsMessaging.ReceiveMessageAsync_SpecificMessageSystemAttributes_OnlyRequestedAttributesReturned (id= 3d1ef0f0-88e7-a7d2-ded8-7731fd98433e, FQN= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsReceiveMessageAsyncTestsLocalAwsMessaging.ReceiveMessageAsync_SpecificMessageSystemAttributes_OnlyRequestedAttributesReturned).
[12:29:53 VRB] Test Case : name= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsReceiveMessageAsyncTestsLocalAwsMessaging.ReceiveMessageAsync_AllMessageSystemAttributes_AllAttributesReturned (id= dea740d7-f7c7-7e3a-0c85-ad2f64257fa4, FQN= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsReceiveMessageAsyncTestsLocalAwsMessaging.ReceiveMessageAsync_AllMessageSystemAttributes_AllAttributesReturned).
[12:29:53 VRB] Test Case : name= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsReceiveMessageAsyncTestsLocalAwsMessaging.ReceiveMessageAsync_NoMessageSystemAttributes_NoAttributesReturned (id= 894dbc04-3d92-b010-7227-f24d2d04e404, FQN= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsReceiveMessageAsyncTestsLocalAwsMessaging.ReceiveMessageAsync_NoMessageSystemAttributes_NoAttributesReturned).
[12:29:53 VRB] Test Case : name= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsReceiveMessageAsyncTestsLocalAwsMessaging.ReceiveMessageAsync_MultipleMessages_CorrectAttributesReturnedForEach (id= 59aa45a2-a823-3b2a-b8c2-9f777e74e526, FQN= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsReceiveMessageAsyncTestsLocalAwsMessaging.ReceiveMessageAsync_MultipleMessages_CorrectAttributesReturnedForEach).
[12:29:53 VRB] Test Case : name= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsReceiveMessageAsyncTestsLocalAwsMessaging.AddPermissionAsync_ValidRequest_AddsPermissionToPolicy (id= 3f30fa83-e63d-f119-502a-48b2f07aa019, FQN= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsReceiveMessageAsyncTestsLocalAwsMessaging.AddPermissionAsync_ValidRequest_AddsPermissionToPolicy).
[12:29:53 VRB] Test Case : name= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsReceiveMessageAsyncTestsLocalAwsMessaging.AddPermissionAsync_DuplicateLabel_ThrowsArgumentException (id= 3f68cd81-918f-9aa2-8adb-afa978ed3ed2, FQN= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsReceiveMessageAsyncTestsLocalAwsMessaging.AddPermissionAsync_DuplicateLabel_ThrowsArgumentException).
[12:29:53 VRB] Test Case : name= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsReceiveMessageAsyncTestsLocalAwsMessaging.AddPermissionAsync_QueueDoesNotExist_ThrowsQueueDoesNotExistException (id= 57862b12-a9c9-32c2-ef19-f21f8fd680a8, FQN= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsReceiveMessageAsyncTestsLocalAwsMessaging.AddPermissionAsync_QueueDoesNotExist_ThrowsQueueDoesNotExistException).
[12:29:53 VRB] Test Case : name= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsReceiveMessageAsyncTestsLocalAwsMessaging.RemovePermissionAsync_ValidRequest_RemovesPermissionFromPolicy (id= 71422a71-7031-ac3e-5c3a-a817170d8f33, FQN= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsReceiveMessageAsyncTestsLocalAwsMessaging.RemovePermissionAsync_ValidRequest_RemovesPermissionFromPolicy).
[12:29:53 VRB] Test Case : name= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsReceiveMessageAsyncTestsLocalAwsMessaging.RemovePermissionAsync_LabelDoesNotExist_ThrowsArgumentException (id= 89f03afa-48d8-d405-df35-9413bb2de5f0, FQN= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsReceiveMessageAsyncTestsLocalAwsMessaging.RemovePermissionAsync_LabelDoesNotExist_ThrowsArgumentException).
[12:29:53 VRB] Test Case : name= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsReceiveMessageAsyncTestsLocalAwsMessaging.RemovePermissionAsync_QueueDoesNotExist_ThrowsQueueDoesNotExistException (id= 89fbb2e1-d60b-d744-2a35-f9657cd25d88, FQN= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsReceiveMessageAsyncTestsLocalAwsMessaging.RemovePermissionAsync_QueueDoesNotExist_ThrowsQueueDoesNotExistException).
[12:29:53 VRB] Test Case : name= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsReceiveMessageAsyncTestsLocalAwsMessaging.AddAndRemovePermission_MultiplePermissions_ManagesCorrectly (id= e70048b8-9f99-74f1-3fc5-bad3c089ec06, FQN= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsReceiveMessageAsyncTestsLocalAwsMessaging.AddAndRemovePermission_MultiplePermissions_ManagesCorrectly).
[12:29:53 VRB] Test Case : name= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsReceiveMessageAsyncTestsLocalAwsMessaging.SendMessageAsync_MessageExceedsMaximumSize_ThrowsInvalidMessageContentsException (id= 0b7e3e59-45e7-3a7b-5e25-c917a9535109, FQN= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsReceiveMessageAsyncTestsLocalAwsMessaging.SendMessageAsync_MessageExceedsMaximumSize_ThrowsInvalidMessageContentsException).
[12:29:53 VRB] Test Case : name= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsReceiveMessageAsyncTestsLocalAwsMessaging.SendMessageAsync_MessageAttributeFullSizeCalculation_ThrowsException (id= eaf79006-844c-fc32-e41b-ffec0b7225d0, FQN= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsReceiveMessageAsyncTestsLocalAwsMessaging.SendMessageAsync_MessageAttributeFullSizeCalculation_ThrowsException).
[12:29:53 VRB] Test Case : name= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsReceiveMessageAsyncTestsLocalAwsMessaging.SendMessageAsync_MultipleAttributesExactlyAtLimit_Succeeds (id= 7b9f1871-43b7-f35b-8646-c917615f6ebb, FQN= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsReceiveMessageAsyncTestsLocalAwsMessaging.SendMessageAsync_MultipleAttributesExactlyAtLimit_Succeeds).
[12:29:53 VRB] Test Case : name= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsReceiveMessageAsyncTestsLocalAwsMessaging.SendMessageAsync_BinaryAttributeSize_Succeeds (id= 2d4546db-30e1-8428-0080-834cd872bdde, FQN= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsReceiveMessageAsyncTestsLocalAwsMessaging.SendMessageAsync_BinaryAttributeSize_Succeeds).
[12:29:53 VRB] Test Case : name= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsReceiveMessageAsyncTestsLocalAwsMessaging.SendMessageAsync_CustomAttributeTypeNames_CountTowardsLimit (id= 6c622fc3-ef3f-56bb-a7e2-e66d2edd2572, FQN= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsReceiveMessageAsyncTestsLocalAwsMessaging.SendMessageAsync_CustomAttributeTypeNames_CountTowardsLimit).
[12:29:53 VRB] Test Case : name= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsReceiveMessageAsyncTestsLocalAwsMessaging.SendMessageAsync_BatchWithAttributeSizeLimits_PartialBatchFailure (id= 77635f33-e8e6-ae80-1af2-43d1713581b6, FQN= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsReceiveMessageAsyncTestsLocalAwsMessaging.SendMessageAsync_BatchWithAttributeSizeLimits_PartialBatchFailure).
[12:29:53 VRB] Test Case : name= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsStartMessageMoveTaskAsyncLocalAwsMessagingTests.StartMessageMoveTaskAsync_ValidRequest_MovesMessage (id= 50b2662f-7b88-cbd3-529c-a86e7159e721, FQN= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsStartMessageMoveTaskAsyncLocalAwsMessagingTests.StartMessageMoveTaskAsync_ValidRequest_MovesMessage).
[12:29:53 VRB] Test Case : name= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsStartMessageMoveTaskAsyncLocalAwsMessagingTests.StartMessageMoveTaskAsync_NonDLQSource_ThrowsException (id= 4744fa2d-e345-900c-5bbb-9b139944b19d, FQN= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsStartMessageMoveTaskAsyncLocalAwsMessagingTests.StartMessageMoveTaskAsync_NonDLQSource_ThrowsException).
[12:29:53 VRB] Test Case : name= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsStartMessageMoveTaskAsyncLocalAwsMessagingTests.StartMessageMoveTaskAsync_InvalidDestinationQueue_ThrowsException (id= 4671cb84-65f7-28b2-7189-8f53855dedff, FQN= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsStartMessageMoveTaskAsyncLocalAwsMessagingTests.StartMessageMoveTaskAsync_InvalidDestinationQueue_ThrowsException).
[12:29:53 VRB] Test Case : name= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsStartMessageMoveTaskAsyncLocalAwsMessagingTests.StartMessageMoveTaskAsync_EmptyDLQ_NoMessagesMoved (id= c32bbf2f-aec2-edc0-9a80-ede468770913, FQN= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsStartMessageMoveTaskAsyncLocalAwsMessagingTests.StartMessageMoveTaskAsync_EmptyDLQ_NoMessagesMoved).
[12:29:53 VRB] Test Case : name= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsStartMessageMoveTaskAsyncLocalAwsMessagingTests.StartMessageMoveTaskAsync_MaxNumberOfMessagesPerSecond_RespectsLimit (id= ea654951-f2d2-6254-d22c-7b5226356aa0, FQN= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsStartMessageMoveTaskAsyncLocalAwsMessagingTests.StartMessageMoveTaskAsync_MaxNumberOfMessagesPerSecond_RespectsLimit).
[12:29:53 VRB] Test Case : name= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsStartMessageMoveTaskAsyncLocalAwsMessagingTests.StartMessageMoveTaskAsync_NoDestinationArn_MovesToOriginalSource (id= 5f73f6af-2660-46bd-7b9b-fee4a71680a9, FQN= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsStartMessageMoveTaskAsyncLocalAwsMessagingTests.StartMessageMoveTaskAsync_NoDestinationArn_MovesToOriginalSource).
[12:29:53 VRB] Test Case : name= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsStartMessageMoveTaskAsyncLocalAwsMessagingTests.CancelMessageMoveTaskAsync_ValidTaskHandle_StopsTask (id= 2f1e3e45-a983-0885-e7fe-2194c480c4aa, FQN= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsStartMessageMoveTaskAsyncLocalAwsMessagingTests.CancelMessageMoveTaskAsync_ValidTaskHandle_StopsTask).
[12:29:53 VRB] Test Case : name= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsStartMessageMoveTaskAsyncLocalAwsMessagingTests.StartingTwoMessageMoveTasksForTheSameQueue_Throws (id= 62243d60-95e9-5b1b-1917-3cb6c24075b3, FQN= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsStartMessageMoveTaskAsyncLocalAwsMessagingTests.StartingTwoMessageMoveTasksForTheSameQueue_Throws).
[12:29:53 VRB] Test Case : name= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsStartMessageMoveTaskAsyncLocalAwsMessagingTests.ListMessageMoveTasks_ReturnsAllActiveTasks (id= 99c7563c-c02c-4d57-d0eb-bec436e193cb, FQN= LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsStartMessageMoveTaskAsyncLocalAwsMessagingTests.ListMessageMoveTasks_ReturnsAllActiveTasks).
[12:29:54 WRN] No test detected for project '/Users/stuart.lang/RiderProjects/ConsoleApp9/tests/LocalSqsSnsMessaging.Tests.Verification/LocalSqsSnsMessaging.Tests.Verification.csproj'. No cause identified.
[12:29:54 INF] Number of tests found: 80 for project /Users/stuart.lang/RiderProjects/ConsoleApp9/src/LocalSqsSnsMessaging/LocalSqsSnsMessaging.csproj. Initial test run started.
[12:29:54 VRB] Runner 1: testing assembly Buildalyzer.AnalyzerResult.
[12:29:54 VRB] Runner 1: [Error] Testhost process for source(s) '/Users/stuart.lang/RiderProjects/ConsoleApp9/artifacts/bin/LocalSqsSnsMessaging.Tests.Shared/debug/LocalSqsSnsMessaging.Tests.Shared.dll' exited with error: . Please check the diagnostic logs for more information.
[12:29:54 VRB] Runner 1: [Error] Testhost process for source(s) '/Users/stuart.lang/RiderProjects/ConsoleApp9/artifacts/bin/LocalSqsSnsMessaging.Tests.Shared/debug/LocalSqsSnsMessaging.Tests.Shared.dll' exited with error: . Please check the diagnostic logs for more information.
[12:29:54 DBG] Runner 1: Received testrun complete.
[12:29:54 DBG] Runner 1: Test session finished.
[12:29:54 VRB] Runner 1: testing assembly Buildalyzer.AnalyzerResult.
[12:29:54 VRB] Runner 1: [Debug] [xUnit.net 00:00:00.00] xUnit.net VSTest Adapter v3.0.0-pre.42+8174918c5e (64-bit .NET 8.0.8)
[12:29:54 VRB] Runner 1: [Debug] [xUnit.net 00:00:00.11]   Discovering: LocalSqsSnsMessaging.Tests
[12:29:54 VRB] Runner 1: [Debug] [xUnit.net 00:00:00.26]   Discovered:  LocalSqsSnsMessaging.Tests
[12:29:55 VRB] Runner 1: [Debug] [xUnit.net 00:00:00.40]   Starting:    LocalSqsSnsMessaging.Tests
[12:29:55 VRB] Runner 1: [Debug] [xUnit.net 00:00:00.72]   Finished:    LocalSqsSnsMessaging.Tests
[12:29:55 DBG] Runner 1: Received testrun complete.
[12:29:55 DBG] Runner 1: Test session finished.
[12:29:55 VRB] Runner 1: testing assembly Buildalyzer.AnalyzerResult.
[12:29:55 VRB] Runner 1: [Debug] [xUnit.net 00:00:00.00] xUnit.net VSTest Adapter v3.0.0-pre.42+8174918c5e (64-bit .NET 8.0.8)
[12:29:55 VRB] Runner 1: [Debug] [xUnit.net 00:00:00.11]   Discovering: LocalSqsSnsMessaging.Tests.Verification
[12:29:55 VRB] Runner 1: [Debug] [xUnit.net 00:00:00.25]   Discovered:  LocalSqsSnsMessaging.Tests.Verification
[12:29:55 VRB] Runner 1: [Warning] No test matches the given testcase filter `(FullyQualifiedName~LocalSqsSnsMessaging.Tests.LocalAwsMessaging)` in /Users/stuart.lang/RiderProjects/ConsoleApp9/artifacts/bin/LocalSqsSnsMessaging.Tests.Verification/debug/LocalSqsSnsMessaging.Tests.Verification.dll
[12:29:56 DBG] Runner 1: Received testrun complete.
[12:29:56 DBG] Runner 1: Test session finished.
[12:29:56 DBG] Initial test run output: .
[12:29:56 DBG] Mutating /Users/stuart.lang/RiderProjects/ConsoleApp9/src/LocalSqsSnsMessaging/InMemoryAwsBus.cs
[12:29:56 DBG] Mutant 0 created "000000000000" -> "" using Stryker.Core.Mutators.StringMutator
[12:29:56 DBG] Mutant 1 created "us-east-1" -> "" using Stryker.Core.Mutators.StringMutator
[12:29:56 DBG] Mutating /Users/stuart.lang/RiderProjects/ConsoleApp9/src/LocalSqsSnsMessaging/InMemoryAwsBusExtensions.cs
[12:29:56 DBG] Mutant 2 created {
        return new InMemorySqsClient(bus);
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 3 created {
        return new InMemorySnsClient(bus);
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutating /Users/stuart.lang/RiderProjects/ConsoleApp9/src/LocalSqsSnsMessaging/PaginatedList.cs
[12:29:56 DBG] Mutant 4 created {
        _items = items.ToList();
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 5 created {
        ArgumentNullException.ThrowIfNull(tokenGenerator);
        ArgumentOutOfRangeException.ThrowIfLessThanOrEqual(pageSize, 0, "Page size must be positive.");
        
        var query = filter != null ? _items.Where(filter).ToList() : _items;

        var startIndex = 0;
        if (!string.IsNullOrEmpty(nextToken))
        {
            startIndex = query.FindIndex(item => tokenGenerator(item) == nextToken);
            if (startIndex == -1) startIndex = 0;  // Token not found, start from beginning
        }

        var page = query.Skip(startIndex).Take(pageSize).ToList();

        string? newNextToken = null;
        if (startIndex + pageSize < query.Count)
        {
            newNextToken = tokenGenerator(query.ElementAt(startIndex + pageSize));
        }

        return (page, newNextToken);
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 6 created ArgumentNullException.ThrowIfNull(tokenGenerator); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:56 DBG] Mutant 7 created ArgumentOutOfRangeException.ThrowIfLessThanOrEqual(pageSize, 0, "Page size must be positive."); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:56 DBG] Mutant 8 created "Page size must be positive." -> "" using Stryker.Core.Mutators.StringMutator
[12:29:56 DBG] Mutant 9 created filter != null ? _items.Where(filter).ToList() : _items -> (true?_items.Where(filter).ToList() :_items) using Stryker.Core.Mutators.ConditionalExpressionMutator
[12:29:56 DBG] Mutant 10 created filter != null ? _items.Where(filter).ToList() : _items -> (false?_items.Where(filter).ToList() :_items) using Stryker.Core.Mutators.ConditionalExpressionMutator
[12:29:56 DBG] Mutant 11 created filter != null -> filter == null using Stryker.Core.Mutators.BinaryExpressionMutator
[12:29:56 DBG] Mutant 12 created !string.IsNullOrEmpty(nextToken) -> string.IsNullOrEmpty(nextToken) using Stryker.Core.Mutators.PrefixUnaryMutator
[12:29:56 DBG] Mutant 13 created string.IsNullOrEmpty(nextToken) -> (nextToken!=null) using Stryker.Core.Mutators.StringEmptyMutator
[12:29:56 DBG] Mutant 14 created string.IsNullOrEmpty(nextToken) -> (nextToken!="") using Stryker.Core.Mutators.StringEmptyMutator
[12:29:56 DBG] Mutant 15 created {
            startIndex = query.FindIndex(item => tokenGenerator(item) == nextToken);
            if (startIndex == -1) startIndex = 0;  // Token not found, start from beginning
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 16 created tokenGenerator(item) == nextToken -> tokenGenerator(item) != nextToken using Stryker.Core.Mutators.BinaryExpressionMutator
[12:29:56 DBG] Mutant 17 created startIndex == -1 -> startIndex != -1 using Stryker.Core.Mutators.BinaryExpressionMutator
[12:29:56 DBG] Mutant 18 created -1 -> +1 using Stryker.Core.Mutators.PrefixUnaryMutator
[12:29:56 DBG] Mutant 19 created query.Skip(startIndex).Take -> query.Skip(startIndex).Skip using Stryker.Core.Mutators.LinqMutator
[12:29:56 DBG] Mutant 20 created query.Skip -> query.Take using Stryker.Core.Mutators.LinqMutator
[12:29:56 DBG] Mutant 21 created startIndex + pageSize < query.Count -> startIndex + pageSize > query.Count using Stryker.Core.Mutators.BinaryExpressionMutator
[12:29:56 DBG] Mutant 22 created startIndex + pageSize < query.Count -> startIndex + pageSize <= query.Count using Stryker.Core.Mutators.BinaryExpressionMutator
[12:29:56 DBG] Mutant 23 created startIndex + pageSize < query.Count -> !(startIndex + pageSize < query.Count) using Stryker.Core.Mutators.NegateConditionMutator
[12:29:56 DBG] Mutant 24 created startIndex + pageSize -> startIndex - pageSize using Stryker.Core.Mutators.BinaryExpressionMutator
[12:29:56 DBG] Mutant 25 created query.Count -> query.Sum using Stryker.Core.Mutators.LinqMutator
[12:29:56 DBG] Mutant 26 created {
            newNextToken = tokenGenerator(query.ElementAt(startIndex + pageSize));
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 27 created startIndex + pageSize -> startIndex - pageSize using Stryker.Core.Mutators.BinaryExpressionMutator
[12:29:56 DBG] Mutant 28 created {
        var index = 0;
        foreach (var item in source)
        {
            if (predicate(item)) return index;
            index++;
        }
        return -1;
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 29 created {
            if (predicate(item)) return index;
            index++;
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 30 created predicate(item) -> !(predicate(item)) using Stryker.Core.Mutators.NegateConditionMutator
[12:29:56 DBG] Mutant 31 created index++; -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:56 DBG] Mutant 32 created index++ -> index-- using Stryker.Core.Mutators.PostfixUnaryMutator
[12:29:56 DBG] Mutant 33 created -1 -> +1 using Stryker.Core.Mutators.PrefixUnaryMutator
[12:29:56 DBG] Mutating /Users/stuart.lang/RiderProjects/ConsoleApp9/src/LocalSqsSnsMessaging/ResponseHelper.cs
[12:29:56 DBG] Mutant 34 created {
        response.HttpStatusCode = HttpStatusCode.OK;
        response.ResponseMetadata = new ResponseMetadata
        {
            RequestId = Guid.NewGuid().ToString()
        };

        response.ContentLength = 0L;

        return response;
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 35 created new ResponseMetadata
        {
            RequestId = Guid.NewGuid().ToString()
        } -> new ResponseMetadata
{} using Stryker.Core.Mutators.ObjectCreationMutator
[12:29:56 DBG] Mutating /Users/stuart.lang/RiderProjects/ConsoleApp9/src/LocalSqsSnsMessaging/SnsClient/InMemorySnsClient.cs
[12:29:56 DBG] Mutant 36 created {
        _bus = bus;
        _paginators = new(() => GetPaginatorFactory(this));
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 37 created {
        ArgumentNullException.ThrowIfNull(sqsClient);
        
        // Get the queue's existing policy
        var queueAttributes = await sqsClient.GetAttributesAsync(sqsQueueUrl).ConfigureAwait(true);
        
        var sqsQueueArn = queueAttributes["QueueArn"];

        string? policyStr = null;
        if(queueAttributes.TryGetValue("Policy", out var attribute))
        {
            policyStr = attribute;
        }
        var policy = string.IsNullOrEmpty(policyStr) ? new Policy() : Policy.FromJson(policyStr);

        if (!HasSqsPermission(policy, topicArn, sqsQueueArn))
        {
            AddSqsPermission(policy, topicArn, sqsQueueArn);
        }

        var response = await SubscribeAsync(new SubscribeRequest
        {
            TopicArn = topicArn,
            Protocol = "sqs",
            Endpoint = sqsQueueArn,
        }).ConfigureAwait(true);

        var setAttributes = new Dictionary<string, string> { { "Policy", policy.ToJson() } };
        await sqsClient.SetAttributesAsync(sqsQueueUrl, setAttributes).ConfigureAwait(true);

        return response.SubscriptionArn;
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 38 created ArgumentNullException.ThrowIfNull(sqsClient); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:56 DBG] Mutant 39 created true -> false using Stryker.Core.Mutators.BooleanMutator
[12:29:56 DBG] Mutant 40 created "QueueArn" -> "" using Stryker.Core.Mutators.StringMutator
[12:29:56 DBG] Mutant 41 created queueAttributes.TryGetValue("Policy", out var attribute) -> !(queueAttributes.TryGetValue("Policy", out var attribute)) using Stryker.Core.Mutators.NegateConditionMutator
[12:29:56 DBG] Mutant 42 created "Policy" -> "" using Stryker.Core.Mutators.StringMutator
[12:29:56 DBG] Mutant 43 created {
            policyStr = attribute;
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 44 created string.IsNullOrEmpty(policyStr) ? new Policy() : Policy.FromJson(policyStr) -> (true?new Policy() :Policy.FromJson(policyStr)) using Stryker.Core.Mutators.ConditionalExpressionMutator
[12:29:56 DBG] Mutant 45 created string.IsNullOrEmpty(policyStr) ? new Policy() : Policy.FromJson(policyStr) -> (false?new Policy() :Policy.FromJson(policyStr)) using Stryker.Core.Mutators.ConditionalExpressionMutator
[12:29:56 DBG] Mutant 46 created string.IsNullOrEmpty(policyStr) -> (policyStr!=null) using Stryker.Core.Mutators.StringEmptyMutator
[12:29:56 DBG] Mutant 47 created string.IsNullOrEmpty(policyStr) -> (policyStr!="") using Stryker.Core.Mutators.StringEmptyMutator
[12:29:56 DBG] Mutant 48 created !HasSqsPermission(policy, topicArn, sqsQueueArn) -> HasSqsPermission(policy, topicArn, sqsQueueArn) using Stryker.Core.Mutators.PrefixUnaryMutator
[12:29:56 DBG] Mutant 49 created {
            AddSqsPermission(policy, topicArn, sqsQueueArn);
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 50 created AddSqsPermission(policy, topicArn, sqsQueueArn); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:56 DBG] Mutant 51 created new SubscribeRequest
        {
            TopicArn = topicArn,
            Protocol = "sqs",
            Endpoint = sqsQueueArn,
        } -> new SubscribeRequest
{} using Stryker.Core.Mutators.ObjectCreationMutator
[12:29:56 DBG] Mutant 52 created "sqs" -> "" using Stryker.Core.Mutators.StringMutator
[12:29:56 DBG] Mutant 53 created true -> false using Stryker.Core.Mutators.BooleanMutator
[12:29:56 DBG] Mutant 54 created new Dictionary<string, string> { { "Policy", policy.ToJson() } } -> new Dictionary<string, string> {} using Stryker.Core.Mutators.ObjectCreationMutator
[12:29:56 DBG] Mutant 55 created "Policy" -> "" using Stryker.Core.Mutators.StringMutator
[12:29:56 DBG] Mutant 56 created await sqsClient.SetAttributesAsync(sqsQueueUrl, setAttributes).ConfigureAwait(true); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:56 DBG] Mutant 57 created true -> false using Stryker.Core.Mutators.BooleanMutator
[12:29:56 DBG] Mutant 58 created {
        ArgumentNullException.ThrowIfNull(topicArns);
        
        Dictionary<string, string> topicSubscriptionMapping = new();
        foreach (var topicArn in topicArns)
        {
            var subscriptionArn = await SubscribeQueueAsync(topicArn, sqsClient, sqsQueueUrl).ConfigureAwait(true);
            topicSubscriptionMapping.Add(topicArn, subscriptionArn);
        }

        return topicSubscriptionMapping;
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 59 created ArgumentNullException.ThrowIfNull(topicArns); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:56 DBG] Mutant 60 created {
            var subscriptionArn = await SubscribeQueueAsync(topicArn, sqsClient, sqsQueueUrl).ConfigureAwait(true);
            topicSubscriptionMapping.Add(topicArn, subscriptionArn);
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 61 created true -> false using Stryker.Core.Mutators.BooleanMutator
[12:29:56 DBG] Mutant 62 created topicSubscriptionMapping.Add(topicArn, subscriptionArn); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:56 DBG] Mutant 63 created {
        if (!_bus.Topics.TryGetValue(topicName, out var topic))
        {
            return Task.FromResult<Topic?>(null);
        }

        return Task.FromResult<Topic?>(new Topic
        {
            TopicArn = topic.Arn
        });
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 64 created !_bus.Topics.TryGetValue(topicName, out var topic) -> _bus.Topics.TryGetValue(topicName, out var topic) using Stryker.Core.Mutators.PrefixUnaryMutator
[12:29:56 DBG] Mutant 65 created {
            return Task.FromResult<Topic?>(null);
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 66 created new Topic
        {
            TopicArn = topic.Arn
        } -> new Topic
{} using Stryker.Core.Mutators.ObjectCreationMutator
[12:29:56 DBG] Mutant 67 created {
        return CreateTopicAsync(new CreateTopicRequest { Name = name }, cancellationToken);
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 68 created new CreateTopicRequest { Name = name } -> new CreateTopicRequest {} using Stryker.Core.Mutators.ObjectCreationMutator
[12:29:56 DBG] Mutant 69 created {
        ArgumentNullException.ThrowIfNull(request);
        
        var topicArn = $"arn:aws:sns:{_bus.CurrentRegion}:{_bus.CurrentAccountId}:{request.Name}";
        var topic = new SnsTopicResource
        {
            Name = request.Name,
            Region = _bus.CurrentRegion,
            Arn = topicArn
        };

        _bus.Topics.TryAdd(request.Name, topic);

        return Task.FromResult(new CreateTopicResponse
        {
            TopicArn = topicArn
        }.SetCommonProperties());
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 70 created ArgumentNullException.ThrowIfNull(request); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:56 DBG] Mutant 71 created $"arn:aws:sns:{_bus.CurrentRegion}:{_bus.CurrentAccountId}:{request.Name}" -> $"" using Stryker.Core.Mutators.InterpolatedStringMutator
[12:29:56 DBG] Mutant 72 created new SnsTopicResource
        {
            Name = request.Name,
            Region = _bus.CurrentRegion,
            Arn = topicArn
        } -> new SnsTopicResource
{} using Stryker.Core.Mutators.ObjectCreationMutator
[12:29:56 DBG] Mutant 73 created _bus.Topics.TryAdd(request.Name, topic); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:56 DBG] Mutant 74 created new CreateTopicResponse
        {
            TopicArn = topicArn
        } -> new CreateTopicResponse
{} using Stryker.Core.Mutators.ObjectCreationMutator
[12:29:56 DBG] Mutant 75 created {
        return DeleteTopicAsync(new DeleteTopicRequest { TopicArn = topicArn }, cancellationToken);
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 76 created new DeleteTopicRequest { TopicArn = topicArn } -> new DeleteTopicRequest {} using Stryker.Core.Mutators.ObjectCreationMutator
[12:29:56 DBG] Mutant 77 created {
        ArgumentNullException.ThrowIfNull(request);
        
        var topicName = GetTopicNameByArn(request.TopicArn);
        _bus.Topics.TryRemove(topicName, out _);

        return Task.FromResult(new DeleteTopicResponse().SetCommonProperties());
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 78 created ArgumentNullException.ThrowIfNull(request); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:56 DBG] Mutant 79 created {
        return GetSubscriptionAttributesAsync(new GetSubscriptionAttributesRequest { SubscriptionArn = subscriptionArn },
            cancellationToken);
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 80 created new GetSubscriptionAttributesRequest { SubscriptionArn = subscriptionArn } -> new GetSubscriptionAttributesRequest {} using Stryker.Core.Mutators.ObjectCreationMutator
[12:29:56 DBG] Mutant 81 created {
        ArgumentNullException.ThrowIfNull(request);
        
        if (!_bus.Subscriptions.TryGetValue(request.SubscriptionArn, out var subscription))
        {
            throw new NotFoundException("Subscription not found.");
        }

        return Task.FromResult(new GetSubscriptionAttributesResponse
        {
            Attributes = new Dictionary<string, string>
            {
                ["SubscriptionArn"] = subscription.SubscriptionArn,
                ["TopicArn"] = subscription.TopicArn,
                ["Protocol"] = subscription.Protocol,
                ["Endpoint"] = subscription.EndPoint,
                ["Owner"] = _bus.CurrentAccountId,
                ["ConfirmationWasAuthenticated"] = "false",
                ["IsAuthenticated"] = "false",
                ["PendingConfirmation"] = "false",
                ["RawMessageDelivery"] = subscription.Raw.ToString(),
                ["FilterPolicy"] = subscription.FilterPolicy
            }
        }.SetCommonProperties());
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 82 created ArgumentNullException.ThrowIfNull(request); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:56 DBG] Mutant 83 created !_bus.Subscriptions.TryGetValue(request.SubscriptionArn, out var subscription) -> _bus.Subscriptions.TryGetValue(request.SubscriptionArn, out var subscription) using Stryker.Core.Mutators.PrefixUnaryMutator
[12:29:56 DBG] Mutant 84 created {
            throw new NotFoundException("Subscription not found.");
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 85 created throw new NotFoundException("Subscription not found."); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:56 DBG] Mutant 86 created "Subscription not found." -> "" using Stryker.Core.Mutators.StringMutator
[12:29:56 DBG] Mutant 87 created new GetSubscriptionAttributesResponse
        {
            Attributes = new Dictionary<string, string>
            {
                ["SubscriptionArn"] = subscription.SubscriptionArn,
                ["TopicArn"] = subscription.TopicArn,
                ["Protocol"] = subscription.Protocol,
                ["Endpoint"] = subscription.EndPoint,
                ["Owner"] = _bus.CurrentAccountId,
                ["ConfirmationWasAuthenticated"] = "false",
                ["IsAuthenticated"] = "false",
                ["PendingConfirmation"] = "false",
                ["RawMessageDelivery"] = subscription.Raw.ToString(),
                ["FilterPolicy"] = subscription.FilterPolicy
            }
        } -> new GetSubscriptionAttributesResponse
{} using Stryker.Core.Mutators.ObjectCreationMutator
[12:29:56 DBG] Mutant 88 created new Dictionary<string, string>
            {
                ["SubscriptionArn"] = subscription.SubscriptionArn,
                ["TopicArn"] = subscription.TopicArn,
                ["Protocol"] = subscription.Protocol,
                ["Endpoint"] = subscription.EndPoint,
                ["Owner"] = _bus.CurrentAccountId,
                ["ConfirmationWasAuthenticated"] = "false",
                ["IsAuthenticated"] = "false",
                ["PendingConfirmation"] = "false",
                ["RawMessageDelivery"] = subscription.Raw.ToString(),
                ["FilterPolicy"] = subscription.FilterPolicy
            } -> new Dictionary<string, string>
{} using Stryker.Core.Mutators.ObjectCreationMutator
[12:29:56 DBG] Mutant 89 created "SubscriptionArn" -> "" using Stryker.Core.Mutators.StringMutator
[12:29:56 DBG] Mutant 90 created "TopicArn" -> "" using Stryker.Core.Mutators.StringMutator
[12:29:56 DBG] Mutant 91 created "Protocol" -> "" using Stryker.Core.Mutators.StringMutator
[12:29:56 DBG] Mutant 92 created "Endpoint" -> "" using Stryker.Core.Mutators.StringMutator
[12:29:56 DBG] Mutant 93 created "Owner" -> "" using Stryker.Core.Mutators.StringMutator
[12:29:56 DBG] Mutant 94 created "ConfirmationWasAuthenticated" -> "" using Stryker.Core.Mutators.StringMutator
[12:29:56 DBG] Mutant 95 created "false" -> "" using Stryker.Core.Mutators.StringMutator
[12:29:56 DBG] Mutant 96 created "IsAuthenticated" -> "" using Stryker.Core.Mutators.StringMutator
[12:29:56 DBG] Mutant 97 created "false" -> "" using Stryker.Core.Mutators.StringMutator
[12:29:56 DBG] Mutant 98 created "PendingConfirmation" -> "" using Stryker.Core.Mutators.StringMutator
[12:29:56 DBG] Mutant 99 created "false" -> "" using Stryker.Core.Mutators.StringMutator
[12:29:56 DBG] Mutant 100 created "RawMessageDelivery" -> "" using Stryker.Core.Mutators.StringMutator
[12:29:56 DBG] Mutant 101 created "FilterPolicy" -> "" using Stryker.Core.Mutators.StringMutator
[12:29:56 DBG] Mutant 102 created {
        return GetTopicAttributesAsync(new GetTopicAttributesRequest { TopicArn = topicArn }, cancellationToken);
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 103 created new GetTopicAttributesRequest { TopicArn = topicArn } -> new GetTopicAttributesRequest {} using Stryker.Core.Mutators.ObjectCreationMutator
[12:29:56 DBG] Mutant 104 created {
        ArgumentNullException.ThrowIfNull(request);
        
        var topicName = GetTopicNameByArn(request.TopicArn);
        if (!_bus.Topics.TryGetValue(topicName, out var topic))
        {
            throw new NotFoundException("Topic not found.");
        }

        return Task.FromResult(new GetTopicAttributesResponse
        {
            Attributes = topic.Attributes
        }.SetCommonProperties());
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 105 created ArgumentNullException.ThrowIfNull(request); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:56 DBG] Mutant 106 created !_bus.Topics.TryGetValue(topicName, out var topic) -> _bus.Topics.TryGetValue(topicName, out var topic) using Stryker.Core.Mutators.PrefixUnaryMutator
[12:29:56 DBG] Mutant 107 created {
            throw new NotFoundException("Topic not found.");
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 108 created throw new NotFoundException("Topic not found."); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:56 DBG] Mutant 109 created "Topic not found." -> "" using Stryker.Core.Mutators.StringMutator
[12:29:56 DBG] Mutant 110 created new GetTopicAttributesResponse
        {
            Attributes = topic.Attributes
        } -> new GetTopicAttributesResponse
{} using Stryker.Core.Mutators.ObjectCreationMutator
[12:29:56 DBG] Mutant 111 created {
        var subscriptions = _bus.Subscriptions.Values.ToList();
        return Task.FromResult(new ListSubscriptionsResponse
        {
            Subscriptions = subscriptions.Select(s => new Subscription
            {
                SubscriptionArn = s.SubscriptionArn,
                TopicArn = s.TopicArn,
                Protocol = s.Protocol,
                Endpoint = s.EndPoint,
                Owner = _bus.CurrentAccountId,
            }).ToList()
        }.SetCommonProperties());
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 112 created new ListSubscriptionsResponse
        {
            Subscriptions = subscriptions.Select(s => new Subscription
            {
                SubscriptionArn = s.SubscriptionArn,
                TopicArn = s.TopicArn,
                Protocol = s.Protocol,
                Endpoint = s.EndPoint,
                Owner = _bus.CurrentAccountId,
            }).ToList()
        } -> new ListSubscriptionsResponse
{} using Stryker.Core.Mutators.ObjectCreationMutator
[12:29:56 DBG] Mutant 113 created new Subscription
            {
                SubscriptionArn = s.SubscriptionArn,
                TopicArn = s.TopicArn,
                Protocol = s.Protocol,
                Endpoint = s.EndPoint,
                Owner = _bus.CurrentAccountId,
            } -> new Subscription
{} using Stryker.Core.Mutators.ObjectCreationMutator
[12:29:56 DBG] Mutant 114 created {
        return ListSubscriptionsAsync(new ListSubscriptionsRequest { NextToken = nextToken }, cancellationToken);
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 115 created new ListSubscriptionsRequest { NextToken = nextToken } -> new ListSubscriptionsRequest {} using Stryker.Core.Mutators.ObjectCreationMutator
[12:29:56 DBG] Mutant 116 created {
        ArgumentNullException.ThrowIfNull(request);
        
        var allSubscriptions = _bus.Subscriptions.Values
            .Select(s => new Subscription
            {
                SubscriptionArn = s.SubscriptionArn,
                TopicArn = s.TopicArn,
                Protocol = s.Protocol,
                Endpoint = s.EndPoint,
                Owner = _bus.CurrentAccountId,
            }).ToList();

        var pagedSubscriptions = new PaginatedList<Subscription>(allSubscriptions);

        var (items, nextToken) = pagedSubscriptions.GetPage(
            TokenGenerator, 100, request.NextToken);
        
        return Task.FromResult(new ListSubscriptionsResponse
        {
            Subscriptions = items,
            NextToken = nextToken
        }.SetCommonProperties());

        static string TokenGenerator(Subscription x)
        {
            return Convert.ToBase64String(Encoding.UTF8.GetBytes(x.SubscriptionArn));
        }
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 117 created ArgumentNullException.ThrowIfNull(request); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:56 DBG] Mutant 118 created new Subscription
            {
                SubscriptionArn = s.SubscriptionArn,
                TopicArn = s.TopicArn,
                Protocol = s.Protocol,
                Endpoint = s.EndPoint,
                Owner = _bus.CurrentAccountId,
            } -> new Subscription
{} using Stryker.Core.Mutators.ObjectCreationMutator
[12:29:56 DBG] Mutant 119 created new ListSubscriptionsResponse
        {
            Subscriptions = items,
            NextToken = nextToken
        } -> new ListSubscriptionsResponse
{} using Stryker.Core.Mutators.ObjectCreationMutator
[12:29:56 DBG] Mutant 120 created {
            return Convert.ToBase64String(Encoding.UTF8.GetBytes(x.SubscriptionArn));
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 121 created {
        return ListSubscriptionsByTopicAsync(new ListSubscriptionsByTopicRequest
        {
            TopicArn = topicArn,
            NextToken = nextToken
        }, cancellationToken);
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 122 created new ListSubscriptionsByTopicRequest
        {
            TopicArn = topicArn,
            NextToken = nextToken
        } -> new ListSubscriptionsByTopicRequest
{} using Stryker.Core.Mutators.ObjectCreationMutator
[12:29:56 DBG] Mutant 123 created {
        return ListSubscriptionsByTopicAsync(new ListSubscriptionsByTopicRequest { TopicArn = topicArn },
            cancellationToken);
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 124 created new ListSubscriptionsByTopicRequest { TopicArn = topicArn } -> new ListSubscriptionsByTopicRequest {} using Stryker.Core.Mutators.ObjectCreationMutator
[12:29:56 DBG] Mutant 125 created {
        ArgumentNullException.ThrowIfNull(request);
        
        var topicName = GetTopicNameByArn(request.TopicArn);
        if (!_bus.Topics.TryGetValue(topicName, out _))
        {
            throw new NotFoundException("Topic not found.");
        }

        var allSubscriptions = _bus.Subscriptions.Values
            .Where(s => string.Equals(s.TopicArn, request.TopicArn, StringComparison.OrdinalIgnoreCase))
            .Select(s => new Subscription
            {
                SubscriptionArn = s.SubscriptionArn,
                TopicArn = s.TopicArn,
                Protocol = s.Protocol,
                Endpoint = s.EndPoint,
                Owner = _bus.CurrentAccountId,
            })
            .ToList();

        var pagedSubscriptions = new PaginatedList<Subscription>(allSubscriptions);

        var (items, nextToken) = pagedSubscriptions.GetPage(
            TokenGenerator, 100, request.NextToken);

        return Task.FromResult(new ListSubscriptionsByTopicResponse
        {
            Subscriptions = items,
            NextToken = nextToken
        }.SetCommonProperties());

        static string TokenGenerator(Subscription x)
        {
            return Convert.ToBase64String(Encoding.UTF8.GetBytes(x.SubscriptionArn));
        }
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 126 created ArgumentNullException.ThrowIfNull(request); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:56 DBG] Mutant 127 created !_bus.Topics.TryGetValue(topicName, out _) -> _bus.Topics.TryGetValue(topicName, out _) using Stryker.Core.Mutators.PrefixUnaryMutator
[12:29:56 DBG] Mutant 128 created {
            throw new NotFoundException("Topic not found.");
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 129 created throw new NotFoundException("Topic not found."); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:56 DBG] Mutant 130 created "Topic not found." -> "" using Stryker.Core.Mutators.StringMutator
[12:29:56 DBG] Mutant 131 created new Subscription
            {
                SubscriptionArn = s.SubscriptionArn,
                TopicArn = s.TopicArn,
                Protocol = s.Protocol,
                Endpoint = s.EndPoint,
                Owner = _bus.CurrentAccountId,
            } -> new Subscription
{} using Stryker.Core.Mutators.ObjectCreationMutator
[12:29:56 DBG] Mutant 132 created new ListSubscriptionsByTopicResponse
        {
            Subscriptions = items,
            NextToken = nextToken
        } -> new ListSubscriptionsByTopicResponse
{} using Stryker.Core.Mutators.ObjectCreationMutator
[12:29:56 DBG] Mutant 133 created {
            return Convert.ToBase64String(Encoding.UTF8.GetBytes(x.SubscriptionArn));
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 134 created {
        ArgumentNullException.ThrowIfNull(request);
        
        var topicName = GetTopicNameByArn(request.ResourceArn);
        if (!_bus.Topics.TryGetValue(topicName, out var topic))
        {
            throw new ResourceNotFoundException("Topic not found.");
        }
        
        var tags = topic.Tags.Select(t => new Tag { Key = t.Key, Value = t.Value }).ToList();
        
        return Task.FromResult(new ListTagsForResourceResponse
        {
            Tags = tags
        }.SetCommonProperties());
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 135 created ArgumentNullException.ThrowIfNull(request); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:56 DBG] Mutant 136 created !_bus.Topics.TryGetValue(topicName, out var topic) -> _bus.Topics.TryGetValue(topicName, out var topic) using Stryker.Core.Mutators.PrefixUnaryMutator
[12:29:56 DBG] Mutant 137 created {
            throw new ResourceNotFoundException("Topic not found.");
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 138 created throw new ResourceNotFoundException("Topic not found."); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:56 DBG] Mutant 139 created "Topic not found." -> "" using Stryker.Core.Mutators.StringMutator
[12:29:56 DBG] Mutant 140 created new Tag { Key = t.Key, Value = t.Value } -> new Tag {} using Stryker.Core.Mutators.ObjectCreationMutator
[12:29:56 DBG] Mutant 141 created new ListTagsForResourceResponse
        {
            Tags = tags
        } -> new ListTagsForResourceResponse
{} using Stryker.Core.Mutators.ObjectCreationMutator
[12:29:56 DBG] Mutant 142 created {
        return Task.FromResult(new ListTopicsResponse
        {
            Topics = _bus.Topics.Values.Select(t => new Topic
            {
                TopicArn = t.Arn
            }).ToList()
        }.SetCommonProperties());
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 143 created new ListTopicsResponse
        {
            Topics = _bus.Topics.Values.Select(t => new Topic
            {
                TopicArn = t.Arn
            }).ToList()
        } -> new ListTopicsResponse
{} using Stryker.Core.Mutators.ObjectCreationMutator
[12:29:56 DBG] Mutant 144 created new Topic
            {
                TopicArn = t.Arn
            } -> new Topic
{} using Stryker.Core.Mutators.ObjectCreationMutator
[12:29:56 DBG] Mutant 145 created {
        return ListTopicsAsync(new ListTopicsRequest { NextToken = nextToken }, cancellationToken);
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 146 created new ListTopicsRequest { NextToken = nextToken } -> new ListTopicsRequest {} using Stryker.Core.Mutators.ObjectCreationMutator
[12:29:56 DBG] Mutant 147 created {
        ArgumentNullException.ThrowIfNull(request);
        
        var allTopics = _bus.Topics.Values
            .Select(t => new Topic { TopicArn = t.Arn })
            .ToList();

        var pagedTopics = new PaginatedList<Topic>(allTopics);

        var (items, nextToken) = pagedTopics.GetPage(
            TokenGenerator, 100, request.NextToken);

        return Task.FromResult(new ListTopicsResponse
        {
            Topics = items,
            NextToken = nextToken
        }.SetCommonProperties());

        static string TokenGenerator(Topic x)
        {
            return Convert.ToBase64String(Encoding.UTF8.GetBytes(x.TopicArn));
        }
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 148 created ArgumentNullException.ThrowIfNull(request); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:56 DBG] Mutant 149 created new Topic { TopicArn = t.Arn } -> new Topic {} using Stryker.Core.Mutators.ObjectCreationMutator
[12:29:56 DBG] Mutant 150 created new ListTopicsResponse
        {
            Topics = items,
            NextToken = nextToken
        } -> new ListTopicsResponse
{} using Stryker.Core.Mutators.ObjectCreationMutator
[12:29:56 DBG] Mutant 151 created {
            return Convert.ToBase64String(Encoding.UTF8.GetBytes(x.TopicArn));
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 152 created {
        return PublishAsync(topicArn, message, null, cancellationToken);
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 153 created {
        return PublishAsync(new PublishRequest
        {
            TopicArn = topicArn,
            Message = message,
            Subject = subject
        }, cancellationToken);
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 154 created new PublishRequest
        {
            TopicArn = topicArn,
            Message = message,
            Subject = subject
        } -> new PublishRequest
{} using Stryker.Core.Mutators.ObjectCreationMutator
[12:29:56 DBG] Mutant 155 created {
        ArgumentNullException.ThrowIfNull(request);

        var messageSize = CalculateMessageSize(request.Message, request.MessageAttributes);
        if (messageSize > MaxMessageSize)
        {
            throw new InvalidParameterException($"Message size has exceeded the limit of {MaxMessageSize} bytes.");
        }
        
        var topic = GetTopicByArn(request.TopicArn);
        var result = topic.PublishAction.Execute(request);

        return Task.FromResult(result);
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 156 created ArgumentNullException.ThrowIfNull(request); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:56 DBG] Mutant 157 created messageSize > MaxMessageSize -> messageSize < MaxMessageSize using Stryker.Core.Mutators.BinaryExpressionMutator
[12:29:56 DBG] Mutant 158 created messageSize > MaxMessageSize -> messageSize >= MaxMessageSize using Stryker.Core.Mutators.BinaryExpressionMutator
[12:29:56 DBG] Mutant 159 created messageSize > MaxMessageSize -> !(messageSize > MaxMessageSize) using Stryker.Core.Mutators.NegateConditionMutator
[12:29:56 DBG] Mutant 160 created {
            throw new InvalidParameterException($"Message size has exceeded the limit of {MaxMessageSize} bytes.");
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 161 created throw new InvalidParameterException($"Message size has exceeded the limit of {MaxMessageSize} bytes."); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:56 DBG] Mutant 162 created $"Message size has exceeded the limit of {MaxMessageSize} bytes." -> $"" using Stryker.Core.Mutators.InterpolatedStringMutator
[12:29:56 DBG] Mutant 163 created {
        var totalSize = 0;

        // Add message body size
        totalSize += Encoding.UTF8.GetByteCount(message);

        // Add message attributes size
        if (messageAttributes != null)
        {
            foreach (var (key, attributeValue) in messageAttributes)
            {
                // Add attribute name size
                totalSize += Encoding.UTF8.GetByteCount(key);

                // Add data type size (including any custom type prefix)
                totalSize += Encoding.UTF8.GetByteCount(attributeValue.DataType);

                // Add value size based on the type
                if (attributeValue.BinaryValue != null)
                {
                    totalSize += (int)attributeValue.BinaryValue.Length;
                }
                else if (attributeValue.StringValue != null)
                {
                    totalSize += Encoding.UTF8.GetByteCount(attributeValue.StringValue);
                }
            }
        }

        return totalSize;
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 164 created totalSize += Encoding.UTF8.GetByteCount(message) -> totalSize -= Encoding.UTF8.GetByteCount(message) using Stryker.Core.Mutators.AssignmentExpressionMutator
[12:29:56 DBG] Mutant 165 created messageAttributes != null -> messageAttributes == null using Stryker.Core.Mutators.BinaryExpressionMutator
[12:29:56 DBG] Mutant 166 created {
            foreach (var (key, attributeValue) in messageAttributes)
            {
                // Add attribute name size
                totalSize += Encoding.UTF8.GetByteCount(key);

                // Add data type size (including any custom type prefix)
                totalSize += Encoding.UTF8.GetByteCount(attributeValue.DataType);

                // Add value size based on the type
                if (attributeValue.BinaryValue != null)
                {
                    totalSize += (int)attributeValue.BinaryValue.Length;
                }
                else if (attributeValue.StringValue != null)
                {
                    totalSize += Encoding.UTF8.GetByteCount(attributeValue.StringValue);
                }
            }
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 167 created {
                // Add attribute name size
                totalSize += Encoding.UTF8.GetByteCount(key);

                // Add data type size (including any custom type prefix)
                totalSize += Encoding.UTF8.GetByteCount(attributeValue.DataType);

                // Add value size based on the type
                if (attributeValue.BinaryValue != null)
                {
                    totalSize += (int)attributeValue.BinaryValue.Length;
                }
                else if (attributeValue.StringValue != null)
                {
                    totalSize += Encoding.UTF8.GetByteCount(attributeValue.StringValue);
                }
            } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 168 created totalSize += Encoding.UTF8.GetByteCount(key) -> totalSize -= Encoding.UTF8.GetByteCount(key) using Stryker.Core.Mutators.AssignmentExpressionMutator
[12:29:56 DBG] Mutant 169 created totalSize += Encoding.UTF8.GetByteCount(attributeValue.DataType) -> totalSize -= Encoding.UTF8.GetByteCount(attributeValue.DataType) using Stryker.Core.Mutators.AssignmentExpressionMutator
[12:29:56 DBG] Mutant 170 created attributeValue.BinaryValue != null -> attributeValue.BinaryValue == null using Stryker.Core.Mutators.BinaryExpressionMutator
[12:29:56 DBG] Mutant 171 created {
                    totalSize += (int)attributeValue.BinaryValue.Length;
                } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 172 created totalSize += (int)attributeValue.BinaryValue.Length -> totalSize -= (int)attributeValue.BinaryValue.Length using Stryker.Core.Mutators.AssignmentExpressionMutator
[12:29:56 DBG] Mutant 173 created attributeValue.StringValue != null -> attributeValue.StringValue == null using Stryker.Core.Mutators.BinaryExpressionMutator
[12:29:56 DBG] Mutant 174 created {
                    totalSize += Encoding.UTF8.GetByteCount(attributeValue.StringValue);
                } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 175 created totalSize += Encoding.UTF8.GetByteCount(attributeValue.StringValue) -> totalSize -= Encoding.UTF8.GetByteCount(attributeValue.StringValue) using Stryker.Core.Mutators.AssignmentExpressionMutator
[12:29:56 DBG] Mutant 176 created {
        ArgumentNullException.ThrowIfNull(request);
        var totalSize = request.PublishBatchRequestEntries
            .Sum(requestEntry => CalculateMessageSize(requestEntry.Message, requestEntry.MessageAttributes));
        if (totalSize > MaxMessageSize)
        {
            throw new InvalidParameterException($"Message size has exceeded the limit of {MaxMessageSize} bytes.");
        }
        
        var topic = GetTopicByArn(request.TopicArn);
        var result = topic.PublishAction.ExecuteBatch(request);

        return Task.FromResult(result);
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 177 created ArgumentNullException.ThrowIfNull(request); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:56 DBG] Mutant 178 created request.PublishBatchRequestEntries
            .Sum -> request.PublishBatchRequestEntries
            .Max using Stryker.Core.Mutators.LinqMutator
[12:29:56 DBG] Mutant 179 created totalSize > MaxMessageSize -> totalSize < MaxMessageSize using Stryker.Core.Mutators.BinaryExpressionMutator
[12:29:56 DBG] Mutant 180 created totalSize > MaxMessageSize -> totalSize >= MaxMessageSize using Stryker.Core.Mutators.BinaryExpressionMutator
[12:29:56 DBG] Mutant 181 created totalSize > MaxMessageSize -> !(totalSize > MaxMessageSize) using Stryker.Core.Mutators.NegateConditionMutator
[12:29:56 DBG] Mutant 182 created {
            throw new InvalidParameterException($"Message size has exceeded the limit of {MaxMessageSize} bytes.");
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 183 created throw new InvalidParameterException($"Message size has exceeded the limit of {MaxMessageSize} bytes."); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:56 DBG] Mutant 184 created $"Message size has exceeded the limit of {MaxMessageSize} bytes." -> $"" using Stryker.Core.Mutators.InterpolatedStringMutator
[12:29:56 DBG] Mutant 185 created {
        return RemovePermissionAsync(new RemovePermissionRequest(), cancellationToken);
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 186 created {
        ArgumentNullException.ThrowIfNull(request);
        
        var topic = GetTopicByArn(request.TopicArn);
        
        var policy = topic.Attributes.TryGetValue("Policy", out var policyJson)
            ? Policy.FromJson(policyJson)
            : new Policy($"{topic.Arn}/SNSDefaultPolicy");

        var statementToRemove = policy.Statements.FirstOrDefault(s => s.Id == request.Label);
        if (statementToRemove == null)
        {
            throw new ArgumentException($"Value {request.Label} for parameter Label is invalid. Reason: can't find label.");
        }

        policy.Statements.Remove(statementToRemove);

        if (policy.Statements.Any())
        {
            topic.Attributes["Policy"] = policy.ToJson();
        }
        else
        {
            topic.Attributes.Remove("Policy");
        }

        return Task.FromResult(new RemovePermissionResponse().SetCommonProperties());
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 187 created ArgumentNullException.ThrowIfNull(request); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:56 DBG] Mutant 188 created topic.Attributes.TryGetValue("Policy", out var policyJson)
            ? Policy.FromJson(policyJson)
            : new Policy($"{topic.Arn}/SNSDefaultPolicy") -> (true?Policy.FromJson(policyJson)
:new Policy($"{topic.Arn}/SNSDefaultPolicy")) using Stryker.Core.Mutators.ConditionalExpressionMutator
[12:29:56 DBG] Mutant 189 created topic.Attributes.TryGetValue("Policy", out var policyJson)
            ? Policy.FromJson(policyJson)
            : new Policy($"{topic.Arn}/SNSDefaultPolicy") -> (false?Policy.FromJson(policyJson)
:new Policy($"{topic.Arn}/SNSDefaultPolicy")) using Stryker.Core.Mutators.ConditionalExpressionMutator
[12:29:56 DBG] Mutant 190 created "Policy" -> "" using Stryker.Core.Mutators.StringMutator
[12:29:56 DBG] Mutant 191 created $"{topic.Arn}/SNSDefaultPolicy" -> $"" using Stryker.Core.Mutators.InterpolatedStringMutator
[12:29:56 DBG] Mutant 192 created policy.Statements.FirstOrDefault -> policy.Statements.First using Stryker.Core.Mutators.LinqMutator
[12:29:56 DBG] Mutant 193 created s.Id == request.Label -> s.Id != request.Label using Stryker.Core.Mutators.BinaryExpressionMutator
[12:29:56 DBG] Mutant 194 created statementToRemove == null -> statementToRemove != null using Stryker.Core.Mutators.BinaryExpressionMutator
[12:29:56 DBG] Mutant 195 created {
            throw new ArgumentException($"Value {request.Label} for parameter Label is invalid. Reason: can't find label.");
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 196 created throw new ArgumentException($"Value {request.Label} for parameter Label is invalid. Reason: can't find label."); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:56 DBG] Mutant 197 created $"Value {request.Label} for parameter Label is invalid. Reason: can't find label." -> $"" using Stryker.Core.Mutators.InterpolatedStringMutator
[12:29:56 DBG] Mutant 198 created policy.Statements.Remove(statementToRemove); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:56 DBG] Mutant 199 created policy.Statements.Any() -> !(policy.Statements.Any()) using Stryker.Core.Mutators.NegateConditionMutator
[12:29:56 DBG] Mutant 200 created policy.Statements.Any -> policy.Statements.All using Stryker.Core.Mutators.LinqMutator
[12:29:56 DBG] Mutant 201 created {
            topic.Attributes["Policy"] = policy.ToJson();
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 202 created "Policy" -> "" using Stryker.Core.Mutators.StringMutator
[12:29:56 DBG] Mutant 203 created {
            topic.Attributes.Remove("Policy");
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 204 created topic.Attributes.Remove("Policy"); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:56 DBG] Mutant 205 created "Policy" -> "" using Stryker.Core.Mutators.StringMutator
[12:29:56 DBG] Mutant 206 created {
        return SetSubscriptionAttributesAsync(
            new SetSubscriptionAttributesRequest
            {
                SubscriptionArn = subscriptionArn,
                AttributeName = attributeName,
                AttributeValue = attributeValue
            },
            cancellationToken);
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 207 created new SetSubscriptionAttributesRequest
            {
                SubscriptionArn = subscriptionArn,
                AttributeName = attributeName,
                AttributeValue = attributeValue
            } -> new SetSubscriptionAttributesRequest
{} using Stryker.Core.Mutators.ObjectCreationMutator
[12:29:56 DBG] Mutant 208 created {
        ArgumentNullException.ThrowIfNull(request);
        
        if (!_bus.Subscriptions.TryGetValue(request.SubscriptionArn, out var subscription))
        {
            throw new NotFoundException($"Subscription not found: {request.SubscriptionArn}");
        }

        // Update the attribute
        if (request.AttributeName.Equals("RawMessageDelivery", StringComparison.OrdinalIgnoreCase))
        {
            if (bool.TryParse(request.AttributeValue, out var isRawMessageDelivery))
            {
                subscription.Raw = isRawMessageDelivery;
            }
            else
            {
                throw new InvalidParameterException(
                    "Invalid value for RawMessageDelivery attribute. Expected true or false.");
            }
        }
        else if (request.AttributeName.Equals("FilterPolicy", StringComparison.OrdinalIgnoreCase))
        {
            subscription.FilterPolicy = request.AttributeValue;
        }
        else
        {
            throw new InvalidParameterException($"Unsupported attribute: {request.AttributeName}");
        }

        return Task.FromResult(new SetSubscriptionAttributesResponse().SetCommonProperties());
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 209 created ArgumentNullException.ThrowIfNull(request); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:56 DBG] Mutant 210 created !_bus.Subscriptions.TryGetValue(request.SubscriptionArn, out var subscription) -> _bus.Subscriptions.TryGetValue(request.SubscriptionArn, out var subscription) using Stryker.Core.Mutators.PrefixUnaryMutator
[12:29:56 DBG] Mutant 211 created {
            throw new NotFoundException($"Subscription not found: {request.SubscriptionArn}");
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 212 created throw new NotFoundException($"Subscription not found: {request.SubscriptionArn}"); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:56 DBG] Mutant 213 created $"Subscription not found: {request.SubscriptionArn}" -> $"" using Stryker.Core.Mutators.InterpolatedStringMutator
[12:29:56 DBG] Mutant 214 created request.AttributeName.Equals("RawMessageDelivery", StringComparison.OrdinalIgnoreCase) -> !(request.AttributeName.Equals("RawMessageDelivery", StringComparison.OrdinalIgnoreCase)) using Stryker.Core.Mutators.NegateConditionMutator
[12:29:56 DBG] Mutant 215 created "RawMessageDelivery" -> "" using Stryker.Core.Mutators.StringMutator
[12:29:56 DBG] Mutant 216 created {
            if (bool.TryParse(request.AttributeValue, out var isRawMessageDelivery))
            {
                subscription.Raw = isRawMessageDelivery;
            }
            else
            {
                throw new InvalidParameterException(
                    "Invalid value for RawMessageDelivery attribute. Expected true or false.");
            }
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 217 created bool.TryParse(request.AttributeValue, out var isRawMessageDelivery) -> !(bool.TryParse(request.AttributeValue, out var isRawMessageDelivery)) using Stryker.Core.Mutators.NegateConditionMutator
[12:29:56 DBG] Mutant 218 created {
                subscription.Raw = isRawMessageDelivery;
            } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 219 created {
                throw new InvalidParameterException(
                    "Invalid value for RawMessageDelivery attribute. Expected true or false.");
            } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 220 created throw new InvalidParameterException(
                    "Invalid value for RawMessageDelivery attribute. Expected true or false."); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:56 DBG] Mutant 221 created "Invalid value for RawMessageDelivery attribute. Expected true or false." -> "" using Stryker.Core.Mutators.StringMutator
[12:29:56 DBG] Mutant 222 created request.AttributeName.Equals("FilterPolicy", StringComparison.OrdinalIgnoreCase) -> !(request.AttributeName.Equals("FilterPolicy", StringComparison.OrdinalIgnoreCase)) using Stryker.Core.Mutators.NegateConditionMutator
[12:29:56 DBG] Mutant 223 created "FilterPolicy" -> "" using Stryker.Core.Mutators.StringMutator
[12:29:56 DBG] Mutant 224 created {
            subscription.FilterPolicy = request.AttributeValue;
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 225 created {
            throw new InvalidParameterException($"Unsupported attribute: {request.AttributeName}");
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 226 created throw new InvalidParameterException($"Unsupported attribute: {request.AttributeName}"); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:56 DBG] Mutant 227 created $"Unsupported attribute: {request.AttributeName}" -> $"" using Stryker.Core.Mutators.InterpolatedStringMutator
[12:29:56 DBG] Mutant 228 created {
        return SetTopicAttributesAsync(new SetTopicAttributesRequest
        {
            TopicArn = topicArn,
            AttributeName = attributeName,
            AttributeValue = attributeValue
        }, cancellationToken);
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 229 created new SetTopicAttributesRequest
        {
            TopicArn = topicArn,
            AttributeName = attributeName,
            AttributeValue = attributeValue
        } -> new SetTopicAttributesRequest
{} using Stryker.Core.Mutators.ObjectCreationMutator
[12:29:56 DBG] Mutant 230 created {
        ArgumentNullException.ThrowIfNull(request);
        
        var topicName = GetTopicNameByArn(request.TopicArn);
        if (!_bus.Topics.TryGetValue(topicName, out var topic))
        {
            throw new NotFoundException("Topic not found.");
        }

        topic.Attributes[request.AttributeName] = request.AttributeValue;
        return Task.FromResult(new SetTopicAttributesResponse().SetCommonProperties());
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 231 created ArgumentNullException.ThrowIfNull(request); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:56 DBG] Mutant 232 created !_bus.Topics.TryGetValue(topicName, out var topic) -> _bus.Topics.TryGetValue(topicName, out var topic) using Stryker.Core.Mutators.PrefixUnaryMutator
[12:29:56 DBG] Mutant 233 created {
            throw new NotFoundException("Topic not found.");
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 234 created throw new NotFoundException("Topic not found."); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:56 DBG] Mutant 235 created "Topic not found." -> "" using Stryker.Core.Mutators.StringMutator
[12:29:56 DBG] Mutant 236 created {
        return SubscribeAsync(new SubscribeRequest
        {
            TopicArn = topicArn,
            Protocol = protocol,
            Endpoint = endpoint
        }, cancellationToken);
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 237 created new SubscribeRequest
        {
            TopicArn = topicArn,
            Protocol = protocol,
            Endpoint = endpoint
        } -> new SubscribeRequest
{} using Stryker.Core.Mutators.ObjectCreationMutator
[12:29:56 DBG] Mutant 238 created {
        ArgumentNullException.ThrowIfNull(request);
        
        if (!request.Protocol.Equals("sqs", StringComparison.OrdinalIgnoreCase))
        {
            throw new NotSupportedException("Only SQS protocol is supported.");
        }
        
        var queueName = request.Endpoint.Split(':').Last();
        if (!_bus.Queues.TryGetValue(queueName, out _))
        {
            throw new NotFoundException("Queue not found.");
        }

        var parsedRawMessageDelivery =
            request.Attributes.TryGetValue("RawMessageDelivery", out var rawMessageDelivery) &&
            bool.TryParse(rawMessageDelivery, out var isRawMessageDelivery) &&
            isRawMessageDelivery;
        
        var parsedFilterPolicy =
            request.Attributes.TryGetValue("FilterPolicy", out var filterPolicy) ? filterPolicy : string.Empty;
        
        var snsSubscription = new SnsSubscription
        {
            SubscriptionArn = Guid.NewGuid().ToString(),
            TopicArn = request.TopicArn,
            EndPoint = request.Endpoint,
            Protocol = request.Protocol,
            Raw = parsedRawMessageDelivery,
            FilterPolicy = parsedFilterPolicy
        };
        _bus.Subscriptions.TryAdd(snsSubscription.SubscriptionArn, snsSubscription);
        
        SnsPublishActionFactory.UpdateTopicPublishAction(snsSubscription.TopicArn, _bus);

        return Task.FromResult(new SubscribeResponse
        {
            SubscriptionArn = snsSubscription.SubscriptionArn
        }.SetCommonProperties());
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 239 created ArgumentNullException.ThrowIfNull(request); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:56 DBG] Mutant 240 created !request.Protocol.Equals("sqs", StringComparison.OrdinalIgnoreCase) -> request.Protocol.Equals("sqs", StringComparison.OrdinalIgnoreCase) using Stryker.Core.Mutators.PrefixUnaryMutator
[12:29:56 DBG] Mutant 241 created "sqs" -> "" using Stryker.Core.Mutators.StringMutator
[12:29:56 DBG] Mutant 242 created {
            throw new NotSupportedException("Only SQS protocol is supported.");
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 243 created throw new NotSupportedException("Only SQS protocol is supported."); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:56 DBG] Mutant 244 created "Only SQS protocol is supported." -> "" using Stryker.Core.Mutators.StringMutator
[12:29:56 DBG] Mutant 245 created request.Endpoint.Split(':').Last -> request.Endpoint.Split(':').First using Stryker.Core.Mutators.LinqMutator
[12:29:56 DBG] Mutant 246 created !_bus.Queues.TryGetValue(queueName, out _) -> _bus.Queues.TryGetValue(queueName, out _) using Stryker.Core.Mutators.PrefixUnaryMutator
[12:29:56 DBG] Mutant 247 created {
            throw new NotFoundException("Queue not found.");
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 248 created throw new NotFoundException("Queue not found."); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:56 DBG] Mutant 249 created "Queue not found." -> "" using Stryker.Core.Mutators.StringMutator
[12:29:56 DBG] Mutant 250 created request.Attributes.TryGetValue("RawMessageDelivery", out var rawMessageDelivery) &&
            bool.TryParse(rawMessageDelivery, out var isRawMessageDelivery) &&
            isRawMessageDelivery -> request.Attributes.TryGetValue("RawMessageDelivery", out var rawMessageDelivery) &&
            bool.TryParse(rawMessageDelivery, out var isRawMessageDelivery) ||
            isRawMessageDelivery using Stryker.Core.Mutators.BinaryExpressionMutator
[12:29:56 DBG] Mutant 251 created request.Attributes.TryGetValue("RawMessageDelivery", out var rawMessageDelivery) &&
            bool.TryParse(rawMessageDelivery, out var isRawMessageDelivery) -> request.Attributes.TryGetValue("RawMessageDelivery", out var rawMessageDelivery) ||
            bool.TryParse(rawMessageDelivery, out var isRawMessageDelivery) using Stryker.Core.Mutators.BinaryExpressionMutator
[12:29:56 DBG] Mutant 252 created "RawMessageDelivery" -> "" using Stryker.Core.Mutators.StringMutator
[12:29:56 DBG] Mutant 253 created request.Attributes.TryGetValue("FilterPolicy", out var filterPolicy) ? filterPolicy : string.Empty -> (true?filterPolicy :string.Empty) using Stryker.Core.Mutators.ConditionalExpressionMutator
[12:29:56 DBG] Mutant 254 created request.Attributes.TryGetValue("FilterPolicy", out var filterPolicy) ? filterPolicy : string.Empty -> (false?filterPolicy :string.Empty) using Stryker.Core.Mutators.ConditionalExpressionMutator
[12:29:56 DBG] Mutant 255 created "FilterPolicy" -> "" using Stryker.Core.Mutators.StringMutator
[12:29:56 DBG] Mutant 256 created string.Empty -> "Stryker was here!" using Stryker.Core.Mutators.StringEmptyMutator
[12:29:56 DBG] Mutant 257 created new SnsSubscription
        {
            SubscriptionArn = Guid.NewGuid().ToString(),
            TopicArn = request.TopicArn,
            EndPoint = request.Endpoint,
            Protocol = request.Protocol,
            Raw = parsedRawMessageDelivery,
            FilterPolicy = parsedFilterPolicy
        } -> new SnsSubscription
{} using Stryker.Core.Mutators.ObjectCreationMutator
[12:29:56 DBG] Mutant 258 created _bus.Subscriptions.TryAdd(snsSubscription.SubscriptionArn, snsSubscription); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:56 DBG] Mutant 259 created SnsPublishActionFactory.UpdateTopicPublishAction(snsSubscription.TopicArn, _bus); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:56 DBG] Mutant 260 created new SubscribeResponse
        {
            SubscriptionArn = snsSubscription.SubscriptionArn
        } -> new SubscribeResponse
{} using Stryker.Core.Mutators.ObjectCreationMutator
[12:29:56 DBG] Mutant 261 created {
        ArgumentNullException.ThrowIfNull(request);
        
        var topicName = GetTopicNameByArn(request.ResourceArn);
        if (!_bus.Topics.TryGetValue(topicName, out var topic))
        {
            throw new ResourceNotFoundException("Topic not found.");
        }
        
        foreach (var tag in request.Tags)
        {
            topic.Tags[tag.Key] = tag.Value;
        }
        
        return Task.FromResult(new TagResourceResponse().SetCommonProperties());
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 262 created ArgumentNullException.ThrowIfNull(request); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:56 DBG] Mutant 263 created !_bus.Topics.TryGetValue(topicName, out var topic) -> _bus.Topics.TryGetValue(topicName, out var topic) using Stryker.Core.Mutators.PrefixUnaryMutator
[12:29:56 DBG] Mutant 264 created {
            throw new ResourceNotFoundException("Topic not found.");
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 265 created throw new ResourceNotFoundException("Topic not found."); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:56 DBG] Mutant 266 created "Topic not found." -> "" using Stryker.Core.Mutators.StringMutator
[12:29:56 DBG] Mutant 267 created {
            topic.Tags[tag.Key] = tag.Value;
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 268 created {
        return UnsubscribeAsync(new UnsubscribeRequest { SubscriptionArn = subscriptionArn }, cancellationToken);
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 269 created new UnsubscribeRequest { SubscriptionArn = subscriptionArn } -> new UnsubscribeRequest {} using Stryker.Core.Mutators.ObjectCreationMutator
[12:29:56 DBG] Mutant 270 created {
        ArgumentNullException.ThrowIfNull(request);
        
        if (!_bus.Subscriptions.TryRemove(request.SubscriptionArn, out var subscription))
        {
            throw new NotFoundException("Subscription not found.");
        }
        
        SnsPublishActionFactory.UpdateTopicPublishAction(subscription.TopicArn, _bus);
        
        return Task.FromResult(new UnsubscribeResponse().SetCommonProperties());
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 271 created ArgumentNullException.ThrowIfNull(request); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:56 DBG] Mutant 272 created !_bus.Subscriptions.TryRemove(request.SubscriptionArn, out var subscription) -> _bus.Subscriptions.TryRemove(request.SubscriptionArn, out var subscription) using Stryker.Core.Mutators.PrefixUnaryMutator
[12:29:56 DBG] Mutant 273 created {
            throw new NotFoundException("Subscription not found.");
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 274 created throw new NotFoundException("Subscription not found."); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:56 DBG] Mutant 275 created "Subscription not found." -> "" using Stryker.Core.Mutators.StringMutator
[12:29:56 DBG] Mutant 276 created SnsPublishActionFactory.UpdateTopicPublishAction(subscription.TopicArn, _bus); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:56 DBG] Mutant 277 created {
        ArgumentNullException.ThrowIfNull(request);
        
        var topicName = GetTopicNameByArn(request.ResourceArn);
        if (!_bus.Topics.TryGetValue(topicName, out var topic))
        {
            throw new ResourceNotFoundException("Topic not found.");
        }
        
        foreach (var tagKey in request.TagKeys)
        {
            topic.Tags.Remove(tagKey);
        }
        
        return Task.FromResult(new UntagResourceResponse().SetCommonProperties());
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 278 created ArgumentNullException.ThrowIfNull(request); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:56 DBG] Mutant 279 created !_bus.Topics.TryGetValue(topicName, out var topic) -> _bus.Topics.TryGetValue(topicName, out var topic) using Stryker.Core.Mutators.PrefixUnaryMutator
[12:29:56 DBG] Mutant 280 created {
            throw new ResourceNotFoundException("Topic not found.");
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 281 created throw new ResourceNotFoundException("Topic not found."); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:56 DBG] Mutant 282 created "Topic not found." -> "" using Stryker.Core.Mutators.StringMutator
[12:29:56 DBG] Mutant 283 created {
            topic.Tags.Remove(tagKey);
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 284 created topic.Tags.Remove(tagKey); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:56 DBG] Mutant 285 created {
        var statement = new Statement(Statement.StatementEffect.Allow);
#pragma warning disable CS0612,CS0618
        statement.Actions.Add(SQSActionIdentifiers.SendMessage);
#pragma warning restore CS0612,CS0618
        statement.Resources.Add(new Resource(sqsQueueArn));
        statement.Conditions.Add(ConditionFactory.NewSourceArnCondition(topicArn));
        statement.Principals.Add(new Principal("*"));
        policy.Statements.Add(statement);
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 286 created statement.Actions.Add(SQSActionIdentifiers.SendMessage); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:56 DBG] Mutant 287 created statement.Resources.Add(new Resource(sqsQueueArn)); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:56 DBG] Mutant 288 created statement.Conditions.Add(ConditionFactory.NewSourceArnCondition(topicArn)); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:56 DBG] Mutant 289 created statement.Principals.Add(new Principal("*")); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:56 DBG] Mutant 290 created "*" -> "" using Stryker.Core.Mutators.StringMutator
[12:29:56 DBG] Mutant 291 created policy.Statements.Add(statement); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:56 DBG] Mutant 292 created {
        foreach (var statement in policy.Statements)
        {
            // See if the statement contains the topic as a resource
            var containsResource = statement.Resources.Any(resource => resource.Id.Equals(sqsQueueArn, StringComparison.OrdinalIgnoreCase));

            // If queue found as the resource see if the condition is for this topic
            if (containsResource)
            {
                foreach (var condition in statement.Conditions)
                {
                    if ((string.Equals(condition.Type, ConditionFactory.StringComparisonType.StringLike.ToString(), StringComparison.OrdinalIgnoreCase) ||
                         string.Equals(condition.Type, ConditionFactory.StringComparisonType.StringEquals.ToString(), StringComparison.OrdinalIgnoreCase) ||
                         string.Equals(condition.Type, ConditionFactory.ArnComparisonType.ArnEquals.ToString(), StringComparison.OrdinalIgnoreCase) ||
                         string.Equals(condition.Type, ConditionFactory.ArnComparisonType.ArnLike.ToString(), StringComparison.OrdinalIgnoreCase)) &&
                        string.Equals(condition.ConditionKey, ConditionFactory.SOURCE_ARN_CONDITION_KEY, StringComparison.OrdinalIgnoreCase) &&
                        condition.Values.Contains<string>(topicArn))
                        return true;
                }
            }
        }

        return false;
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 293 created {
            // See if the statement contains the topic as a resource
            var containsResource = statement.Resources.Any(resource => resource.Id.Equals(sqsQueueArn, StringComparison.OrdinalIgnoreCase));

            // If queue found as the resource see if the condition is for this topic
            if (containsResource)
            {
                foreach (var condition in statement.Conditions)
                {
                    if ((string.Equals(condition.Type, ConditionFactory.StringComparisonType.StringLike.ToString(), StringComparison.OrdinalIgnoreCase) ||
                         string.Equals(condition.Type, ConditionFactory.StringComparisonType.StringEquals.ToString(), StringComparison.OrdinalIgnoreCase) ||
                         string.Equals(condition.Type, ConditionFactory.ArnComparisonType.ArnEquals.ToString(), StringComparison.OrdinalIgnoreCase) ||
                         string.Equals(condition.Type, ConditionFactory.ArnComparisonType.ArnLike.ToString(), StringComparison.OrdinalIgnoreCase)) &&
                        string.Equals(condition.ConditionKey, ConditionFactory.SOURCE_ARN_CONDITION_KEY, StringComparison.OrdinalIgnoreCase) &&
                        condition.Values.Contains<string>(topicArn))
                        return true;
                }
            }
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 294 created statement.Resources.Any -> statement.Resources.All using Stryker.Core.Mutators.LinqMutator
[12:29:56 DBG] Mutant 295 created containsResource -> !(containsResource) using Stryker.Core.Mutators.NegateConditionMutator
[12:29:56 DBG] Mutant 296 created {
                foreach (var condition in statement.Conditions)
                {
                    if ((string.Equals(condition.Type, ConditionFactory.StringComparisonType.StringLike.ToString(), StringComparison.OrdinalIgnoreCase) ||
                         string.Equals(condition.Type, ConditionFactory.StringComparisonType.StringEquals.ToString(), StringComparison.OrdinalIgnoreCase) ||
                         string.Equals(condition.Type, ConditionFactory.ArnComparisonType.ArnEquals.ToString(), StringComparison.OrdinalIgnoreCase) ||
                         string.Equals(condition.Type, ConditionFactory.ArnComparisonType.ArnLike.ToString(), StringComparison.OrdinalIgnoreCase)) &&
                        string.Equals(condition.ConditionKey, ConditionFactory.SOURCE_ARN_CONDITION_KEY, StringComparison.OrdinalIgnoreCase) &&
                        condition.Values.Contains<string>(topicArn))
                        return true;
                }
            } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 297 created {
                    if ((string.Equals(condition.Type, ConditionFactory.StringComparisonType.StringLike.ToString(), StringComparison.OrdinalIgnoreCase) ||
                         string.Equals(condition.Type, ConditionFactory.StringComparisonType.StringEquals.ToString(), StringComparison.OrdinalIgnoreCase) ||
                         string.Equals(condition.Type, ConditionFactory.ArnComparisonType.ArnEquals.ToString(), StringComparison.OrdinalIgnoreCase) ||
                         string.Equals(condition.Type, ConditionFactory.ArnComparisonType.ArnLike.ToString(), StringComparison.OrdinalIgnoreCase)) &&
                        string.Equals(condition.ConditionKey, ConditionFactory.SOURCE_ARN_CONDITION_KEY, StringComparison.OrdinalIgnoreCase) &&
                        condition.Values.Contains<string>(topicArn))
                        return true;
                } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 298 created (string.Equals(condition.Type, ConditionFactory.StringComparisonType.StringLike.ToString(), StringComparison.OrdinalIgnoreCase) ||
                         string.Equals(condition.Type, ConditionFactory.StringComparisonType.StringEquals.ToString(), StringComparison.OrdinalIgnoreCase) ||
                         string.Equals(condition.Type, ConditionFactory.ArnComparisonType.ArnEquals.ToString(), StringComparison.OrdinalIgnoreCase) ||
                         string.Equals(condition.Type, ConditionFactory.ArnComparisonType.ArnLike.ToString(), StringComparison.OrdinalIgnoreCase)) &&
                        string.Equals(condition.ConditionKey, ConditionFactory.SOURCE_ARN_CONDITION_KEY, StringComparison.OrdinalIgnoreCase) &&
                        condition.Values.Contains<string>(topicArn) -> (string.Equals(condition.Type, ConditionFactory.StringComparisonType.StringLike.ToString(), StringComparison.OrdinalIgnoreCase) ||
                         string.Equals(condition.Type, ConditionFactory.StringComparisonType.StringEquals.ToString(), StringComparison.OrdinalIgnoreCase) ||
                         string.Equals(condition.Type, ConditionFactory.ArnComparisonType.ArnEquals.ToString(), StringComparison.OrdinalIgnoreCase) ||
                         string.Equals(condition.Type, ConditionFactory.ArnComparisonType.ArnLike.ToString(), StringComparison.OrdinalIgnoreCase)) &&
                        string.Equals(condition.ConditionKey, ConditionFactory.SOURCE_ARN_CONDITION_KEY, StringComparison.OrdinalIgnoreCase) ||
                        condition.Values.Contains<string>(topicArn) using Stryker.Core.Mutators.BinaryExpressionMutator
[12:29:56 DBG] Mutant 299 created (string.Equals(condition.Type, ConditionFactory.StringComparisonType.StringLike.ToString(), StringComparison.OrdinalIgnoreCase) ||
                         string.Equals(condition.Type, ConditionFactory.StringComparisonType.StringEquals.ToString(), StringComparison.OrdinalIgnoreCase) ||
                         string.Equals(condition.Type, ConditionFactory.ArnComparisonType.ArnEquals.ToString(), StringComparison.OrdinalIgnoreCase) ||
                         string.Equals(condition.Type, ConditionFactory.ArnComparisonType.ArnLike.ToString(), StringComparison.OrdinalIgnoreCase)) &&
                        string.Equals(condition.ConditionKey, ConditionFactory.SOURCE_ARN_CONDITION_KEY, StringComparison.OrdinalIgnoreCase) &&
                        condition.Values.Contains<string>(topicArn) -> !((string.Equals(condition.Type, ConditionFactory.StringComparisonType.StringLike.ToString(), StringComparison.OrdinalIgnoreCase) ||
                         string.Equals(condition.Type, ConditionFactory.StringComparisonType.StringEquals.ToString(), StringComparison.OrdinalIgnoreCase) ||
                         string.Equals(condition.Type, ConditionFactory.ArnComparisonType.ArnEquals.ToString(), StringComparison.OrdinalIgnoreCase) ||
                         string.Equals(condition.Type, ConditionFactory.ArnComparisonType.ArnLike.ToString(), StringComparison.OrdinalIgnoreCase)) &&
                        string.Equals(condition.ConditionKey, ConditionFactory.SOURCE_ARN_CONDITION_KEY, StringComparison.OrdinalIgnoreCase) &&
                        condition.Values.Contains<string>(topicArn)) using Stryker.Core.Mutators.NegateConditionMutator
[12:29:56 DBG] Mutant 300 created (string.Equals(condition.Type, ConditionFactory.StringComparisonType.StringLike.ToString(), StringComparison.OrdinalIgnoreCase) ||
                         string.Equals(condition.Type, ConditionFactory.StringComparisonType.StringEquals.ToString(), StringComparison.OrdinalIgnoreCase) ||
                         string.Equals(condition.Type, ConditionFactory.ArnComparisonType.ArnEquals.ToString(), StringComparison.OrdinalIgnoreCase) ||
                         string.Equals(condition.Type, ConditionFactory.ArnComparisonType.ArnLike.ToString(), StringComparison.OrdinalIgnoreCase)) &&
                        string.Equals(condition.ConditionKey, ConditionFactory.SOURCE_ARN_CONDITION_KEY, StringComparison.OrdinalIgnoreCase) -> (string.Equals(condition.Type, ConditionFactory.StringComparisonType.StringLike.ToString(), StringComparison.OrdinalIgnoreCase) ||
                         string.Equals(condition.Type, ConditionFactory.StringComparisonType.StringEquals.ToString(), StringComparison.OrdinalIgnoreCase) ||
                         string.Equals(condition.Type, ConditionFactory.ArnComparisonType.ArnEquals.ToString(), StringComparison.OrdinalIgnoreCase) ||
                         string.Equals(condition.Type, ConditionFactory.ArnComparisonType.ArnLike.ToString(), StringComparison.OrdinalIgnoreCase)) ||
                        string.Equals(condition.ConditionKey, ConditionFactory.SOURCE_ARN_CONDITION_KEY, StringComparison.OrdinalIgnoreCase) using Stryker.Core.Mutators.BinaryExpressionMutator
[12:29:56 DBG] Mutant 301 created string.Equals(condition.Type, ConditionFactory.StringComparisonType.StringLike.ToString(), StringComparison.OrdinalIgnoreCase) ||
                         string.Equals(condition.Type, ConditionFactory.StringComparisonType.StringEquals.ToString(), StringComparison.OrdinalIgnoreCase) ||
                         string.Equals(condition.Type, ConditionFactory.ArnComparisonType.ArnEquals.ToString(), StringComparison.OrdinalIgnoreCase) ||
                         string.Equals(condition.Type, ConditionFactory.ArnComparisonType.ArnLike.ToString(), StringComparison.OrdinalIgnoreCase) -> string.Equals(condition.Type, ConditionFactory.StringComparisonType.StringLike.ToString(), StringComparison.OrdinalIgnoreCase) ||
                         string.Equals(condition.Type, ConditionFactory.StringComparisonType.StringEquals.ToString(), StringComparison.OrdinalIgnoreCase) ||
                         string.Equals(condition.Type, ConditionFactory.ArnComparisonType.ArnEquals.ToString(), StringComparison.OrdinalIgnoreCase) &&
                         string.Equals(condition.Type, ConditionFactory.ArnComparisonType.ArnLike.ToString(), StringComparison.OrdinalIgnoreCase) using Stryker.Core.Mutators.BinaryExpressionMutator
[12:29:56 DBG] Mutant 302 created string.Equals(condition.Type, ConditionFactory.StringComparisonType.StringLike.ToString(), StringComparison.OrdinalIgnoreCase) ||
                         string.Equals(condition.Type, ConditionFactory.StringComparisonType.StringEquals.ToString(), StringComparison.OrdinalIgnoreCase) ||
                         string.Equals(condition.Type, ConditionFactory.ArnComparisonType.ArnEquals.ToString(), StringComparison.OrdinalIgnoreCase) -> string.Equals(condition.Type, ConditionFactory.StringComparisonType.StringLike.ToString(), StringComparison.OrdinalIgnoreCase) ||
                         string.Equals(condition.Type, ConditionFactory.StringComparisonType.StringEquals.ToString(), StringComparison.OrdinalIgnoreCase) &&
                         string.Equals(condition.Type, ConditionFactory.ArnComparisonType.ArnEquals.ToString(), StringComparison.OrdinalIgnoreCase) using Stryker.Core.Mutators.BinaryExpressionMutator
[12:29:56 DBG] Mutant 303 created string.Equals(condition.Type, ConditionFactory.StringComparisonType.StringLike.ToString(), StringComparison.OrdinalIgnoreCase) ||
                         string.Equals(condition.Type, ConditionFactory.StringComparisonType.StringEquals.ToString(), StringComparison.OrdinalIgnoreCase) -> string.Equals(condition.Type, ConditionFactory.StringComparisonType.StringLike.ToString(), StringComparison.OrdinalIgnoreCase) &&
                         string.Equals(condition.Type, ConditionFactory.StringComparisonType.StringEquals.ToString(), StringComparison.OrdinalIgnoreCase) using Stryker.Core.Mutators.BinaryExpressionMutator
[12:29:56 DBG] Mutant 304 created true -> false using Stryker.Core.Mutators.BooleanMutator
[12:29:56 DBG] Mutant 305 created false -> true using Stryker.Core.Mutators.BooleanMutator
[12:29:56 DBG] Mutant 306 created {
        var topicName = GetTopicNameByArn(topicArn);
        return _bus.Topics.TryGetValue(topicName, out var topic)
            ? topic
            : throw new NotFoundException($"Topic not found: {topicArn}");
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 307 created _bus.Topics.TryGetValue(topicName, out var topic)
            ? topic
            : throw new NotFoundException($"Topic not found: {topicArn}") -> (true?topic
:throw new NotFoundException($"Topic not found: {topicArn}")) using Stryker.Core.Mutators.ConditionalExpressionMutator
[12:29:56 DBG] Mutant 308 created _bus.Topics.TryGetValue(topicName, out var topic)
            ? topic
            : throw new NotFoundException($"Topic not found: {topicArn}") -> (false?topic
:throw new NotFoundException($"Topic not found: {topicArn}")) using Stryker.Core.Mutators.ConditionalExpressionMutator
[12:29:56 DBG] Mutant 309 created $"Topic not found: {topicArn}" -> $"" using Stryker.Core.Mutators.InterpolatedStringMutator
[12:29:56 DBG] Mutant 310 created {
        var indexOfLastColon = topicArn.LastIndexOf(':');
        if (indexOfLastColon == -1)
        {
            throw new ArgumentException("ARN malformed", nameof(topicArn));
        }
        return topicArn[(indexOfLastColon+1) ..];
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 311 created indexOfLastColon == -1 -> indexOfLastColon != -1 using Stryker.Core.Mutators.BinaryExpressionMutator
[12:29:56 DBG] Mutant 312 created -1 -> +1 using Stryker.Core.Mutators.PrefixUnaryMutator
[12:29:56 DBG] Mutant 313 created {
            throw new ArgumentException("ARN malformed", nameof(topicArn));
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 314 created throw new ArgumentException("ARN malformed", nameof(topicArn)); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:56 DBG] Mutant 315 created "ARN malformed" -> "" using Stryker.Core.Mutators.StringMutator
[12:29:56 DBG] Mutant 316 created indexOfLastColon+1 -> indexOfLastColon-1 using Stryker.Core.Mutators.BinaryExpressionMutator
[12:29:56 DBG] Mutant 317 created {
        return AddPermissionAsync(new AddPermissionRequest
        {
            TopicArn = topicArn,
            Label = label,
            AWSAccountId = awsAccountId,
            ActionName = actionName
        }, cancellationToken);
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 318 created new AddPermissionRequest
        {
            TopicArn = topicArn,
            Label = label,
            AWSAccountId = awsAccountId,
            ActionName = actionName
        } -> new AddPermissionRequest
{} using Stryker.Core.Mutators.ObjectCreationMutator
[12:29:56 DBG] Mutant 319 created {
        ArgumentNullException.ThrowIfNull(request);
        
        var topic = GetTopicByArn(request.TopicArn);
        
        var policy = topic.Attributes.TryGetValue("Policy", out var policyJson)
            ? Policy.FromJson(policyJson)
            : new Policy($"{topic.Arn}/SNSDefaultPolicy");

        var statement = new Statement(Statement.StatementEffect.Allow)
        {
            Id = request.Label,
            Actions = request.ActionName.Select(action => new ActionIdentifier($"SNS:{action}")).ToList()
        };

        statement.Resources.Add(new Resource(topic.Arn));
        
        foreach (var accountId in request.AWSAccountId)
        {
            statement.Principals.Add(new Principal($"arn:aws:iam::{accountId}:root"));
        }

        if (policy.CheckIfStatementExists(statement))
        {
            throw new ArgumentException($"Value {request.Label} for parameter Label is invalid. Reason: Already exists.");
        }

        policy.Statements.Add(statement);
        topic.Attributes["Policy"] = policy.ToJson();

        return Task.FromResult(new AddPermissionResponse().SetCommonProperties());
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 320 created ArgumentNullException.ThrowIfNull(request); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:56 DBG] Mutant 321 created topic.Attributes.TryGetValue("Policy", out var policyJson)
            ? Policy.FromJson(policyJson)
            : new Policy($"{topic.Arn}/SNSDefaultPolicy") -> (true?Policy.FromJson(policyJson)
:new Policy($"{topic.Arn}/SNSDefaultPolicy")) using Stryker.Core.Mutators.ConditionalExpressionMutator
[12:29:56 DBG] Mutant 322 created topic.Attributes.TryGetValue("Policy", out var policyJson)
            ? Policy.FromJson(policyJson)
            : new Policy($"{topic.Arn}/SNSDefaultPolicy") -> (false?Policy.FromJson(policyJson)
:new Policy($"{topic.Arn}/SNSDefaultPolicy")) using Stryker.Core.Mutators.ConditionalExpressionMutator
[12:29:56 DBG] Mutant 323 created "Policy" -> "" using Stryker.Core.Mutators.StringMutator
[12:29:56 DBG] Mutant 324 created $"{topic.Arn}/SNSDefaultPolicy" -> $"" using Stryker.Core.Mutators.InterpolatedStringMutator
[12:29:56 DBG] Mutant 325 created new Statement(Statement.StatementEffect.Allow)
        {
            Id = request.Label,
            Actions = request.ActionName.Select(action => new ActionIdentifier($"SNS:{action}")).ToList()
        } -> new Statement(Statement.StatementEffect.Allow)
{} using Stryker.Core.Mutators.ObjectCreationMutator
[12:29:56 DBG] Mutant 326 created $"SNS:{action}" -> $"" using Stryker.Core.Mutators.InterpolatedStringMutator
[12:29:56 DBG] Mutant 327 created statement.Resources.Add(new Resource(topic.Arn)); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:56 DBG] Mutant 328 created {
            statement.Principals.Add(new Principal($"arn:aws:iam::{accountId}:root"));
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 329 created statement.Principals.Add(new Principal($"arn:aws:iam::{accountId}:root")); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:56 DBG] Mutant 330 created $"arn:aws:iam::{accountId}:root" -> $"" using Stryker.Core.Mutators.InterpolatedStringMutator
[12:29:56 DBG] Mutant 331 created policy.CheckIfStatementExists(statement) -> !(policy.CheckIfStatementExists(statement)) using Stryker.Core.Mutators.NegateConditionMutator
[12:29:56 DBG] Mutant 332 created {
            throw new ArgumentException($"Value {request.Label} for parameter Label is invalid. Reason: Already exists.");
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 333 created throw new ArgumentException($"Value {request.Label} for parameter Label is invalid. Reason: Already exists."); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:56 DBG] Mutant 334 created $"Value {request.Label} for parameter Label is invalid. Reason: Already exists." -> $"" using Stryker.Core.Mutators.InterpolatedStringMutator
[12:29:56 DBG] Mutant 335 created policy.Statements.Add(statement); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:56 DBG] Mutant 336 created "Policy" -> "" using Stryker.Core.Mutators.StringMutator
[12:29:56 DBG] Mutating /Users/stuart.lang/RiderProjects/ConsoleApp9/src/LocalSqsSnsMessaging/SnsClient/InMemorySnsClient_Unsupported.cs
[12:29:56 DBG] Mutating /Users/stuart.lang/RiderProjects/ConsoleApp9/src/LocalSqsSnsMessaging/SnsPublishAction.cs
[12:29:56 DBG] Mutant 337 created false -> true using Stryker.Core.Mutators.BooleanMutator
[12:29:56 DBG] Mutant 338 created {
        var bytes = RandomNumberGenerator.GetBytes(16);
        var randomBigInt = new BigInteger(bytes);
        var twentyDigitBigInt = BigInteger.Abs(randomBigInt % BigInteger.Pow(10, 20));
        return (Int128)twentyDigitBigInt;
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 339 created randomBigInt % BigInteger.Pow(10, 20) -> randomBigInt * BigInteger.Pow(10, 20) using Stryker.Core.Mutators.BinaryExpressionMutator
[12:29:56 DBG] Mutant 340 created {
        _subscriptionsAndQueues = subscriptionsAndQueues;
        _timeProvider = timeProvider;
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 341 created {
        var messageId = Guid.NewGuid().ToString();
        
        foreach (var (subscription, queue) in _subscriptionsAndQueues)
        {
            var sqsMessage = CreateSqsMessage(request, messageId, subscription);
            if (queue.IsFifo)
            {
                sqsMessage.Attributes["MessageGroupId"] = request.MessageGroupId;
                sqsMessage.Attributes["SequenceNumber"] = GetNextSequenceNumber().ToString(NumberFormatInfo.InvariantInfo);
                sqsMessage.Attributes["SentTimestamp"] = _timeProvider.GetUtcNow().ToUnixTimeMilliseconds().ToString(NumberFormatInfo.InvariantInfo);
                
                string deduplicationId = request.MessageDeduplicationId;
                if (string.IsNullOrEmpty(deduplicationId))
                {
                    // Generate a deduplication ID based on the message body
                    deduplicationId = GenerateMessageBodyHash(sqsMessage.Body);
                }

                sqsMessage.Attributes[MessageSystemAttributeName.MessageDeduplicationId] = deduplicationId;

                if (queue.DeduplicationIds.TryAdd(deduplicationId, sqsMessage.MessageId))
                {
                    EnqueueFifoMessage(queue, request.MessageGroupId, sqsMessage);
                }
            }
            else
            {
                queue.Messages.Writer.TryWrite(sqsMessage);
            }
        }

        return new PublishResponse
        {
            MessageId = messageId
        }.SetCommonProperties();
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 342 created {
            var sqsMessage = CreateSqsMessage(request, messageId, subscription);
            if (queue.IsFifo)
            {
                sqsMessage.Attributes["MessageGroupId"] = request.MessageGroupId;
                sqsMessage.Attributes["SequenceNumber"] = GetNextSequenceNumber().ToString(NumberFormatInfo.InvariantInfo);
                sqsMessage.Attributes["SentTimestamp"] = _timeProvider.GetUtcNow().ToUnixTimeMilliseconds().ToString(NumberFormatInfo.InvariantInfo);
                
                string deduplicationId = request.MessageDeduplicationId;
                if (string.IsNullOrEmpty(deduplicationId))
                {
                    // Generate a deduplication ID based on the message body
                    deduplicationId = GenerateMessageBodyHash(sqsMessage.Body);
                }

                sqsMessage.Attributes[MessageSystemAttributeName.MessageDeduplicationId] = deduplicationId;

                if (queue.DeduplicationIds.TryAdd(deduplicationId, sqsMessage.MessageId))
                {
                    EnqueueFifoMessage(queue, request.MessageGroupId, sqsMessage);
                }
            }
            else
            {
                queue.Messages.Writer.TryWrite(sqsMessage);
            }
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 343 created queue.IsFifo -> !(queue.IsFifo) using Stryker.Core.Mutators.NegateConditionMutator
[12:29:56 DBG] Mutant 344 created {
                sqsMessage.Attributes["MessageGroupId"] = request.MessageGroupId;
                sqsMessage.Attributes["SequenceNumber"] = GetNextSequenceNumber().ToString(NumberFormatInfo.InvariantInfo);
                sqsMessage.Attributes["SentTimestamp"] = _timeProvider.GetUtcNow().ToUnixTimeMilliseconds().ToString(NumberFormatInfo.InvariantInfo);
                
                string deduplicationId = request.MessageDeduplicationId;
                if (string.IsNullOrEmpty(deduplicationId))
                {
                    // Generate a deduplication ID based on the message body
                    deduplicationId = GenerateMessageBodyHash(sqsMessage.Body);
                }

                sqsMessage.Attributes[MessageSystemAttributeName.MessageDeduplicationId] = deduplicationId;

                if (queue.DeduplicationIds.TryAdd(deduplicationId, sqsMessage.MessageId))
                {
                    EnqueueFifoMessage(queue, request.MessageGroupId, sqsMessage);
                }
            } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 345 created "MessageGroupId" -> "" using Stryker.Core.Mutators.StringMutator
[12:29:56 DBG] Mutant 346 created "SequenceNumber" -> "" using Stryker.Core.Mutators.StringMutator
[12:29:56 DBG] Mutant 347 created "SentTimestamp" -> "" using Stryker.Core.Mutators.StringMutator
[12:29:56 DBG] Mutant 348 created string.IsNullOrEmpty(deduplicationId) -> (deduplicationId!=null) using Stryker.Core.Mutators.StringEmptyMutator
[12:29:56 DBG] Mutant 349 created string.IsNullOrEmpty(deduplicationId) -> (deduplicationId!="") using Stryker.Core.Mutators.StringEmptyMutator
[12:29:56 DBG] Mutant 350 created string.IsNullOrEmpty(deduplicationId) -> !(string.IsNullOrEmpty(deduplicationId)) using Stryker.Core.Mutators.NegateConditionMutator
[12:29:56 DBG] Mutant 351 created {
                    // Generate a deduplication ID based on the message body
                    deduplicationId = GenerateMessageBodyHash(sqsMessage.Body);
                } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 352 created queue.DeduplicationIds.TryAdd(deduplicationId, sqsMessage.MessageId) -> !(queue.DeduplicationIds.TryAdd(deduplicationId, sqsMessage.MessageId)) using Stryker.Core.Mutators.NegateConditionMutator
[12:29:56 DBG] Mutant 353 created {
                    EnqueueFifoMessage(queue, request.MessageGroupId, sqsMessage);
                } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 354 created EnqueueFifoMessage(queue, request.MessageGroupId, sqsMessage); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:56 DBG] Mutant 355 created {
                queue.Messages.Writer.TryWrite(sqsMessage);
            } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 356 created queue.Messages.Writer.TryWrite(sqsMessage); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:56 DBG] Mutant 357 created new PublishResponse
        {
            MessageId = messageId
        } -> new PublishResponse
{} using Stryker.Core.Mutators.ObjectCreationMutator
[12:29:56 DBG] Mutant 358 created {
        queue.MessageGroups.AddOrUpdate(messageGroupId, 
            _ => new ConcurrentQueue<Message>([sqsMessage]), 
            (_, existingQueue) =>
            {
                existingQueue.Enqueue(sqsMessage);
                return existingQueue;
            });
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 359 created queue.MessageGroups.AddOrUpdate(messageGroupId, 
            _ => new ConcurrentQueue<Message>([sqsMessage]), 
            (_, existingQueue) =>
            {
                existingQueue.Enqueue(sqsMessage);
                return existingQueue;
            }); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:56 DBG] Mutant 360 created {
                existingQueue.Enqueue(sqsMessage);
                return existingQueue;
            } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 361 created existingQueue.Enqueue(sqsMessage); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:56 DBG] Mutant 362 created {
        var response = new PublishBatchResponse
        {
            Successful = [],
            Failed = []
        };
        
        foreach (var entry in request.PublishBatchRequestEntries)
        {
            try
            {
                var messageId = Guid.NewGuid().ToString();
                PublishSingleMessage(entry, request.TopicArn, messageId);
                response.Successful.Add(new PublishBatchResultEntry
                {
                    Id = entry.Id,
                    MessageId = messageId
                });
            }
#pragma warning disable CA1031
            catch (Exception ex)
#pragma warning restore CA1031
            {
                response.Failed.Add(new SnsBatchResultErrorEntry
                {
                    Id = entry.Id,
                    Code = "InternalError",
                    Message = ex.Message,
                    SenderFault = false
                });
            }
        }
        
        return response.SetCommonProperties();
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 363 created new PublishBatchResponse
        {
            Successful = [],
            Failed = []
        } -> new PublishBatchResponse
{} using Stryker.Core.Mutators.ObjectCreationMutator
[12:29:56 DBG] Mutant 364 created {
            try
            {
                var messageId = Guid.NewGuid().ToString();
                PublishSingleMessage(entry, request.TopicArn, messageId);
                response.Successful.Add(new PublishBatchResultEntry
                {
                    Id = entry.Id,
                    MessageId = messageId
                });
            }
#pragma warning disable CA1031
            catch (Exception ex)
#pragma warning restore CA1031
            {
                response.Failed.Add(new SnsBatchResultErrorEntry
                {
                    Id = entry.Id,
                    Code = "InternalError",
                    Message = ex.Message,
                    SenderFault = false
                });
            }
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 365 created {
                var messageId = Guid.NewGuid().ToString();
                PublishSingleMessage(entry, request.TopicArn, messageId);
                response.Successful.Add(new PublishBatchResultEntry
                {
                    Id = entry.Id,
                    MessageId = messageId
                });
            } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 366 created PublishSingleMessage(entry, request.TopicArn, messageId); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:56 DBG] Mutant 367 created new PublishBatchResultEntry
                {
                    Id = entry.Id,
                    MessageId = messageId
                } -> new PublishBatchResultEntry
{} using Stryker.Core.Mutators.ObjectCreationMutator
[12:29:56 DBG] Mutant 368 created {
                response.Failed.Add(new SnsBatchResultErrorEntry
                {
                    Id = entry.Id,
                    Code = "InternalError",
                    Message = ex.Message,
                    SenderFault = false
                });
            } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 369 created new SnsBatchResultErrorEntry
                {
                    Id = entry.Id,
                    Code = "InternalError",
                    Message = ex.Message,
                    SenderFault = false
                } -> new SnsBatchResultErrorEntry
{} using Stryker.Core.Mutators.ObjectCreationMutator
[12:29:56 DBG] Mutant 370 created "InternalError" -> "" using Stryker.Core.Mutators.StringMutator
[12:29:56 DBG] Mutant 371 created false -> true using Stryker.Core.Mutators.BooleanMutator
[12:29:56 DBG] Mutant 372 created {
        foreach (var (subscription, queue) in _subscriptionsAndQueues)
        {
            var sqsMessage = CreateSqsMessage(entry, topicArn, messageId, subscription);
            
            if (!queue.Messages.Writer.TryWrite(sqsMessage))
            {
                throw new InvalidOperationException("Failed to write message to queue.");
            }
        }
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 373 created {
            var sqsMessage = CreateSqsMessage(entry, topicArn, messageId, subscription);
            
            if (!queue.Messages.Writer.TryWrite(sqsMessage))
            {
                throw new InvalidOperationException("Failed to write message to queue.");
            }
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 374 created !queue.Messages.Writer.TryWrite(sqsMessage) -> queue.Messages.Writer.TryWrite(sqsMessage) using Stryker.Core.Mutators.PrefixUnaryMutator
[12:29:56 DBG] Mutant 375 created {
                throw new InvalidOperationException("Failed to write message to queue.");
            } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 376 created throw new InvalidOperationException("Failed to write message to queue."); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:56 DBG] Mutant 377 created "Failed to write message to queue." -> "" using Stryker.Core.Mutators.StringMutator
[12:29:56 DBG] Mutant 378 created {
        var message = subscription.Raw
            ? CreateRawSqsMessage(request.Message, request.MessageAttributes)
            : CreateFormattedSqsMessage(request, messageId);

#pragma warning disable CA5351
        var hash = MD5.HashData(Encoding.UTF8.GetBytes(message.Body));
#pragma warning restore CA5351
#pragma warning disable CA1308
        message.MD5OfBody = Convert.ToHexString(hash).ToLowerInvariant();
#pragma warning restore CA1308
        
        return message;
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 379 created subscription.Raw
            ? CreateRawSqsMessage(request.Message, request.MessageAttributes)
            : CreateFormattedSqsMessage(request, messageId) -> (true?CreateRawSqsMessage(request.Message, request.MessageAttributes)
:CreateFormattedSqsMessage(request, messageId)) using Stryker.Core.Mutators.ConditionalExpressionMutator
[12:29:56 DBG] Mutant 380 created subscription.Raw
            ? CreateRawSqsMessage(request.Message, request.MessageAttributes)
            : CreateFormattedSqsMessage(request, messageId) -> (false?CreateRawSqsMessage(request.Message, request.MessageAttributes)
:CreateFormattedSqsMessage(request, messageId)) using Stryker.Core.Mutators.ConditionalExpressionMutator
[12:29:56 DBG] Mutant 381 created {
        var message = subscription.Raw
            ? CreateRawSqsMessage(entry.Message, entry.MessageAttributes)
            : CreateFormattedSqsMessage(entry, topicArn, messageId);

#pragma warning disable CA5351
        var hash = MD5.HashData(Encoding.UTF8.GetBytes(message.Body));
#pragma warning restore CA5351
#pragma warning disable CA1308
        message.MD5OfBody = Convert.ToHexString(hash).ToLowerInvariant();
#pragma warning restore CA1308
        
        return message;
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 382 created subscription.Raw
            ? CreateRawSqsMessage(entry.Message, entry.MessageAttributes)
            : CreateFormattedSqsMessage(entry, topicArn, messageId) -> (true?CreateRawSqsMessage(entry.Message, entry.MessageAttributes)
:CreateFormattedSqsMessage(entry, topicArn, messageId)) using Stryker.Core.Mutators.ConditionalExpressionMutator
[12:29:56 DBG] Mutant 383 created subscription.Raw
            ? CreateRawSqsMessage(entry.Message, entry.MessageAttributes)
            : CreateFormattedSqsMessage(entry, topicArn, messageId) -> (false?CreateRawSqsMessage(entry.Message, entry.MessageAttributes)
:CreateFormattedSqsMessage(entry, topicArn, messageId)) using Stryker.Core.Mutators.ConditionalExpressionMutator
[12:29:56 DBG] Mutant 384 created {
        return new Message
        {
            Body = message,
            MessageAttributes = attributes.ToDictionary(
                kvp => kvp.Key,
                kvp => new SqsMessageAttributeValue
                {
                    DataType = kvp.Value.DataType,
                    StringValue = kvp.Value.StringValue,
                    BinaryValue = kvp.Value.BinaryValue
                })
        };
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 385 created new Message
        {
            Body = message,
            MessageAttributes = attributes.ToDictionary(
                kvp => kvp.Key,
                kvp => new SqsMessageAttributeValue
                {
                    DataType = kvp.Value.DataType,
                    StringValue = kvp.Value.StringValue,
                    BinaryValue = kvp.Value.BinaryValue
                })
        } -> new Message
{} using Stryker.Core.Mutators.ObjectCreationMutator
[12:29:56 DBG] Mutant 386 created new SqsMessageAttributeValue
                {
                    DataType = kvp.Value.DataType,
                    StringValue = kvp.Value.StringValue,
                    BinaryValue = kvp.Value.BinaryValue
                } -> new SqsMessageAttributeValue
{} using Stryker.Core.Mutators.ObjectCreationMutator
[12:29:56 DBG] Mutant 387 created {
        var snsMessage = CreateSnsMessage(messageId, request.TopicArn, request.Subject, request.Message, request.MessageAttributes);
        return CreateFormattedMessage(snsMessage, request.TopicArn);
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 388 created {
        var snsMessage = CreateSnsMessage(messageId, topicArn, entry.Subject, entry.Message, entry.MessageAttributes);
        return CreateFormattedMessage(snsMessage, topicArn);
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 389 created {
        var snsMessage = new JsonObject
        {
            ["Type"] = "Notification",
            ["MessageId"] = messageId,
            ["TopicArn"] = topicArn,
            ["Message"] = message,
            ["Timestamp"] = _timeProvider.GetUtcNow().ToString("yyyy-MM-ddTHH:mm:ss.fffZ", DateTimeFormatInfo.InvariantInfo),
            ["SignatureVersion"] = "1",
            ["Signature"] = "EXAMPLE",
            ["SigningCertURL"] = "EXAMPLE",
            ["UnsubscribeURL"] = "EXAMPLE"
        };

        if (subject is not null)
        {
            snsMessage["Subject"] = subject;
        }

        if (attributes.Count > 0)
        {
            var messageAttributes = new JsonObject();
            foreach (var (key, value) in attributes)
            {
                messageAttributes[key] = new JsonObject
                {
                    ["Type"] = value.DataType,
                    ["Value"] = value.StringValue ?? Convert.ToBase64String(value.BinaryValue.ToArray())
                };
            }
            snsMessage["MessageAttributes"] = messageAttributes;
        }

        return snsMessage;
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 390 created new JsonObject
        {
            ["Type"] = "Notification",
            ["MessageId"] = messageId,
            ["TopicArn"] = topicArn,
            ["Message"] = message,
            ["Timestamp"] = _timeProvider.GetUtcNow().ToString("yyyy-MM-ddTHH:mm:ss.fffZ", DateTimeFormatInfo.InvariantInfo),
            ["SignatureVersion"] = "1",
            ["Signature"] = "EXAMPLE",
            ["SigningCertURL"] = "EXAMPLE",
            ["UnsubscribeURL"] = "EXAMPLE"
        } -> new JsonObject
{} using Stryker.Core.Mutators.ObjectCreationMutator
[12:29:56 DBG] Mutant 391 created "Type" -> "" using Stryker.Core.Mutators.StringMutator
[12:29:56 DBG] Mutant 392 created "Notification" -> "" using Stryker.Core.Mutators.StringMutator
[12:29:56 DBG] Mutant 393 created "MessageId" -> "" using Stryker.Core.Mutators.StringMutator
[12:29:56 DBG] Mutant 394 created "TopicArn" -> "" using Stryker.Core.Mutators.StringMutator
[12:29:56 DBG] Mutant 395 created "Message" -> "" using Stryker.Core.Mutators.StringMutator
[12:29:56 DBG] Mutant 396 created "Timestamp" -> "" using Stryker.Core.Mutators.StringMutator
[12:29:56 DBG] Mutant 397 created "yyyy-MM-ddTHH:mm:ss.fffZ" -> "" using Stryker.Core.Mutators.StringMutator
[12:29:56 DBG] Mutant 398 created "SignatureVersion" -> "" using Stryker.Core.Mutators.StringMutator
[12:29:56 DBG] Mutant 399 created "1" -> "" using Stryker.Core.Mutators.StringMutator
[12:29:56 DBG] Mutant 400 created "Signature" -> "" using Stryker.Core.Mutators.StringMutator
[12:29:56 DBG] Mutant 401 created "EXAMPLE" -> "" using Stryker.Core.Mutators.StringMutator
[12:29:56 DBG] Mutant 402 created "SigningCertURL" -> "" using Stryker.Core.Mutators.StringMutator
[12:29:56 DBG] Mutant 403 created "EXAMPLE" -> "" using Stryker.Core.Mutators.StringMutator
[12:29:56 DBG] Mutant 404 created "UnsubscribeURL" -> "" using Stryker.Core.Mutators.StringMutator
[12:29:56 DBG] Mutant 405 created "EXAMPLE" -> "" using Stryker.Core.Mutators.StringMutator
[12:29:56 DBG] Mutant 406 created not null -> null using Stryker.Core.Mutators.IsPatternExpressionMutator
[12:29:56 DBG] Mutant 407 created {
            snsMessage["Subject"] = subject;
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 408 created "Subject" -> "" using Stryker.Core.Mutators.StringMutator
[12:29:56 DBG] Mutant 409 created attributes.Count > 0 -> attributes.Count < 0 using Stryker.Core.Mutators.BinaryExpressionMutator
[12:29:56 DBG] Mutant 410 created attributes.Count > 0 -> attributes.Count >= 0 using Stryker.Core.Mutators.BinaryExpressionMutator
[12:29:56 DBG] Mutant 411 created attributes.Count > 0 -> !(attributes.Count > 0) using Stryker.Core.Mutators.NegateConditionMutator
[12:29:56 DBG] Mutant 412 created attributes.Count -> attributes.Sum using Stryker.Core.Mutators.LinqMutator
[12:29:56 DBG] Mutant 413 created {
            var messageAttributes = new JsonObject();
            foreach (var (key, value) in attributes)
            {
                messageAttributes[key] = new JsonObject
                {
                    ["Type"] = value.DataType,
                    ["Value"] = value.StringValue ?? Convert.ToBase64String(value.BinaryValue.ToArray())
                };
            }
            snsMessage["MessageAttributes"] = messageAttributes;
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 414 created {
                messageAttributes[key] = new JsonObject
                {
                    ["Type"] = value.DataType,
                    ["Value"] = value.StringValue ?? Convert.ToBase64String(value.BinaryValue.ToArray())
                };
            } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:56 DBG] Mutant 415 created new JsonObject
                {
                    ["Type"] = value.DataType,
                    ["Value"] = value.StringValue ?? Convert.ToBase64String(value.BinaryValue.ToArray())
                } -> new JsonObject
{} using Stryker.Core.Mutators.ObjectCreationMutator
[12:29:56 DBG] Mutant 416 created "Type" -> "" using Stryker.Core.Mutators.StringMutator
[12:29:56 DBG] Mutant 417 created "Value" -> "" using Stryker.Core.Mutators.StringMutator
[12:29:57 DBG] Mutant 418 created value.StringValue ?? Convert.ToBase64String(value.BinaryValue.ToArray()) -> Convert.ToBase64String(value.BinaryValue.ToArray()) using Stryker.Core.Mutators.NullCoalescingExpressionMutator
[12:29:57 DBG] Mutant 419 created "MessageAttributes" -> "" using Stryker.Core.Mutators.StringMutator
[12:29:57 DBG] Mutant 420 created {
        return new Message
        {
            Body = snsMessage.ToJsonString(),
            MessageAttributes = new Dictionary<string, SqsMessageAttributeValue>
            {
                ["TopicArn"] = new()
                {
                    DataType = "String",
                    StringValue = topicArn
                }
            }
        };
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 421 created new Message
        {
            Body = snsMessage.ToJsonString(),
            MessageAttributes = new Dictionary<string, SqsMessageAttributeValue>
            {
                ["TopicArn"] = new()
                {
                    DataType = "String",
                    StringValue = topicArn
                }
            }
        } -> new Message
{} using Stryker.Core.Mutators.ObjectCreationMutator
[12:29:57 DBG] Mutant 422 created new Dictionary<string, SqsMessageAttributeValue>
            {
                ["TopicArn"] = new()
                {
                    DataType = "String",
                    StringValue = topicArn
                }
            } -> new Dictionary<string, SqsMessageAttributeValue>
{} using Stryker.Core.Mutators.ObjectCreationMutator
[12:29:57 DBG] Mutant 423 created "TopicArn" -> "" using Stryker.Core.Mutators.StringMutator
[12:29:57 DBG] Mutant 424 created "String" -> "" using Stryker.Core.Mutators.StringMutator
[12:29:57 DBG] Mutant 425 created {
        var hashBytes = SHA256.HashData(Encoding.UTF8.GetBytes(messageBody));
        return Convert.ToBase64String(hashBytes);
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 426 created {
        var lockTaken = false;
        try
        {
            _sequenceSpinLock.Enter(ref lockTaken);
            return ++_sequenceNumber;
        }
        finally
        {
            if (lockTaken) _sequenceSpinLock.Exit();
        }
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 427 created false -> true using Stryker.Core.Mutators.BooleanMutator
[12:29:57 DBG] Mutant 428 created {
            _sequenceSpinLock.Enter(ref lockTaken);
            return ++_sequenceNumber;
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 429 created _sequenceSpinLock.Enter(ref lockTaken); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 430 created ++_sequenceNumber -> --_sequenceNumber using Stryker.Core.Mutators.PrefixUnaryMutator
[12:29:57 DBG] Mutant 431 created {
            if (lockTaken) _sequenceSpinLock.Exit();
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 432 created lockTaken -> !(lockTaken) using Stryker.Core.Mutators.NegateConditionMutator
[12:29:57 DBG] Mutant 433 created _sequenceSpinLock.Exit(); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutating /Users/stuart.lang/RiderProjects/ConsoleApp9/src/LocalSqsSnsMessaging/SnsPublishActionFactory.cs
[12:29:57 DBG] Mutant 434 created {
        ArgumentNullException.ThrowIfNull(topicArn);
        ArgumentNullException.ThrowIfNull(bus);
        
        var topicName = GetNameFromArn(topicArn);
        if (!bus.Topics.TryGetValue(topicName, out var topic))
        {
            throw new InvalidOperationException($"Topic not found: {topicArn}");
        }

        var subscriptionsAndQueues = bus.Subscriptions.Values
            .Where(s => s.TopicArn == topicArn)
            .Select(subscription => (
                Subscription: subscription,
                Queue: bus.Queues.GetValueOrDefault(GetNameFromArn(subscription.EndPoint))
            ))
            .Where(x => x.Queue is not null)
            .ToList();

        topic.PublishAction = new SnsPublishAction(subscriptionsAndQueues!, bus.TimeProvider);
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 435 created ArgumentNullException.ThrowIfNull(topicArn); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 436 created ArgumentNullException.ThrowIfNull(bus); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 437 created !bus.Topics.TryGetValue(topicName, out var topic) -> bus.Topics.TryGetValue(topicName, out var topic) using Stryker.Core.Mutators.PrefixUnaryMutator
[12:29:57 DBG] Mutant 438 created {
            throw new InvalidOperationException($"Topic not found: {topicArn}");
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 439 created throw new InvalidOperationException($"Topic not found: {topicArn}"); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 440 created $"Topic not found: {topicArn}" -> $"" using Stryker.Core.Mutators.InterpolatedStringMutator
[12:29:57 DBG] Mutant 441 created s.TopicArn == topicArn -> s.TopicArn != topicArn using Stryker.Core.Mutators.BinaryExpressionMutator
[12:29:57 DBG] Mutant 442 created not null -> null using Stryker.Core.Mutators.IsPatternExpressionMutator
[12:29:57 DBG] Mutant 443 created arn.Split(':').Last -> arn.Split(':').First using Stryker.Core.Mutators.LinqMutator
[12:29:57 DBG] Mutating /Users/stuart.lang/RiderProjects/ConsoleApp9/src/LocalSqsSnsMessaging/SnsSubscription.cs
[12:29:57 DBG] Mutating /Users/stuart.lang/RiderProjects/ConsoleApp9/src/LocalSqsSnsMessaging/SnsTopicResource.cs
[12:29:57 DBG] Mutating /Users/stuart.lang/RiderProjects/ConsoleApp9/src/LocalSqsSnsMessaging/SqsClient/InMemorySqsClient.cs
[12:29:57 DBG] Mutant 444 created {
        _bus = bus;
        _paginators = new(() => GetPaginatorFactory(this));
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 445 created {
        ArgumentNullException.ThrowIfNull(queueUrl);
        
        var queueName = GetQueueNameFromUrl(queueUrl);
        if (_bus.Queues.TryGetValue(queueName, out var queue))
        {
            return Task.FromResult(queue.Attributes);
        }

        throw new QueueDoesNotExistException($"Queue {queueUrl} does not exist.");
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 446 created ArgumentNullException.ThrowIfNull(queueUrl); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 447 created _bus.Queues.TryGetValue(queueName, out var queue) -> !(_bus.Queues.TryGetValue(queueName, out var queue)) using Stryker.Core.Mutators.NegateConditionMutator
[12:29:57 DBG] Mutant 448 created {
            return Task.FromResult(queue.Attributes);
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 449 created throw new QueueDoesNotExistException($"Queue {queueUrl} does not exist."); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 450 created $"Queue {queueUrl} does not exist." -> $"" using Stryker.Core.Mutators.InterpolatedStringMutator
[12:29:57 DBG] Mutant 451 created {
        ArgumentNullException.ThrowIfNull(queueUrl);
        ArgumentNullException.ThrowIfNull(attributes);
        
        var queueName = GetQueueNameFromUrl(queueUrl);
        if (!_bus.Queues.TryGetValue(queueName, out var queue))
        {
            throw new QueueDoesNotExistException($"Queue {queueName} does not exist.");
        }

        foreach (var (key, value) in attributes)
        {
            if (InternalAttributes.Contains(key))
            {
                throw new InvalidOperationException($"Cannot set internal attribute {key}");
            }
            
            queue.Attributes[key] = value;
        }

        return Task.CompletedTask;
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 452 created ArgumentNullException.ThrowIfNull(queueUrl); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 453 created ArgumentNullException.ThrowIfNull(attributes); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 454 created !_bus.Queues.TryGetValue(queueName, out var queue) -> _bus.Queues.TryGetValue(queueName, out var queue) using Stryker.Core.Mutators.PrefixUnaryMutator
[12:29:57 DBG] Mutant 455 created {
            throw new QueueDoesNotExistException($"Queue {queueName} does not exist.");
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 456 created throw new QueueDoesNotExistException($"Queue {queueName} does not exist."); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 457 created $"Queue {queueName} does not exist." -> $"" using Stryker.Core.Mutators.InterpolatedStringMutator
[12:29:57 DBG] Mutant 458 created {
            if (InternalAttributes.Contains(key))
            {
                throw new InvalidOperationException($"Cannot set internal attribute {key}");
            }
            
            queue.Attributes[key] = value;
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 459 created InternalAttributes.Contains(key) -> !(InternalAttributes.Contains(key)) using Stryker.Core.Mutators.NegateConditionMutator
[12:29:57 DBG] Mutant 460 created {
                throw new InvalidOperationException($"Cannot set internal attribute {key}");
            } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 461 created throw new InvalidOperationException($"Cannot set internal attribute {key}"); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 462 created $"Cannot set internal attribute {key}" -> $"" using Stryker.Core.Mutators.InterpolatedStringMutator
[12:29:57 DBG] Mutant 463 created {
        ArgumentNullException.ThrowIfNull(request);
        
        var queueName = GetQueueNameFromUrl(request.QueueUrl);
        if (!_bus.Queues.TryGetValue(queueName, out var queue))
        {
            throw new QueueDoesNotExistException($"Queue {request.QueueUrl} does not exist.");
        }
        
        if (!IsReceiptHandleValid(request.ReceiptHandle, queue.Arn))
        {
            throw new ReceiptHandleIsInvalidException($"Receipt handle {request.ReceiptHandle} is invalid.");
        }
        
        if (queue.InFlightMessages.TryGetValue(request.ReceiptHandle, out var message))
        {
            var (_, inFlightExpireCallback) = message;
            inFlightExpireCallback.UpdateTimeout(TimeSpan.FromSeconds(request.VisibilityTimeout));
            return Task.FromResult(new ChangeMessageVisibilityResponse().SetCommonProperties());
        }

        // If message is in-flight, it should be updated by the expiration handler
        return Task.FromResult(new ChangeMessageVisibilityResponse().SetCommonProperties());
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 464 created ArgumentNullException.ThrowIfNull(request); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 465 created !_bus.Queues.TryGetValue(queueName, out var queue) -> _bus.Queues.TryGetValue(queueName, out var queue) using Stryker.Core.Mutators.PrefixUnaryMutator
[12:29:57 DBG] Mutant 466 created {
            throw new QueueDoesNotExistException($"Queue {request.QueueUrl} does not exist.");
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 467 created throw new QueueDoesNotExistException($"Queue {request.QueueUrl} does not exist."); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 468 created $"Queue {request.QueueUrl} does not exist." -> $"" using Stryker.Core.Mutators.InterpolatedStringMutator
[12:29:57 DBG] Mutant 469 created !IsReceiptHandleValid(request.ReceiptHandle, queue.Arn) -> IsReceiptHandleValid(request.ReceiptHandle, queue.Arn) using Stryker.Core.Mutators.PrefixUnaryMutator
[12:29:57 DBG] Mutant 470 created {
            throw new ReceiptHandleIsInvalidException($"Receipt handle {request.ReceiptHandle} is invalid.");
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 471 created throw new ReceiptHandleIsInvalidException($"Receipt handle {request.ReceiptHandle} is invalid."); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 472 created $"Receipt handle {request.ReceiptHandle} is invalid." -> $"" using Stryker.Core.Mutators.InterpolatedStringMutator
[12:29:57 DBG] Mutant 473 created queue.InFlightMessages.TryGetValue(request.ReceiptHandle, out var message) -> !(queue.InFlightMessages.TryGetValue(request.ReceiptHandle, out var message)) using Stryker.Core.Mutators.NegateConditionMutator
[12:29:57 DBG] Mutant 474 created {
            var (_, inFlightExpireCallback) = message;
            inFlightExpireCallback.UpdateTimeout(TimeSpan.FromSeconds(request.VisibilityTimeout));
            return Task.FromResult(new ChangeMessageVisibilityResponse().SetCommonProperties());
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 475 created inFlightExpireCallback.UpdateTimeout(TimeSpan.FromSeconds(request.VisibilityTimeout)); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 476 created {
        var bufferLength = receiptHandle.Length * 3 / 4;
        var buffer = bufferLength <= 1024 ? stackalloc byte[bufferLength] : new byte[bufferLength];
        if (!Convert.TryFromBase64String(receiptHandle, buffer, out var written))
        {
            return false;
        }
        var decoded = Encoding.UTF8.GetString(buffer[..written]);
        var parts = decoded.Split(' ');
        return parts switch
        {
            [_, var secondItem, _, _] => secondItem.Equals(queueArn, StringComparison.OrdinalIgnoreCase),
            _ => false
        };
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 477 created receiptHandle.Length * 3 / 4 -> receiptHandle.Length * 3 * 4 using Stryker.Core.Mutators.BinaryExpressionMutator
[12:29:57 DBG] Mutant 478 created receiptHandle.Length * 3 -> receiptHandle.Length / 3 using Stryker.Core.Mutators.BinaryExpressionMutator
[12:29:57 DBG] Mutant 479 created bufferLength <= 1024 ? stackalloc byte[bufferLength] : new byte[bufferLength] -> (true?stackalloc byte[bufferLength] :new byte[bufferLength]) using Stryker.Core.Mutators.ConditionalExpressionMutator
[12:29:57 DBG] Mutant 480 created bufferLength <= 1024 ? stackalloc byte[bufferLength] : new byte[bufferLength] -> (false?stackalloc byte[bufferLength] :new byte[bufferLength]) using Stryker.Core.Mutators.ConditionalExpressionMutator
[12:29:57 DBG] Mutant 481 created bufferLength <= 1024 -> bufferLength > 1024 using Stryker.Core.Mutators.BinaryExpressionMutator
[12:29:57 DBG] Mutant 482 created bufferLength <= 1024 -> bufferLength < 1024 using Stryker.Core.Mutators.BinaryExpressionMutator
[12:29:57 DBG] Mutant 483 created !Convert.TryFromBase64String(receiptHandle, buffer, out var written) -> Convert.TryFromBase64String(receiptHandle, buffer, out var written) using Stryker.Core.Mutators.PrefixUnaryMutator
[12:29:57 DBG] Mutant 484 created {
            return false;
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 485 created false -> true using Stryker.Core.Mutators.BooleanMutator
[12:29:57 DBG] Mutant 486 created false -> true using Stryker.Core.Mutators.BooleanMutator
[12:29:57 DBG] Mutant 487 created {
        return CreateQueueAsync(new CreateQueueRequest
        {
            QueueName = queueName,
        }, cancellationToken);
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 488 created new CreateQueueRequest
        {
            QueueName = queueName,
        } -> new CreateQueueRequest
{} using Stryker.Core.Mutators.ObjectCreationMutator
[12:29:57 DBG] Mutant 489 created {
        ArgumentNullException.ThrowIfNull(request);
        
        var queueUrl = $"https://sqs.{_bus.CurrentRegion}.amazonaws.com/{_bus.CurrentAccountId}/{request.QueueName}";
        var visibilityTimeoutParsed = request.Attributes.TryGetValue(QueueAttributeName.VisibilityTimeout, out var visibilityTimeout)
            ? TimeSpan.FromSeconds(int.Parse(visibilityTimeout, NumberFormatInfo.InvariantInfo))
            : TimeSpan.FromSeconds(30);

        var queue = new SqsQueueResource
        {
            Name = request.QueueName,
            Region = _bus.CurrentRegion,
            AccountId = _bus.CurrentAccountId,
            Url = queueUrl,
            VisibilityTimeout = visibilityTimeoutParsed
        };
        
        foreach (var requestAttribute in request.Attributes)
        {
            if (InternalAttributes.Contains(requestAttribute.Key))
            {
                throw new InvalidOperationException($"Cannot set internal attribute {requestAttribute.Key}");
            }

            queue.Attributes[requestAttribute.Key] = requestAttribute.Value;
        }
        queue.Attributes.Add("QueueArn", queue.Arn);
        UpdateQueueProperties(queue);
        _bus.Queues.TryAdd(request.QueueName, queue);

        var response = new CreateQueueResponse
        {
            QueueUrl = queueUrl
        };
        
        return Task.FromResult(response.SetCommonProperties());
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 490 created ArgumentNullException.ThrowIfNull(request); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 491 created $"https://sqs.{_bus.CurrentRegion}.amazonaws.com/{_bus.CurrentAccountId}/{request.QueueName}" -> $"" using Stryker.Core.Mutators.InterpolatedStringMutator
[12:29:57 DBG] Mutant 492 created request.Attributes.TryGetValue(QueueAttributeName.VisibilityTimeout, out var visibilityTimeout)
            ? TimeSpan.FromSeconds(int.Parse(visibilityTimeout, NumberFormatInfo.InvariantInfo))
            : TimeSpan.FromSeconds(30) -> (true?TimeSpan.FromSeconds(int.Parse(visibilityTimeout, NumberFormatInfo.InvariantInfo))
:TimeSpan.FromSeconds(30)) using Stryker.Core.Mutators.ConditionalExpressionMutator
[12:29:57 DBG] Mutant 493 created request.Attributes.TryGetValue(QueueAttributeName.VisibilityTimeout, out var visibilityTimeout)
            ? TimeSpan.FromSeconds(int.Parse(visibilityTimeout, NumberFormatInfo.InvariantInfo))
            : TimeSpan.FromSeconds(30) -> (false?TimeSpan.FromSeconds(int.Parse(visibilityTimeout, NumberFormatInfo.InvariantInfo))
:TimeSpan.FromSeconds(30)) using Stryker.Core.Mutators.ConditionalExpressionMutator
[12:29:57 DBG] Mutant 494 created new SqsQueueResource
        {
            Name = request.QueueName,
            Region = _bus.CurrentRegion,
            AccountId = _bus.CurrentAccountId,
            Url = queueUrl,
            VisibilityTimeout = visibilityTimeoutParsed
        } -> new SqsQueueResource
{} using Stryker.Core.Mutators.ObjectCreationMutator
[12:29:57 DBG] Mutant 495 created {
            if (InternalAttributes.Contains(requestAttribute.Key))
            {
                throw new InvalidOperationException($"Cannot set internal attribute {requestAttribute.Key}");
            }

            queue.Attributes[requestAttribute.Key] = requestAttribute.Value;
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 496 created InternalAttributes.Contains(requestAttribute.Key) -> !(InternalAttributes.Contains(requestAttribute.Key)) using Stryker.Core.Mutators.NegateConditionMutator
[12:29:57 DBG] Mutant 497 created {
                throw new InvalidOperationException($"Cannot set internal attribute {requestAttribute.Key}");
            } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 498 created throw new InvalidOperationException($"Cannot set internal attribute {requestAttribute.Key}"); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 499 created $"Cannot set internal attribute {requestAttribute.Key}" -> $"" using Stryker.Core.Mutators.InterpolatedStringMutator
[12:29:57 DBG] Mutant 500 created queue.Attributes.Add("QueueArn", queue.Arn); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 501 created "QueueArn" -> "" using Stryker.Core.Mutators.StringMutator
[12:29:57 DBG] Mutant 502 created UpdateQueueProperties(queue); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 503 created _bus.Queues.TryAdd(request.QueueName, queue); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 504 created new CreateQueueResponse
        {
            QueueUrl = queueUrl
        } -> new CreateQueueResponse
{} using Stryker.Core.Mutators.ObjectCreationMutator
[12:29:57 DBG] Mutant 505 created {
        return DeleteMessageAsync(new DeleteMessageRequest
        {
            QueueUrl = queueUrl,
            ReceiptHandle = receiptHandle
        }, cancellationToken);
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 506 created new DeleteMessageRequest
        {
            QueueUrl = queueUrl,
            ReceiptHandle = receiptHandle
        } -> new DeleteMessageRequest
{} using Stryker.Core.Mutators.ObjectCreationMutator
[12:29:57 DBG] Mutant 507 created {
        ArgumentNullException.ThrowIfNull(request);
        
        var queueName = GetQueueNameFromUrl(request.QueueUrl);
        if (!_bus.Queues.TryGetValue(queueName, out var queue))
        {
            throw new QueueDoesNotExistException($"Queue {request.QueueUrl} does not exist.");
        }

        if (queue.InFlightMessages.Remove(request.ReceiptHandle, out var inFlightInfo))
        {
            var (message, expirationHandler) = inFlightInfo;
            expirationHandler.Dispose();

            if (queue.IsFifo)
            {
                // Remove the message from the MessageGroups if it's the last one in its group
                if (message.Attributes.TryGetValue("MessageGroupId", out var groupId))
                {
                    if (queue.MessageGroups.TryGetValue(groupId, out var groupQueue) && groupQueue.IsEmpty)
                    {
                        queue.MessageGroups.TryRemove(groupId, out _);
                    }
                }

                // Remove the deduplication ID if it exists
                if (message.Attributes.TryGetValue("MessageDeduplicationId", out var deduplicationId))
                {
                    queue.DeduplicationIds.TryRemove(deduplicationId, out _);
                }
            }

            return Task.FromResult(new DeleteMessageResponse().SetCommonProperties());
        }

        throw new ReceiptHandleIsInvalidException($"Receipt handle {request.ReceiptHandle} is invalid.");
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 508 created ArgumentNullException.ThrowIfNull(request); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 509 created !_bus.Queues.TryGetValue(queueName, out var queue) -> _bus.Queues.TryGetValue(queueName, out var queue) using Stryker.Core.Mutators.PrefixUnaryMutator
[12:29:57 DBG] Mutant 510 created {
            throw new QueueDoesNotExistException($"Queue {request.QueueUrl} does not exist.");
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 511 created throw new QueueDoesNotExistException($"Queue {request.QueueUrl} does not exist."); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 512 created $"Queue {request.QueueUrl} does not exist." -> $"" using Stryker.Core.Mutators.InterpolatedStringMutator
[12:29:57 DBG] Mutant 513 created queue.InFlightMessages.Remove(request.ReceiptHandle, out var inFlightInfo) -> !(queue.InFlightMessages.Remove(request.ReceiptHandle, out var inFlightInfo)) using Stryker.Core.Mutators.NegateConditionMutator
[12:29:57 DBG] Mutant 514 created {
            var (message, expirationHandler) = inFlightInfo;
            expirationHandler.Dispose();

            if (queue.IsFifo)
            {
                // Remove the message from the MessageGroups if it's the last one in its group
                if (message.Attributes.TryGetValue("MessageGroupId", out var groupId))
                {
                    if (queue.MessageGroups.TryGetValue(groupId, out var groupQueue) && groupQueue.IsEmpty)
                    {
                        queue.MessageGroups.TryRemove(groupId, out _);
                    }
                }

                // Remove the deduplication ID if it exists
                if (message.Attributes.TryGetValue("MessageDeduplicationId", out var deduplicationId))
                {
                    queue.DeduplicationIds.TryRemove(deduplicationId, out _);
                }
            }

            return Task.FromResult(new DeleteMessageResponse().SetCommonProperties());
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 515 created expirationHandler.Dispose(); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 516 created queue.IsFifo -> !(queue.IsFifo) using Stryker.Core.Mutators.NegateConditionMutator
[12:29:57 DBG] Mutant 517 created {
                // Remove the message from the MessageGroups if it's the last one in its group
                if (message.Attributes.TryGetValue("MessageGroupId", out var groupId))
                {
                    if (queue.MessageGroups.TryGetValue(groupId, out var groupQueue) && groupQueue.IsEmpty)
                    {
                        queue.MessageGroups.TryRemove(groupId, out _);
                    }
                }

                // Remove the deduplication ID if it exists
                if (message.Attributes.TryGetValue("MessageDeduplicationId", out var deduplicationId))
                {
                    queue.DeduplicationIds.TryRemove(deduplicationId, out _);
                }
            } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 518 created message.Attributes.TryGetValue("MessageGroupId", out var groupId) -> !(message.Attributes.TryGetValue("MessageGroupId", out var groupId)) using Stryker.Core.Mutators.NegateConditionMutator
[12:29:57 DBG] Mutant 519 created "MessageGroupId" -> "" using Stryker.Core.Mutators.StringMutator
[12:29:57 DBG] Mutant 520 created {
                    if (queue.MessageGroups.TryGetValue(groupId, out var groupQueue) && groupQueue.IsEmpty)
                    {
                        queue.MessageGroups.TryRemove(groupId, out _);
                    }
                } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 521 created queue.MessageGroups.TryGetValue(groupId, out var groupQueue) && groupQueue.IsEmpty -> queue.MessageGroups.TryGetValue(groupId, out var groupQueue) || groupQueue.IsEmpty using Stryker.Core.Mutators.BinaryExpressionMutator
[12:29:57 DBG] Mutant 522 created queue.MessageGroups.TryGetValue(groupId, out var groupQueue) && groupQueue.IsEmpty -> !(queue.MessageGroups.TryGetValue(groupId, out var groupQueue) && groupQueue.IsEmpty) using Stryker.Core.Mutators.NegateConditionMutator
[12:29:57 DBG] Mutant 523 created {
                        queue.MessageGroups.TryRemove(groupId, out _);
                    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 524 created message.Attributes.TryGetValue("MessageDeduplicationId", out var deduplicationId) -> !(message.Attributes.TryGetValue("MessageDeduplicationId", out var deduplicationId)) using Stryker.Core.Mutators.NegateConditionMutator
[12:29:57 DBG] Mutant 525 created "MessageDeduplicationId" -> "" using Stryker.Core.Mutators.StringMutator
[12:29:57 DBG] Mutant 526 created {
                    queue.DeduplicationIds.TryRemove(deduplicationId, out _);
                } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 527 created throw new ReceiptHandleIsInvalidException($"Receipt handle {request.ReceiptHandle} is invalid."); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 528 created $"Receipt handle {request.ReceiptHandle} is invalid." -> $"" using Stryker.Core.Mutators.InterpolatedStringMutator
[12:29:57 DBG] Mutant 529 created {
        return DeleteQueueAsync(new DeleteQueueRequest
        {
            QueueUrl = queueUrl
        }, cancellationToken);
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 530 created new DeleteQueueRequest
        {
            QueueUrl = queueUrl
        } -> new DeleteQueueRequest
{} using Stryker.Core.Mutators.ObjectCreationMutator
[12:29:57 DBG] Mutant 531 created {
        return GetQueueUrlAsync(new GetQueueUrlRequest
        {
            QueueName = queueName
        }, cancellationToken);
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 532 created new GetQueueUrlRequest
        {
            QueueName = queueName
        } -> new GetQueueUrlRequest
{} using Stryker.Core.Mutators.ObjectCreationMutator
[12:29:57 DBG] Mutant 533 created {
        return ListQueuesAsync(new ListQueuesRequest
        {
            QueueNamePrefix = queueNamePrefix
        }, cancellationToken);
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 534 created new ListQueuesRequest
        {
            QueueNamePrefix = queueNamePrefix
        } -> new ListQueuesRequest
{} using Stryker.Core.Mutators.ObjectCreationMutator
[12:29:57 DBG] Mutant 535 created {
        return ReceiveMessageAsync(new ReceiveMessageRequest
        {
            QueueUrl = queueUrl,
            MaxNumberOfMessages = 1,
            WaitTimeSeconds = 0
        }, cancellationToken);
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 536 created new ReceiveMessageRequest
        {
            QueueUrl = queueUrl,
            MaxNumberOfMessages = 1,
            WaitTimeSeconds = 0
        } -> new ReceiveMessageRequest
{} using Stryker.Core.Mutators.ObjectCreationMutator
[12:29:57 DBG] Mutant 537 created {
        ArgumentNullException.ThrowIfNull(request);
        
        if (request.MaxNumberOfMessages < 1)
        {
            request.MaxNumberOfMessages = 1;
        }

        var queueName = GetQueueNameFromUrl(request.QueueUrl);
        if (!_bus.Queues.TryGetValue(queueName, out var queue))
        {
            throw new QueueDoesNotExistException ($"Queue '{queueName}' does not exist.");
        }

        var reader = queue.Messages.Reader;
        List<Message> messages = [];
        var waitTime = TimeSpan.FromSeconds(request.WaitTimeSeconds);
        var visibilityTimeout =
            request.VisibilityTimeout > 0 ? TimeSpan.FromSeconds(request.VisibilityTimeout) : queue.VisibilityTimeout;
        
        cancellationToken.ThrowIfCancellationRequested();

        if (!queue.IsFifo)
        {
            ReadAvailableMessages();
            if (messages.Count > 0 || waitTime == TimeSpan.Zero)
            {
                return new ReceiveMessageResponse
                {
                    Messages = messages
                }.SetCommonProperties();
            }

            using var receiveTimeout = new CancellationTokenSource(waitTime, _bus.TimeProvider);
            using var linkedToken =
                CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, receiveTimeout.Token);

            try
            {
                await reader.WaitToReadAsync(linkedToken.Token).ConfigureAwait(true);
            }
            catch (OperationCanceledException)
            {
                // This could be due to either the overall timeout or the cancellationToken
            }

            ReadAvailableMessages();
        }
        else
        {
            messages = ReceiveFifoMessages(queue, request.MaxNumberOfMessages, visibilityTimeout, cancellationToken);
        }

        return new ReceiveMessageResponse
        {
            Messages = messages,
        }.SetCommonProperties();

        void ReadAvailableMessages()
        {
            while (reader.TryRead(out var message))
            {
                ReceiveMessageImpl(message, messages, queue, visibilityTimeout, request.MessageSystemAttributeNames);
                if (messages.Count >= request.MaxNumberOfMessages)
                {
                    break;
                }
            }
        }
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 538 created ArgumentNullException.ThrowIfNull(request); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 539 created request.MaxNumberOfMessages < 1 -> request.MaxNumberOfMessages > 1 using Stryker.Core.Mutators.BinaryExpressionMutator
[12:29:57 DBG] Mutant 540 created request.MaxNumberOfMessages < 1 -> request.MaxNumberOfMessages <= 1 using Stryker.Core.Mutators.BinaryExpressionMutator
[12:29:57 DBG] Mutant 541 created request.MaxNumberOfMessages < 1 -> !(request.MaxNumberOfMessages < 1) using Stryker.Core.Mutators.NegateConditionMutator
[12:29:57 DBG] Mutant 542 created {
            request.MaxNumberOfMessages = 1;
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 543 created !_bus.Queues.TryGetValue(queueName, out var queue) -> _bus.Queues.TryGetValue(queueName, out var queue) using Stryker.Core.Mutators.PrefixUnaryMutator
[12:29:57 DBG] Mutant 544 created {
            throw new QueueDoesNotExistException ($"Queue '{queueName}' does not exist.");
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 545 created throw new QueueDoesNotExistException ($"Queue '{queueName}' does not exist."); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 546 created $"Queue '{queueName}' does not exist." -> $"" using Stryker.Core.Mutators.InterpolatedStringMutator
[12:29:57 DBG] Mutant 547 created request.VisibilityTimeout > 0 ? TimeSpan.FromSeconds(request.VisibilityTimeout) : queue.VisibilityTimeout -> (true?TimeSpan.FromSeconds(request.VisibilityTimeout) :queue.VisibilityTimeout) using Stryker.Core.Mutators.ConditionalExpressionMutator
[12:29:57 DBG] Mutant 548 created request.VisibilityTimeout > 0 ? TimeSpan.FromSeconds(request.VisibilityTimeout) : queue.VisibilityTimeout -> (false?TimeSpan.FromSeconds(request.VisibilityTimeout) :queue.VisibilityTimeout) using Stryker.Core.Mutators.ConditionalExpressionMutator
[12:29:57 DBG] Mutant 549 created request.VisibilityTimeout > 0 -> request.VisibilityTimeout < 0 using Stryker.Core.Mutators.BinaryExpressionMutator
[12:29:57 DBG] Mutant 550 created request.VisibilityTimeout > 0 -> request.VisibilityTimeout >= 0 using Stryker.Core.Mutators.BinaryExpressionMutator
[12:29:57 DBG] Mutant 551 created cancellationToken.ThrowIfCancellationRequested(); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 552 created !queue.IsFifo -> queue.IsFifo using Stryker.Core.Mutators.PrefixUnaryMutator
[12:29:57 DBG] Mutant 553 created {
            ReadAvailableMessages();
            if (messages.Count > 0 || waitTime == TimeSpan.Zero)
            {
                return new ReceiveMessageResponse
                {
                    Messages = messages
                }.SetCommonProperties();
            }

            using var receiveTimeout = new CancellationTokenSource(waitTime, _bus.TimeProvider);
            using var linkedToken =
                CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, receiveTimeout.Token);

            try
            {
                await reader.WaitToReadAsync(linkedToken.Token).ConfigureAwait(true);
            }
            catch (OperationCanceledException)
            {
                // This could be due to either the overall timeout or the cancellationToken
            }

            ReadAvailableMessages();
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 554 created ReadAvailableMessages(); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 555 created messages.Count > 0 || waitTime == TimeSpan.Zero -> messages.Count > 0 && waitTime == TimeSpan.Zero using Stryker.Core.Mutators.BinaryExpressionMutator
[12:29:57 DBG] Mutant 556 created messages.Count > 0 || waitTime == TimeSpan.Zero -> !(messages.Count > 0 || waitTime == TimeSpan.Zero) using Stryker.Core.Mutators.NegateConditionMutator
[12:29:57 DBG] Mutant 557 created messages.Count > 0 -> messages.Count < 0 using Stryker.Core.Mutators.BinaryExpressionMutator
[12:29:57 DBG] Mutant 558 created messages.Count > 0 -> messages.Count >= 0 using Stryker.Core.Mutators.BinaryExpressionMutator
[12:29:57 DBG] Mutant 559 created messages.Count -> messages.Sum using Stryker.Core.Mutators.LinqMutator
[12:29:57 DBG] Mutant 560 created waitTime == TimeSpan.Zero -> waitTime != TimeSpan.Zero using Stryker.Core.Mutators.BinaryExpressionMutator
[12:29:57 DBG] Mutant 561 created {
                return new ReceiveMessageResponse
                {
                    Messages = messages
                }.SetCommonProperties();
            } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 562 created new ReceiveMessageResponse
                {
                    Messages = messages
                } -> new ReceiveMessageResponse
{} using Stryker.Core.Mutators.ObjectCreationMutator
[12:29:57 DBG] Mutant 563 created {
                await reader.WaitToReadAsync(linkedToken.Token).ConfigureAwait(true);
            } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 564 created await reader.WaitToReadAsync(linkedToken.Token).ConfigureAwait(true); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 565 created true -> false using Stryker.Core.Mutators.BooleanMutator
[12:29:57 DBG] Mutant 566 created ReadAvailableMessages(); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 567 created {
            messages = ReceiveFifoMessages(queue, request.MaxNumberOfMessages, visibilityTimeout, cancellationToken);
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 568 created new ReceiveMessageResponse
        {
            Messages = messages,
        } -> new ReceiveMessageResponse
{} using Stryker.Core.Mutators.ObjectCreationMutator
[12:29:57 DBG] Mutant 569 created {
            while (reader.TryRead(out var message))
            {
                ReceiveMessageImpl(message, messages, queue, visibilityTimeout, request.MessageSystemAttributeNames);
                if (messages.Count >= request.MaxNumberOfMessages)
                {
                    break;
                }
            }
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 570 created reader.TryRead(out var message) -> !(reader.TryRead(out var message)) using Stryker.Core.Mutators.NegateConditionMutator
[12:29:57 DBG] Mutant 571 created {
                ReceiveMessageImpl(message, messages, queue, visibilityTimeout, request.MessageSystemAttributeNames);
                if (messages.Count >= request.MaxNumberOfMessages)
                {
                    break;
                }
            } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 572 created ReceiveMessageImpl(message, messages, queue, visibilityTimeout, request.MessageSystemAttributeNames); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 573 created messages.Count >= request.MaxNumberOfMessages -> messages.Count < request.MaxNumberOfMessages using Stryker.Core.Mutators.BinaryExpressionMutator
[12:29:57 DBG] Mutant 574 created messages.Count >= request.MaxNumberOfMessages -> messages.Count > request.MaxNumberOfMessages using Stryker.Core.Mutators.BinaryExpressionMutator
[12:29:57 DBG] Mutant 575 created messages.Count >= request.MaxNumberOfMessages -> !(messages.Count >= request.MaxNumberOfMessages) using Stryker.Core.Mutators.NegateConditionMutator
[12:29:57 DBG] Mutant 576 created messages.Count -> messages.Sum using Stryker.Core.Mutators.LinqMutator
[12:29:57 DBG] Mutant 577 created {
                    break;
                } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 578 created break; -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 579 created {
        if (IsAtMaxReceiveCount(message, queue))
        {
            message.Attributes[MessageSystemAttributeName.DeadLetterQueueSourceArn] = queue.Arn;
            queue.ErrorQueue?.Messages.Writer.TryWrite(message);
            return;
        }
        IncrementReceiveCount(message);
        
        var clonedMessage = CloneMessage(message);
        // Filter system attributes based on the request
        FilterSystemAttributes(clonedMessage, requestedSystemAttributes);
        var receiptHandle = CreateReceiptHandle(message, queue);
        clonedMessage.ReceiptHandle = receiptHandle;
        messages.Add(clonedMessage);
        
        queue.InFlightMessages[receiptHandle] = (message,
            new SqsInflightMessageExpirationJob(receiptHandle, queue, visibilityTimeout, _bus.TimeProvider));
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 580 created IsAtMaxReceiveCount(message, queue) -> !(IsAtMaxReceiveCount(message, queue)) using Stryker.Core.Mutators.NegateConditionMutator
[12:29:57 DBG] Mutant 581 created {
            message.Attributes[MessageSystemAttributeName.DeadLetterQueueSourceArn] = queue.Arn;
            queue.ErrorQueue?.Messages.Writer.TryWrite(message);
            return;
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 582 created queue.ErrorQueue?.Messages.Writer.TryWrite(message); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 583 created return; -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 584 created IncrementReceiveCount(message); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 585 created FilterSystemAttributes(clonedMessage, requestedSystemAttributes); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 586 created messages.Add(clonedMessage); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 587 created {
        var messages = new List<Message>();

        foreach (var group in queue.MessageGroups)
        {
            if (messages.Count >= maxMessages)
            {
                break;
            }
            
            while (group.Value.TryDequeue(out var message))
            {
                messages.Add(message);

                var receiptHandle = CreateReceiptHandle(message, queue);
                queue.InFlightMessages[receiptHandle] = (message, new SqsInflightMessageExpirationJob(receiptHandle, queue, visibilityTimeout, _bus.TimeProvider));

                if (messages.Count >= maxMessages)
                {
                    break;
                }
            }
        }

        return messages;
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 588 created {
            if (messages.Count >= maxMessages)
            {
                break;
            }
            
            while (group.Value.TryDequeue(out var message))
            {
                messages.Add(message);

                var receiptHandle = CreateReceiptHandle(message, queue);
                queue.InFlightMessages[receiptHandle] = (message, new SqsInflightMessageExpirationJob(receiptHandle, queue, visibilityTimeout, _bus.TimeProvider));

                if (messages.Count >= maxMessages)
                {
                    break;
                }
            }
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 589 created messages.Count >= maxMessages -> messages.Count < maxMessages using Stryker.Core.Mutators.BinaryExpressionMutator
[12:29:57 DBG] Mutant 590 created messages.Count >= maxMessages -> messages.Count > maxMessages using Stryker.Core.Mutators.BinaryExpressionMutator
[12:29:57 DBG] Mutant 591 created messages.Count >= maxMessages -> !(messages.Count >= maxMessages) using Stryker.Core.Mutators.NegateConditionMutator
[12:29:57 DBG] Mutant 592 created messages.Count -> messages.Sum using Stryker.Core.Mutators.LinqMutator
[12:29:57 DBG] Mutant 593 created {
                break;
            } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 594 created break; -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 595 created group.Value.TryDequeue(out var message) -> !(group.Value.TryDequeue(out var message)) using Stryker.Core.Mutators.NegateConditionMutator
[12:29:57 DBG] Mutant 596 created {
                messages.Add(message);

                var receiptHandle = CreateReceiptHandle(message, queue);
                queue.InFlightMessages[receiptHandle] = (message, new SqsInflightMessageExpirationJob(receiptHandle, queue, visibilityTimeout, _bus.TimeProvider));

                if (messages.Count >= maxMessages)
                {
                    break;
                }
            } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 597 created messages.Add(message); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 598 created messages.Count >= maxMessages -> messages.Count < maxMessages using Stryker.Core.Mutators.BinaryExpressionMutator
[12:29:57 DBG] Mutant 599 created messages.Count >= maxMessages -> messages.Count > maxMessages using Stryker.Core.Mutators.BinaryExpressionMutator
[12:29:57 DBG] Mutant 600 created messages.Count >= maxMessages -> !(messages.Count >= maxMessages) using Stryker.Core.Mutators.NegateConditionMutator
[12:29:57 DBG] Mutant 601 created messages.Count -> messages.Sum using Stryker.Core.Mutators.LinqMutator
[12:29:57 DBG] Mutant 602 created {
                    break;
                } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 603 created break; -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 604 created {
        var receiveCount = message.Attributes.GetValueOrDefault(MessageSystemAttributeName.ApproximateReceiveCount, "0");
        return queue.MaxReceiveCount is not null && int.Parse(receiveCount, NumberFormatInfo.InvariantInfo) >= queue.MaxReceiveCount;
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 605 created "0" -> "" using Stryker.Core.Mutators.StringMutator
[12:29:57 DBG] Mutant 606 created queue.MaxReceiveCount is not null && int.Parse(receiveCount, NumberFormatInfo.InvariantInfo) >= queue.MaxReceiveCount -> queue.MaxReceiveCount is not null || int.Parse(receiveCount, NumberFormatInfo.InvariantInfo) >= queue.MaxReceiveCount using Stryker.Core.Mutators.BinaryExpressionMutator
[12:29:57 DBG] Mutant 607 created not null -> null using Stryker.Core.Mutators.IsPatternExpressionMutator
[12:29:57 DBG] Mutant 608 created int.Parse(receiveCount, NumberFormatInfo.InvariantInfo) >= queue.MaxReceiveCount -> int.Parse(receiveCount, NumberFormatInfo.InvariantInfo) < queue.MaxReceiveCount using Stryker.Core.Mutators.BinaryExpressionMutator
[12:29:57 DBG] Mutant 609 created int.Parse(receiveCount, NumberFormatInfo.InvariantInfo) >= queue.MaxReceiveCount -> int.Parse(receiveCount, NumberFormatInfo.InvariantInfo) > queue.MaxReceiveCount using Stryker.Core.Mutators.BinaryExpressionMutator
[12:29:57 DBG] Mutant 610 created {
        return new Message
        {
            MessageId = source.MessageId,
            Body = source.Body,
            MD5OfBody = source.MD5OfBody,
            ReceiptHandle = source.ReceiptHandle,
            Attributes = new Dictionary<string, string>(source.Attributes),
            MessageAttributes = new Dictionary<string, MessageAttributeValue>(source.MessageAttributes),
            MD5OfMessageAttributes = source.MD5OfMessageAttributes
        };
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 611 created new Message
        {
            MessageId = source.MessageId,
            Body = source.Body,
            MD5OfBody = source.MD5OfBody,
            ReceiptHandle = source.ReceiptHandle,
            Attributes = new Dictionary<string, string>(source.Attributes),
            MessageAttributes = new Dictionary<string, MessageAttributeValue>(source.MessageAttributes),
            MD5OfMessageAttributes = source.MD5OfMessageAttributes
        } -> new Message
{} using Stryker.Core.Mutators.ObjectCreationMutator
[12:29:57 DBG] Mutant 612 created {
#pragma warning disable CA1308
        var guid = Guid.NewGuid().ToString().ToLowerInvariant();
#pragma warning restore CA1308
        var decodedReceiptHandle = $"{guid} {queue.Arn} {message.MessageId} {_bus.TimeProvider.GetUtcNow().ToUnixTimeMilliseconds() / 1000.0}";
        return Convert.ToBase64String(Encoding.UTF8.GetBytes(decodedReceiptHandle));
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 613 created $"{guid} {queue.Arn} {message.MessageId} {_bus.TimeProvider.GetUtcNow().ToUnixTimeMilliseconds() / 1000.0}" -> $"" using Stryker.Core.Mutators.InterpolatedStringMutator
[12:29:57 DBG] Mutant 614 created _bus.TimeProvider.GetUtcNow().ToUnixTimeMilliseconds() / 1000.0 -> _bus.TimeProvider.GetUtcNow().ToUnixTimeMilliseconds() * 1000.0 using Stryker.Core.Mutators.BinaryExpressionMutator
[12:29:57 DBG] Mutant 615 created {
        var receiveCount = message.Attributes.GetValueOrDefault(MessageSystemAttributeName.ApproximateReceiveCount, "0");
    
        var newCount = (int.Parse(receiveCount, NumberFormatInfo.InvariantInfo) + 1).ToString(NumberFormatInfo.InvariantInfo);
        message.Attributes[MessageSystemAttributeName.ApproximateReceiveCount] = newCount;
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 616 created "0" -> "" using Stryker.Core.Mutators.StringMutator
[12:29:57 DBG] Mutant 617 created int.Parse(receiveCount, NumberFormatInfo.InvariantInfo) + 1 -> int.Parse(receiveCount, NumberFormatInfo.InvariantInfo) - 1 using Stryker.Core.Mutators.BinaryExpressionMutator
[12:29:57 DBG] Mutant 618 created {
        if (requestedSystemAttributes is null || requestedSystemAttributes.Count == 0)
        {
            message.Attributes.Clear();
            return;
        }

        if (requestedSystemAttributes.Contains("All"))
        {
            return; // Keep all attributes
        }

        var attributesToRemove = message.Attributes.Keys
            .Where(key => !requestedSystemAttributes.Contains(key))
            .ToList();

        foreach (var key in attributesToRemove)
        {
            message.Attributes.Remove(key);
        }
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 619 created requestedSystemAttributes is null || requestedSystemAttributes.Count == 0 -> requestedSystemAttributes is null && requestedSystemAttributes.Count == 0 using Stryker.Core.Mutators.BinaryExpressionMutator
[12:29:57 DBG] Mutant 620 created requestedSystemAttributes is null || requestedSystemAttributes.Count == 0 -> !(requestedSystemAttributes is null || requestedSystemAttributes.Count == 0) using Stryker.Core.Mutators.NegateConditionMutator
[12:29:57 DBG] Mutant 621 created null -> not null using Stryker.Core.Mutators.IsPatternExpressionMutator
[12:29:57 DBG] Mutant 622 created requestedSystemAttributes.Count == 0 -> requestedSystemAttributes.Count != 0 using Stryker.Core.Mutators.BinaryExpressionMutator
[12:29:57 DBG] Mutant 623 created requestedSystemAttributes.Count -> requestedSystemAttributes.Sum using Stryker.Core.Mutators.LinqMutator
[12:29:57 DBG] Mutant 624 created {
            message.Attributes.Clear();
            return;
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 625 created message.Attributes.Clear(); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 626 created return; -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 627 created requestedSystemAttributes.Contains("All") -> !(requestedSystemAttributes.Contains("All")) using Stryker.Core.Mutators.NegateConditionMutator
[12:29:57 DBG] Mutant 628 created "All" -> "" using Stryker.Core.Mutators.StringMutator
[12:29:57 DBG] Mutant 629 created {
            return; // Keep all attributes
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 630 created return; -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 631 created !requestedSystemAttributes.Contains(key) -> requestedSystemAttributes.Contains(key) using Stryker.Core.Mutators.PrefixUnaryMutator
[12:29:57 DBG] Mutant 632 created {
            message.Attributes.Remove(key);
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 633 created message.Attributes.Remove(key); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 634 created {
        return SendMessageAsync(new SendMessageRequest
        {
            QueueUrl = queueUrl,
            MessageBody = messageBody
        }, cancellationToken);
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 635 created new SendMessageRequest
        {
            QueueUrl = queueUrl,
            MessageBody = messageBody
        } -> new SendMessageRequest
{} using Stryker.Core.Mutators.ObjectCreationMutator
[12:29:57 DBG] Mutant 636 created {
        ArgumentNullException.ThrowIfNull(request);

        var queueName = GetQueueNameFromUrl(request.QueueUrl);
        if (!_bus.Queues.TryGetValue(queueName, out var queue))
        {
            throw new QueueDoesNotExistException("Queue not found");
        }

        var message = CreateMessage(request.MessageBody, request.MessageAttributes, request.MessageSystemAttributes);
        var totalSize = CalculateMessageSize(message.Body, message.MessageAttributes);

        if (totalSize > MaxMessageSize)
        {
            throw new AmazonSQSException(
                $"Message size ({totalSize} bytes) exceeds the maximum allowed size ({MaxMessageSize} bytes)");
        }

        if (queue.IsFifo)
        {
            if (string.IsNullOrEmpty(request.MessageGroupId))
            {
                throw new InvalidOperationException("MessageGroupId is required for FIFO queues");
            }

            message.Attributes["MessageGroupId"] = request.MessageGroupId;

            string deduplicationId = request.MessageDeduplicationId;
            if (string.IsNullOrEmpty(deduplicationId))
            {
                // Generate a deduplication ID based on the message body
                deduplicationId = GenerateMessageBodyHash(request.MessageBody);
            }

            message.Attributes[MessageSystemAttributeName.MessageDeduplicationId] = deduplicationId;

            if (queue.DeduplicationIds.TryAdd(deduplicationId, message.MessageId))
            {
                EnqueueFifoMessage(queue, request.MessageGroupId, message);
            }
            else
            {
                // Message with this deduplication ID already exists, return existing message ID
                return Task.FromResult(new SendMessageResponse
                {
                    MessageId = queue.DeduplicationIds[deduplicationId],
                    MD5OfMessageBody = message.MD5OfBody
                }.SetCommonProperties());
            }
        }
        else
        {
            if (request.DelaySeconds > 0)
            {
                message.Attributes["DelaySeconds"] = request.DelaySeconds.ToString(NumberFormatInfo.InvariantInfo);
                _ = SendDelayedMessageAsync(queue, message, request.DelaySeconds);
            }
            else
            {
                queue.Messages.Writer.TryWrite(message);
            }
        }

        return Task.FromResult(new SendMessageResponse
        {
            MessageId = message.MessageId,
            MD5OfMessageBody = message.MD5OfBody
        }.SetCommonProperties());
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 637 created ArgumentNullException.ThrowIfNull(request); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 638 created !_bus.Queues.TryGetValue(queueName, out var queue) -> _bus.Queues.TryGetValue(queueName, out var queue) using Stryker.Core.Mutators.PrefixUnaryMutator
[12:29:57 DBG] Mutant 639 created {
            throw new QueueDoesNotExistException("Queue not found");
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 640 created throw new QueueDoesNotExistException("Queue not found"); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 641 created "Queue not found" -> "" using Stryker.Core.Mutators.StringMutator
[12:29:57 DBG] Mutant 642 created totalSize > MaxMessageSize -> totalSize < MaxMessageSize using Stryker.Core.Mutators.BinaryExpressionMutator
[12:29:57 DBG] Mutant 643 created totalSize > MaxMessageSize -> totalSize >= MaxMessageSize using Stryker.Core.Mutators.BinaryExpressionMutator
[12:29:57 DBG] Mutant 644 created totalSize > MaxMessageSize -> !(totalSize > MaxMessageSize) using Stryker.Core.Mutators.NegateConditionMutator
[12:29:57 DBG] Mutant 645 created {
            throw new AmazonSQSException(
                $"Message size ({totalSize} bytes) exceeds the maximum allowed size ({MaxMessageSize} bytes)");
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 646 created throw new AmazonSQSException(
                $"Message size ({totalSize} bytes) exceeds the maximum allowed size ({MaxMessageSize} bytes)"); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 647 created $"Message size ({totalSize} bytes) exceeds the maximum allowed size ({MaxMessageSize} bytes)" -> $"" using Stryker.Core.Mutators.InterpolatedStringMutator
[12:29:57 DBG] Mutant 648 created queue.IsFifo -> !(queue.IsFifo) using Stryker.Core.Mutators.NegateConditionMutator
[12:29:57 DBG] Mutant 649 created {
            if (string.IsNullOrEmpty(request.MessageGroupId))
            {
                throw new InvalidOperationException("MessageGroupId is required for FIFO queues");
            }

            message.Attributes["MessageGroupId"] = request.MessageGroupId;

            string deduplicationId = request.MessageDeduplicationId;
            if (string.IsNullOrEmpty(deduplicationId))
            {
                // Generate a deduplication ID based on the message body
                deduplicationId = GenerateMessageBodyHash(request.MessageBody);
            }

            message.Attributes[MessageSystemAttributeName.MessageDeduplicationId] = deduplicationId;

            if (queue.DeduplicationIds.TryAdd(deduplicationId, message.MessageId))
            {
                EnqueueFifoMessage(queue, request.MessageGroupId, message);
            }
            else
            {
                // Message with this deduplication ID already exists, return existing message ID
                return Task.FromResult(new SendMessageResponse
                {
                    MessageId = queue.DeduplicationIds[deduplicationId],
                    MD5OfMessageBody = message.MD5OfBody
                }.SetCommonProperties());
            }
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 650 created string.IsNullOrEmpty(request.MessageGroupId) -> (request.MessageGroupId!=null) using Stryker.Core.Mutators.StringEmptyMutator
[12:29:57 DBG] Mutant 651 created string.IsNullOrEmpty(request.MessageGroupId) -> (request.MessageGroupId!="") using Stryker.Core.Mutators.StringEmptyMutator
[12:29:57 DBG] Mutant 652 created string.IsNullOrEmpty(request.MessageGroupId) -> !(string.IsNullOrEmpty(request.MessageGroupId)) using Stryker.Core.Mutators.NegateConditionMutator
[12:29:57 DBG] Mutant 653 created {
                throw new InvalidOperationException("MessageGroupId is required for FIFO queues");
            } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 654 created throw new InvalidOperationException("MessageGroupId is required for FIFO queues"); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 655 created "MessageGroupId is required for FIFO queues" -> "" using Stryker.Core.Mutators.StringMutator
[12:29:57 DBG] Mutant 656 created "MessageGroupId" -> "" using Stryker.Core.Mutators.StringMutator
[12:29:57 DBG] Mutant 657 created string.IsNullOrEmpty(deduplicationId) -> (deduplicationId!=null) using Stryker.Core.Mutators.StringEmptyMutator
[12:29:57 DBG] Mutant 658 created string.IsNullOrEmpty(deduplicationId) -> (deduplicationId!="") using Stryker.Core.Mutators.StringEmptyMutator
[12:29:57 DBG] Mutant 659 created string.IsNullOrEmpty(deduplicationId) -> !(string.IsNullOrEmpty(deduplicationId)) using Stryker.Core.Mutators.NegateConditionMutator
[12:29:57 DBG] Mutant 660 created {
                // Generate a deduplication ID based on the message body
                deduplicationId = GenerateMessageBodyHash(request.MessageBody);
            } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 661 created queue.DeduplicationIds.TryAdd(deduplicationId, message.MessageId) -> !(queue.DeduplicationIds.TryAdd(deduplicationId, message.MessageId)) using Stryker.Core.Mutators.NegateConditionMutator
[12:29:57 DBG] Mutant 662 created {
                EnqueueFifoMessage(queue, request.MessageGroupId, message);
            } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 663 created EnqueueFifoMessage(queue, request.MessageGroupId, message); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 664 created {
                // Message with this deduplication ID already exists, return existing message ID
                return Task.FromResult(new SendMessageResponse
                {
                    MessageId = queue.DeduplicationIds[deduplicationId],
                    MD5OfMessageBody = message.MD5OfBody
                }.SetCommonProperties());
            } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 665 created new SendMessageResponse
                {
                    MessageId = queue.DeduplicationIds[deduplicationId],
                    MD5OfMessageBody = message.MD5OfBody
                } -> new SendMessageResponse
{} using Stryker.Core.Mutators.ObjectCreationMutator
[12:29:57 DBG] Mutant 666 created {
            if (request.DelaySeconds > 0)
            {
                message.Attributes["DelaySeconds"] = request.DelaySeconds.ToString(NumberFormatInfo.InvariantInfo);
                _ = SendDelayedMessageAsync(queue, message, request.DelaySeconds);
            }
            else
            {
                queue.Messages.Writer.TryWrite(message);
            }
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 667 created request.DelaySeconds > 0 -> request.DelaySeconds < 0 using Stryker.Core.Mutators.BinaryExpressionMutator
[12:29:57 DBG] Mutant 668 created request.DelaySeconds > 0 -> request.DelaySeconds >= 0 using Stryker.Core.Mutators.BinaryExpressionMutator
[12:29:57 DBG] Mutant 669 created request.DelaySeconds > 0 -> !(request.DelaySeconds > 0) using Stryker.Core.Mutators.NegateConditionMutator
[12:29:57 DBG] Mutant 670 created {
                message.Attributes["DelaySeconds"] = request.DelaySeconds.ToString(NumberFormatInfo.InvariantInfo);
                _ = SendDelayedMessageAsync(queue, message, request.DelaySeconds);
            } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 671 created "DelaySeconds" -> "" using Stryker.Core.Mutators.StringMutator
[12:29:57 DBG] Mutant 672 created {
                queue.Messages.Writer.TryWrite(message);
            } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 673 created queue.Messages.Writer.TryWrite(message); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 674 created new SendMessageResponse
        {
            MessageId = message.MessageId,
            MD5OfMessageBody = message.MD5OfBody
        } -> new SendMessageResponse
{} using Stryker.Core.Mutators.ObjectCreationMutator
[12:29:57 DBG] Mutant 675 created {
        var totalSize = 0;

        // Add message body size
        totalSize += Encoding.UTF8.GetByteCount(messageBody);

        // Add message attributes size
        if (messageAttributes != null)
        {
            foreach (var (key, attributeValue) in messageAttributes)
            {
                // Add attribute name size
                totalSize += Encoding.UTF8.GetByteCount(key);

                // Add data type size (including any custom type prefix)
                totalSize += Encoding.UTF8.GetByteCount(attributeValue.DataType);

                // Add value size based on the type
                if (attributeValue.BinaryValue != null)
                {
                    totalSize += (int)attributeValue.BinaryValue.Length;
                }
                else if (attributeValue.StringValue != null)
                {
                    totalSize += Encoding.UTF8.GetByteCount(attributeValue.StringValue);
                }
            }
        }

        return totalSize;
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 676 created totalSize += Encoding.UTF8.GetByteCount(messageBody) -> totalSize -= Encoding.UTF8.GetByteCount(messageBody) using Stryker.Core.Mutators.AssignmentExpressionMutator
[12:29:57 DBG] Mutant 677 created messageAttributes != null -> messageAttributes == null using Stryker.Core.Mutators.BinaryExpressionMutator
[12:29:57 DBG] Mutant 678 created {
            foreach (var (key, attributeValue) in messageAttributes)
            {
                // Add attribute name size
                totalSize += Encoding.UTF8.GetByteCount(key);

                // Add data type size (including any custom type prefix)
                totalSize += Encoding.UTF8.GetByteCount(attributeValue.DataType);

                // Add value size based on the type
                if (attributeValue.BinaryValue != null)
                {
                    totalSize += (int)attributeValue.BinaryValue.Length;
                }
                else if (attributeValue.StringValue != null)
                {
                    totalSize += Encoding.UTF8.GetByteCount(attributeValue.StringValue);
                }
            }
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 679 created {
                // Add attribute name size
                totalSize += Encoding.UTF8.GetByteCount(key);

                // Add data type size (including any custom type prefix)
                totalSize += Encoding.UTF8.GetByteCount(attributeValue.DataType);

                // Add value size based on the type
                if (attributeValue.BinaryValue != null)
                {
                    totalSize += (int)attributeValue.BinaryValue.Length;
                }
                else if (attributeValue.StringValue != null)
                {
                    totalSize += Encoding.UTF8.GetByteCount(attributeValue.StringValue);
                }
            } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 680 created totalSize += Encoding.UTF8.GetByteCount(key) -> totalSize -= Encoding.UTF8.GetByteCount(key) using Stryker.Core.Mutators.AssignmentExpressionMutator
[12:29:57 DBG] Mutant 681 created totalSize += Encoding.UTF8.GetByteCount(attributeValue.DataType) -> totalSize -= Encoding.UTF8.GetByteCount(attributeValue.DataType) using Stryker.Core.Mutators.AssignmentExpressionMutator
[12:29:57 DBG] Mutant 682 created attributeValue.BinaryValue != null -> attributeValue.BinaryValue == null using Stryker.Core.Mutators.BinaryExpressionMutator
[12:29:57 DBG] Mutant 683 created {
                    totalSize += (int)attributeValue.BinaryValue.Length;
                } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 684 created totalSize += (int)attributeValue.BinaryValue.Length -> totalSize -= (int)attributeValue.BinaryValue.Length using Stryker.Core.Mutators.AssignmentExpressionMutator
[12:29:57 DBG] Mutant 685 created attributeValue.StringValue != null -> attributeValue.StringValue == null using Stryker.Core.Mutators.BinaryExpressionMutator
[12:29:57 DBG] Mutant 686 created {
                    totalSize += Encoding.UTF8.GetByteCount(attributeValue.StringValue);
                } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 687 created totalSize += Encoding.UTF8.GetByteCount(attributeValue.StringValue) -> totalSize -= Encoding.UTF8.GetByteCount(attributeValue.StringValue) using Stryker.Core.Mutators.AssignmentExpressionMutator
[12:29:57 DBG] Mutant 688 created {
        queue.MessageGroups.AddOrUpdate(messageGroupId, 
            _ => new ConcurrentQueue<Message>([message]), 
            (_, existingQueue) =>
            {
                existingQueue.Enqueue(message);
                return existingQueue;
            });
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 689 created queue.MessageGroups.AddOrUpdate(messageGroupId, 
            _ => new ConcurrentQueue<Message>([message]), 
            (_, existingQueue) =>
            {
                existingQueue.Enqueue(message);
                return existingQueue;
            }); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 690 created {
                existingQueue.Enqueue(message);
                return existingQueue;
            } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 691 created existingQueue.Enqueue(message); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 692 created {
        var hashBytes = SHA256.HashData(Encoding.UTF8.GetBytes(messageBody));
        return Convert.ToBase64String(hashBytes);
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 693 created {
        var message = new Message
        {
            MessageId = Guid.NewGuid().ToString(),
            Body = messageBody,
            MessageAttributes = messageAttributes,
            Attributes = messageSystemAttributes.ToDictionary(kv => kv.Key, kv => kv.Value.StringValue)
        };

#pragma warning disable CA5351
        var hash = MD5.HashData(Encoding.UTF8.GetBytes(messageBody));
#pragma warning restore CA5351
#pragma warning disable CA1308
        message.MD5OfBody = Convert.ToHexString(hash).ToLowerInvariant();
#pragma warning restore CA1308

        return message;
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 694 created new Message
        {
            MessageId = Guid.NewGuid().ToString(),
            Body = messageBody,
            MessageAttributes = messageAttributes,
            Attributes = messageSystemAttributes.ToDictionary(kv => kv.Key, kv => kv.Value.StringValue)
        } -> new Message
{} using Stryker.Core.Mutators.ObjectCreationMutator
[12:29:57 DBG] Mutant 695 created {
        await Task.Delay(TimeSpan.FromSeconds(delaySeconds), _bus.TimeProvider).ConfigureAwait(true);
        queue.Messages.Writer.TryWrite(message);
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 696 created await Task.Delay(TimeSpan.FromSeconds(delaySeconds), _bus.TimeProvider).ConfigureAwait(true); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 697 created true -> false using Stryker.Core.Mutators.BooleanMutator
[12:29:57 DBG] Mutant 698 created queue.Messages.Writer.TryWrite(message); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 699 created {
        ArgumentNullException.ThrowIfNull(request);
        
        if (!_bus.MoveTasks.TryGetValue(request.TaskHandle, out var task))
        {
            throw new ResourceNotFoundException("Task does not exist.");
        }

        task.MoveTaskJob.Dispose();
        task.Status = MoveTaskStatus.Cancelled;

        return Task.FromResult(new CancelMessageMoveTaskResponse
        {
            ApproximateNumberOfMessagesMoved = task.ApproximateNumberOfMessagesMoved
        }.SetCommonProperties());
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 700 created ArgumentNullException.ThrowIfNull(request); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 701 created !_bus.MoveTasks.TryGetValue(request.TaskHandle, out var task) -> _bus.MoveTasks.TryGetValue(request.TaskHandle, out var task) using Stryker.Core.Mutators.PrefixUnaryMutator
[12:29:57 DBG] Mutant 702 created {
            throw new ResourceNotFoundException("Task does not exist.");
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 703 created throw new ResourceNotFoundException("Task does not exist."); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 704 created "Task does not exist." -> "" using Stryker.Core.Mutators.StringMutator
[12:29:57 DBG] Mutant 705 created task.MoveTaskJob.Dispose(); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 706 created new CancelMessageMoveTaskResponse
        {
            ApproximateNumberOfMessagesMoved = task.ApproximateNumberOfMessagesMoved
        } -> new CancelMessageMoveTaskResponse
{} using Stryker.Core.Mutators.ObjectCreationMutator
[12:29:57 DBG] Mutant 707 created {
        return ChangeMessageVisibilityAsync(new ChangeMessageVisibilityRequest
        {
            QueueUrl = queueUrl,
            ReceiptHandle = receiptHandle,
            VisibilityTimeout = visibilityTimeout
        }, cancellationToken);
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 708 created new ChangeMessageVisibilityRequest
        {
            QueueUrl = queueUrl,
            ReceiptHandle = receiptHandle,
            VisibilityTimeout = visibilityTimeout
        } -> new ChangeMessageVisibilityRequest
{} using Stryker.Core.Mutators.ObjectCreationMutator
[12:29:57 DBG] Mutant 709 created {
        return ChangeMessageVisibilityBatchAsync(new ChangeMessageVisibilityBatchRequest
        {
            QueueUrl = queueUrl,
            Entries = entries
        }, cancellationToken);
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 710 created new ChangeMessageVisibilityBatchRequest
        {
            QueueUrl = queueUrl,
            Entries = entries
        } -> new ChangeMessageVisibilityBatchRequest
{} using Stryker.Core.Mutators.ObjectCreationMutator
[12:29:57 DBG] Mutant 711 created {
        ArgumentNullException.ThrowIfNull(request);
        
        var queueName = GetQueueNameFromUrl(request.QueueUrl);
        if (!_bus.Queues.TryGetValue(queueName, out var queue))
        {
            throw new QueueDoesNotExistException($"Queue {request.QueueUrl} does not exist.");
        }

        var response = new ChangeMessageVisibilityBatchResponse
        {
            Successful = [],
            Failed = []
        };

        foreach (var entry in request.Entries)
        {
            try
            {
                if (queue.InFlightMessages.TryGetValue(entry.ReceiptHandle, out var message))
                {
                    var (_, inFlightExpireCallback) = message;
                    inFlightExpireCallback.UpdateTimeout(TimeSpan.FromSeconds(entry.VisibilityTimeout));

                    response.Successful.Add(new ChangeMessageVisibilityBatchResultEntry
                    {
                        Id = entry.Id
                    });
                }
                else
                {
                    response.Failed.Add(new BatchResultErrorEntry
                    {
                        Id = entry.Id,
                        Code = "ReceiptHandleIsInvalid",
                        Message = $"Receipt handle {entry.ReceiptHandle} is invalid.",
                        SenderFault = true
                    });
                }
            }
#pragma warning disable CA1031
            catch (Exception ex)
#pragma warning restore CA1031
            {
                response.Failed.Add(new BatchResultErrorEntry
                {
                    Id = entry.Id,
                    Code = "InternalError",
                    Message = ex.Message,
                    SenderFault = false
                });
            }
        }

        return Task.FromResult(response.SetCommonProperties());
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 712 created ArgumentNullException.ThrowIfNull(request); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 713 created !_bus.Queues.TryGetValue(queueName, out var queue) -> _bus.Queues.TryGetValue(queueName, out var queue) using Stryker.Core.Mutators.PrefixUnaryMutator
[12:29:57 DBG] Mutant 714 created {
            throw new QueueDoesNotExistException($"Queue {request.QueueUrl} does not exist.");
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 715 created throw new QueueDoesNotExistException($"Queue {request.QueueUrl} does not exist."); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 716 created $"Queue {request.QueueUrl} does not exist." -> $"" using Stryker.Core.Mutators.InterpolatedStringMutator
[12:29:57 DBG] Mutant 717 created new ChangeMessageVisibilityBatchResponse
        {
            Successful = [],
            Failed = []
        } -> new ChangeMessageVisibilityBatchResponse
{} using Stryker.Core.Mutators.ObjectCreationMutator
[12:29:57 DBG] Mutant 718 created {
            try
            {
                if (queue.InFlightMessages.TryGetValue(entry.ReceiptHandle, out var message))
                {
                    var (_, inFlightExpireCallback) = message;
                    inFlightExpireCallback.UpdateTimeout(TimeSpan.FromSeconds(entry.VisibilityTimeout));

                    response.Successful.Add(new ChangeMessageVisibilityBatchResultEntry
                    {
                        Id = entry.Id
                    });
                }
                else
                {
                    response.Failed.Add(new BatchResultErrorEntry
                    {
                        Id = entry.Id,
                        Code = "ReceiptHandleIsInvalid",
                        Message = $"Receipt handle {entry.ReceiptHandle} is invalid.",
                        SenderFault = true
                    });
                }
            }
#pragma warning disable CA1031
            catch (Exception ex)
#pragma warning restore CA1031
            {
                response.Failed.Add(new BatchResultErrorEntry
                {
                    Id = entry.Id,
                    Code = "InternalError",
                    Message = ex.Message,
                    SenderFault = false
                });
            }
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 719 created {
                if (queue.InFlightMessages.TryGetValue(entry.ReceiptHandle, out var message))
                {
                    var (_, inFlightExpireCallback) = message;
                    inFlightExpireCallback.UpdateTimeout(TimeSpan.FromSeconds(entry.VisibilityTimeout));

                    response.Successful.Add(new ChangeMessageVisibilityBatchResultEntry
                    {
                        Id = entry.Id
                    });
                }
                else
                {
                    response.Failed.Add(new BatchResultErrorEntry
                    {
                        Id = entry.Id,
                        Code = "ReceiptHandleIsInvalid",
                        Message = $"Receipt handle {entry.ReceiptHandle} is invalid.",
                        SenderFault = true
                    });
                }
            } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 720 created queue.InFlightMessages.TryGetValue(entry.ReceiptHandle, out var message) -> !(queue.InFlightMessages.TryGetValue(entry.ReceiptHandle, out var message)) using Stryker.Core.Mutators.NegateConditionMutator
[12:29:57 DBG] Mutant 721 created {
                    var (_, inFlightExpireCallback) = message;
                    inFlightExpireCallback.UpdateTimeout(TimeSpan.FromSeconds(entry.VisibilityTimeout));

                    response.Successful.Add(new ChangeMessageVisibilityBatchResultEntry
                    {
                        Id = entry.Id
                    });
                } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 722 created inFlightExpireCallback.UpdateTimeout(TimeSpan.FromSeconds(entry.VisibilityTimeout)); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 723 created new ChangeMessageVisibilityBatchResultEntry
                    {
                        Id = entry.Id
                    } -> new ChangeMessageVisibilityBatchResultEntry
{} using Stryker.Core.Mutators.ObjectCreationMutator
[12:29:57 DBG] Mutant 724 created {
                    response.Failed.Add(new BatchResultErrorEntry
                    {
                        Id = entry.Id,
                        Code = "ReceiptHandleIsInvalid",
                        Message = $"Receipt handle {entry.ReceiptHandle} is invalid.",
                        SenderFault = true
                    });
                } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 725 created new BatchResultErrorEntry
                    {
                        Id = entry.Id,
                        Code = "ReceiptHandleIsInvalid",
                        Message = $"Receipt handle {entry.ReceiptHandle} is invalid.",
                        SenderFault = true
                    } -> new BatchResultErrorEntry
{} using Stryker.Core.Mutators.ObjectCreationMutator
[12:29:57 DBG] Mutant 726 created "ReceiptHandleIsInvalid" -> "" using Stryker.Core.Mutators.StringMutator
[12:29:57 DBG] Mutant 727 created $"Receipt handle {entry.ReceiptHandle} is invalid." -> $"" using Stryker.Core.Mutators.InterpolatedStringMutator
[12:29:57 DBG] Mutant 728 created true -> false using Stryker.Core.Mutators.BooleanMutator
[12:29:57 DBG] Mutant 729 created {
                response.Failed.Add(new BatchResultErrorEntry
                {
                    Id = entry.Id,
                    Code = "InternalError",
                    Message = ex.Message,
                    SenderFault = false
                });
            } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 730 created new BatchResultErrorEntry
                {
                    Id = entry.Id,
                    Code = "InternalError",
                    Message = ex.Message,
                    SenderFault = false
                } -> new BatchResultErrorEntry
{} using Stryker.Core.Mutators.ObjectCreationMutator
[12:29:57 DBG] Mutant 731 created "InternalError" -> "" using Stryker.Core.Mutators.StringMutator
[12:29:57 DBG] Mutant 732 created false -> true using Stryker.Core.Mutators.BooleanMutator
[12:29:57 DBG] Mutant 733 created {
        return DeleteMessageBatchAsync(new DeleteMessageBatchRequest
        {
            QueueUrl = queueUrl,
            Entries = entries
        }, cancellationToken);
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 734 created new DeleteMessageBatchRequest
        {
            QueueUrl = queueUrl,
            Entries = entries
        } -> new DeleteMessageBatchRequest
{} using Stryker.Core.Mutators.ObjectCreationMutator
[12:29:57 DBG] Mutant 735 created {
        ArgumentNullException.ThrowIfNull(request);
        
        var queueName = GetQueueNameFromUrl(request.QueueUrl);
        if (!_bus.Queues.TryGetValue(queueName, out var queue))
        {
            throw new QueueDoesNotExistException($"Queue {request.QueueUrl} does not exist.");
        }

        var response = new DeleteMessageBatchResponse
        {
            Successful = [],
            Failed = []
        };

        foreach (var entry in request.Entries)
        {
            try
            {
                if (queue.InFlightMessages.Remove(entry.ReceiptHandle, out _))
                {
                    response.Successful.Add(new DeleteMessageBatchResultEntry
                    {
                        Id = entry.Id
                    });
                }
                else
                {
                    response.Failed.Add(new BatchResultErrorEntry
                    {
                        Id = entry.Id,
                        Code = "ReceiptHandleIsInvalid",
                        Message = $"Receipt handle {entry.ReceiptHandle} is invalid.",
                        SenderFault = true
                    });
                }
            }
#pragma warning disable CA1031
            catch (Exception ex)
#pragma warning restore CA1031
            {
                response.Failed.Add(new BatchResultErrorEntry
                {
                    Id = entry.Id,
                    Code = "InternalError",
                    Message = ex.Message,
                    SenderFault = false
                });
            }
        }

        return Task.FromResult(response.SetCommonProperties());
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 736 created ArgumentNullException.ThrowIfNull(request); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 737 created !_bus.Queues.TryGetValue(queueName, out var queue) -> _bus.Queues.TryGetValue(queueName, out var queue) using Stryker.Core.Mutators.PrefixUnaryMutator
[12:29:57 DBG] Mutant 738 created {
            throw new QueueDoesNotExistException($"Queue {request.QueueUrl} does not exist.");
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 739 created throw new QueueDoesNotExistException($"Queue {request.QueueUrl} does not exist."); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 740 created $"Queue {request.QueueUrl} does not exist." -> $"" using Stryker.Core.Mutators.InterpolatedStringMutator
[12:29:57 DBG] Mutant 741 created new DeleteMessageBatchResponse
        {
            Successful = [],
            Failed = []
        } -> new DeleteMessageBatchResponse
{} using Stryker.Core.Mutators.ObjectCreationMutator
[12:29:57 DBG] Mutant 742 created {
            try
            {
                if (queue.InFlightMessages.Remove(entry.ReceiptHandle, out _))
                {
                    response.Successful.Add(new DeleteMessageBatchResultEntry
                    {
                        Id = entry.Id
                    });
                }
                else
                {
                    response.Failed.Add(new BatchResultErrorEntry
                    {
                        Id = entry.Id,
                        Code = "ReceiptHandleIsInvalid",
                        Message = $"Receipt handle {entry.ReceiptHandle} is invalid.",
                        SenderFault = true
                    });
                }
            }
#pragma warning disable CA1031
            catch (Exception ex)
#pragma warning restore CA1031
            {
                response.Failed.Add(new BatchResultErrorEntry
                {
                    Id = entry.Id,
                    Code = "InternalError",
                    Message = ex.Message,
                    SenderFault = false
                });
            }
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 743 created {
                if (queue.InFlightMessages.Remove(entry.ReceiptHandle, out _))
                {
                    response.Successful.Add(new DeleteMessageBatchResultEntry
                    {
                        Id = entry.Id
                    });
                }
                else
                {
                    response.Failed.Add(new BatchResultErrorEntry
                    {
                        Id = entry.Id,
                        Code = "ReceiptHandleIsInvalid",
                        Message = $"Receipt handle {entry.ReceiptHandle} is invalid.",
                        SenderFault = true
                    });
                }
            } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 744 created queue.InFlightMessages.Remove(entry.ReceiptHandle, out _) -> !(queue.InFlightMessages.Remove(entry.ReceiptHandle, out _)) using Stryker.Core.Mutators.NegateConditionMutator
[12:29:57 DBG] Mutant 745 created {
                    response.Successful.Add(new DeleteMessageBatchResultEntry
                    {
                        Id = entry.Id
                    });
                } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 746 created new DeleteMessageBatchResultEntry
                    {
                        Id = entry.Id
                    } -> new DeleteMessageBatchResultEntry
{} using Stryker.Core.Mutators.ObjectCreationMutator
[12:29:57 DBG] Mutant 747 created {
                    response.Failed.Add(new BatchResultErrorEntry
                    {
                        Id = entry.Id,
                        Code = "ReceiptHandleIsInvalid",
                        Message = $"Receipt handle {entry.ReceiptHandle} is invalid.",
                        SenderFault = true
                    });
                } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 748 created new BatchResultErrorEntry
                    {
                        Id = entry.Id,
                        Code = "ReceiptHandleIsInvalid",
                        Message = $"Receipt handle {entry.ReceiptHandle} is invalid.",
                        SenderFault = true
                    } -> new BatchResultErrorEntry
{} using Stryker.Core.Mutators.ObjectCreationMutator
[12:29:57 DBG] Mutant 749 created "ReceiptHandleIsInvalid" -> "" using Stryker.Core.Mutators.StringMutator
[12:29:57 DBG] Mutant 750 created $"Receipt handle {entry.ReceiptHandle} is invalid." -> $"" using Stryker.Core.Mutators.InterpolatedStringMutator
[12:29:57 DBG] Mutant 751 created true -> false using Stryker.Core.Mutators.BooleanMutator
[12:29:57 DBG] Mutant 752 created {
                response.Failed.Add(new BatchResultErrorEntry
                {
                    Id = entry.Id,
                    Code = "InternalError",
                    Message = ex.Message,
                    SenderFault = false
                });
            } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 753 created new BatchResultErrorEntry
                {
                    Id = entry.Id,
                    Code = "InternalError",
                    Message = ex.Message,
                    SenderFault = false
                } -> new BatchResultErrorEntry
{} using Stryker.Core.Mutators.ObjectCreationMutator
[12:29:57 DBG] Mutant 754 created "InternalError" -> "" using Stryker.Core.Mutators.StringMutator
[12:29:57 DBG] Mutant 755 created false -> true using Stryker.Core.Mutators.BooleanMutator
[12:29:57 DBG] Mutant 756 created {
        ArgumentNullException.ThrowIfNull(request);
        
        var queueName = GetQueueNameFromUrl(request.QueueUrl);
        _bus.Queues.TryRemove(queueName, out _);
        return Task.FromResult(new DeleteQueueResponse().SetCommonProperties());
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 757 created ArgumentNullException.ThrowIfNull(request); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 758 created {
        return GetQueueAttributesAsync(
            new GetQueueAttributesRequest
            {
                QueueUrl = queueUrl,
                AttributeNames = attributeNames
            },
            cancellationToken);
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 759 created new GetQueueAttributesRequest
            {
                QueueUrl = queueUrl,
                AttributeNames = attributeNames
            } -> new GetQueueAttributesRequest
{} using Stryker.Core.Mutators.ObjectCreationMutator
[12:29:57 DBG] Mutant 760 created {
        ArgumentNullException.ThrowIfNull(request);
        
        var queueName = GetQueueNameFromUrl(request.QueueUrl);
        if (!_bus.Queues.TryGetValue(queueName, out var queue))
        {
            throw new QueueDoesNotExistException($"Queue {request.QueueUrl} does not exist.");
        }

        var attributes = new Dictionary<string, string>();

        if (request.AttributeNames.Count == 0 || request.AttributeNames.Contains("All"))
        {
            attributes = new Dictionary<string, string>(queue.Attributes);
            AddComputedAttributes(queue, attributes);
        }
        else
        {
            foreach (var attributeName in request.AttributeNames)
            {
                if (queue.Attributes.TryGetValue(attributeName, out var value))
                {
                    attributes[attributeName] = value;
                }
                else if (IsComputedAttribute(attributeName))
                {
                    AddComputedAttribute(queue, attributeName, attributes);
                }
            }
        }

        return Task.FromResult(new GetQueueAttributesResponse
        {
            Attributes = attributes
        }.SetCommonProperties());
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 761 created ArgumentNullException.ThrowIfNull(request); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 762 created !_bus.Queues.TryGetValue(queueName, out var queue) -> _bus.Queues.TryGetValue(queueName, out var queue) using Stryker.Core.Mutators.PrefixUnaryMutator
[12:29:57 DBG] Mutant 763 created {
            throw new QueueDoesNotExistException($"Queue {request.QueueUrl} does not exist.");
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 764 created throw new QueueDoesNotExistException($"Queue {request.QueueUrl} does not exist."); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 765 created $"Queue {request.QueueUrl} does not exist." -> $"" using Stryker.Core.Mutators.InterpolatedStringMutator
[12:29:57 DBG] Mutant 766 created request.AttributeNames.Count == 0 || request.AttributeNames.Contains("All") -> request.AttributeNames.Count == 0 && request.AttributeNames.Contains("All") using Stryker.Core.Mutators.BinaryExpressionMutator
[12:29:57 DBG] Mutant 767 created request.AttributeNames.Count == 0 || request.AttributeNames.Contains("All") -> !(request.AttributeNames.Count == 0 || request.AttributeNames.Contains("All")) using Stryker.Core.Mutators.NegateConditionMutator
[12:29:57 DBG] Mutant 768 created request.AttributeNames.Count == 0 -> request.AttributeNames.Count != 0 using Stryker.Core.Mutators.BinaryExpressionMutator
[12:29:57 DBG] Mutant 769 created request.AttributeNames.Count -> request.AttributeNames.Sum using Stryker.Core.Mutators.LinqMutator
[12:29:57 DBG] Mutant 770 created "All" -> "" using Stryker.Core.Mutators.StringMutator
[12:29:57 DBG] Mutant 771 created {
            attributes = new Dictionary<string, string>(queue.Attributes);
            AddComputedAttributes(queue, attributes);
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 772 created AddComputedAttributes(queue, attributes); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 773 created {
            foreach (var attributeName in request.AttributeNames)
            {
                if (queue.Attributes.TryGetValue(attributeName, out var value))
                {
                    attributes[attributeName] = value;
                }
                else if (IsComputedAttribute(attributeName))
                {
                    AddComputedAttribute(queue, attributeName, attributes);
                }
            }
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 774 created {
                if (queue.Attributes.TryGetValue(attributeName, out var value))
                {
                    attributes[attributeName] = value;
                }
                else if (IsComputedAttribute(attributeName))
                {
                    AddComputedAttribute(queue, attributeName, attributes);
                }
            } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 775 created queue.Attributes.TryGetValue(attributeName, out var value) -> !(queue.Attributes.TryGetValue(attributeName, out var value)) using Stryker.Core.Mutators.NegateConditionMutator
[12:29:57 DBG] Mutant 776 created {
                    attributes[attributeName] = value;
                } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 777 created IsComputedAttribute(attributeName) -> !(IsComputedAttribute(attributeName)) using Stryker.Core.Mutators.NegateConditionMutator
[12:29:57 DBG] Mutant 778 created {
                    AddComputedAttribute(queue, attributeName, attributes);
                } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 779 created AddComputedAttribute(queue, attributeName, attributes); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 780 created new GetQueueAttributesResponse
        {
            Attributes = attributes
        } -> new GetQueueAttributesResponse
{} using Stryker.Core.Mutators.ObjectCreationMutator
[12:29:57 DBG] Mutant 781 created {
        if (queue.Attributes.TryGetValue(QueueAttributeName.VisibilityTimeout, out var visibilityTimeout))
        {
            queue.VisibilityTimeout = TimeSpan.FromSeconds(int.Parse(visibilityTimeout, NumberFormatInfo.InvariantInfo));
        }
        
        ExtractRedrivePolicy(queue);
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 782 created queue.Attributes.TryGetValue(QueueAttributeName.VisibilityTimeout, out var visibilityTimeout) -> !(queue.Attributes.TryGetValue(QueueAttributeName.VisibilityTimeout, out var visibilityTimeout)) using Stryker.Core.Mutators.NegateConditionMutator
[12:29:57 DBG] Mutant 783 created {
            queue.VisibilityTimeout = TimeSpan.FromSeconds(int.Parse(visibilityTimeout, NumberFormatInfo.InvariantInfo));
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 784 created ExtractRedrivePolicy(queue); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 785 created {
        return attributeName == QueueAttributeName.ApproximateNumberOfMessages
               || attributeName == QueueAttributeName.ApproximateNumberOfMessagesNotVisible
               || attributeName == QueueAttributeName.ApproximateNumberOfMessagesDelayed;
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 786 created attributeName == QueueAttributeName.ApproximateNumberOfMessages
               || attributeName == QueueAttributeName.ApproximateNumberOfMessagesNotVisible
               || attributeName == QueueAttributeName.ApproximateNumberOfMessagesDelayed -> attributeName == QueueAttributeName.ApproximateNumberOfMessages
               || attributeName == QueueAttributeName.ApproximateNumberOfMessagesNotVisible
               && attributeName == QueueAttributeName.ApproximateNumberOfMessagesDelayed using Stryker.Core.Mutators.BinaryExpressionMutator
[12:29:57 DBG] Mutant 787 created attributeName == QueueAttributeName.ApproximateNumberOfMessages
               || attributeName == QueueAttributeName.ApproximateNumberOfMessagesNotVisible -> attributeName == QueueAttributeName.ApproximateNumberOfMessages
               && attributeName == QueueAttributeName.ApproximateNumberOfMessagesNotVisible using Stryker.Core.Mutators.BinaryExpressionMutator
[12:29:57 DBG] Mutant 788 created attributeName == QueueAttributeName.ApproximateNumberOfMessages -> attributeName != QueueAttributeName.ApproximateNumberOfMessages using Stryker.Core.Mutators.BinaryExpressionMutator
[12:29:57 DBG] Mutant 789 created attributeName == QueueAttributeName.ApproximateNumberOfMessagesNotVisible -> attributeName != QueueAttributeName.ApproximateNumberOfMessagesNotVisible using Stryker.Core.Mutators.BinaryExpressionMutator
[12:29:57 DBG] Mutant 790 created attributeName == QueueAttributeName.ApproximateNumberOfMessagesDelayed -> attributeName != QueueAttributeName.ApproximateNumberOfMessagesDelayed using Stryker.Core.Mutators.BinaryExpressionMutator
[12:29:57 DBG] Mutant 791 created {
        attributes[QueueAttributeName.ApproximateNumberOfMessages] = queue.Messages.Reader.Count.ToString(NumberFormatInfo.InvariantInfo);
        attributes[QueueAttributeName.ApproximateNumberOfMessagesNotVisible] = queue.InFlightMessages.Count.ToString(NumberFormatInfo.InvariantInfo);
        attributes[QueueAttributeName.ApproximateNumberOfMessagesDelayed] = "0";
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 792 created queue.Messages.Reader.Count -> queue.Messages.Reader.Sum using Stryker.Core.Mutators.LinqMutator
[12:29:57 DBG] Mutant 793 created queue.InFlightMessages.Count -> queue.InFlightMessages.Sum using Stryker.Core.Mutators.LinqMutator
[12:29:57 DBG] Mutant 794 created "0" -> "" using Stryker.Core.Mutators.StringMutator
[12:29:57 DBG] Mutant 795 created {
        if (attributeName == QueueAttributeName.ApproximateNumberOfMessages)
        {
            attributes[attributeName] = queue.Messages.Reader.Count.ToString(NumberFormatInfo.InvariantInfo);
        }
        else if (attributeName == QueueAttributeName.ApproximateNumberOfMessagesNotVisible)
        {
            attributes[attributeName] = queue.InFlightMessages.Count.ToString(NumberFormatInfo.InvariantInfo);
        }
        else if (attributeName == QueueAttributeName.ApproximateNumberOfMessagesDelayed)
        {
            attributes[attributeName] = "0"; // Assuming no delayed messages in this implementation
        }
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 796 created attributeName == QueueAttributeName.ApproximateNumberOfMessages -> attributeName != QueueAttributeName.ApproximateNumberOfMessages using Stryker.Core.Mutators.BinaryExpressionMutator
[12:29:57 DBG] Mutant 797 created {
            attributes[attributeName] = queue.Messages.Reader.Count.ToString(NumberFormatInfo.InvariantInfo);
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 798 created queue.Messages.Reader.Count -> queue.Messages.Reader.Sum using Stryker.Core.Mutators.LinqMutator
[12:29:57 DBG] Mutant 799 created attributeName == QueueAttributeName.ApproximateNumberOfMessagesNotVisible -> attributeName != QueueAttributeName.ApproximateNumberOfMessagesNotVisible using Stryker.Core.Mutators.BinaryExpressionMutator
[12:29:57 DBG] Mutant 800 created {
            attributes[attributeName] = queue.InFlightMessages.Count.ToString(NumberFormatInfo.InvariantInfo);
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 801 created queue.InFlightMessages.Count -> queue.InFlightMessages.Sum using Stryker.Core.Mutators.LinqMutator
[12:29:57 DBG] Mutant 802 created attributeName == QueueAttributeName.ApproximateNumberOfMessagesDelayed -> attributeName != QueueAttributeName.ApproximateNumberOfMessagesDelayed using Stryker.Core.Mutators.BinaryExpressionMutator
[12:29:57 DBG] Mutant 803 created {
            attributes[attributeName] = "0"; // Assuming no delayed messages in this implementation
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 804 created "0" -> "" using Stryker.Core.Mutators.StringMutator
[12:29:57 DBG] Mutant 805 created {
        return queueUrl.Split('/').Last();
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 806 created queueUrl.Split('/').Last -> queueUrl.Split('/').First using Stryker.Core.Mutators.LinqMutator
[12:29:57 DBG] Mutant 807 created {
        var indexOfLastColon = queueArn.LastIndexOf(':');
        if (indexOfLastColon == -1)
        {
            throw new ArgumentException("ARN malformed", nameof(queueArn));
        }
        return queueArn[(indexOfLastColon+1) ..];
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 808 created indexOfLastColon == -1 -> indexOfLastColon != -1 using Stryker.Core.Mutators.BinaryExpressionMutator
[12:29:57 DBG] Mutant 809 created -1 -> +1 using Stryker.Core.Mutators.PrefixUnaryMutator
[12:29:57 DBG] Mutant 810 created {
            throw new ArgumentException("ARN malformed", nameof(queueArn));
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 811 created throw new ArgumentException("ARN malformed", nameof(queueArn)); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 812 created "ARN malformed" -> "" using Stryker.Core.Mutators.StringMutator
[12:29:57 DBG] Mutant 813 created indexOfLastColon+1 -> indexOfLastColon-1 using Stryker.Core.Mutators.BinaryExpressionMutator
[12:29:57 DBG] Mutant 814 created {
        ArgumentNullException.ThrowIfNull(request);
        
        if (!_bus.Queues.TryGetValue(request.QueueName, out var queue))
        {
            throw new QueueDoesNotExistException($"Queue {request.QueueName} does not exist.");
        }
        return Task.FromResult(new GetQueueUrlResponse { QueueUrl = queue.Url }.SetCommonProperties());
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 815 created ArgumentNullException.ThrowIfNull(request); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 816 created !_bus.Queues.TryGetValue(request.QueueName, out var queue) -> _bus.Queues.TryGetValue(request.QueueName, out var queue) using Stryker.Core.Mutators.PrefixUnaryMutator
[12:29:57 DBG] Mutant 817 created {
            throw new QueueDoesNotExistException($"Queue {request.QueueName} does not exist.");
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 818 created throw new QueueDoesNotExistException($"Queue {request.QueueName} does not exist."); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 819 created $"Queue {request.QueueName} does not exist." -> $"" using Stryker.Core.Mutators.InterpolatedStringMutator
[12:29:57 DBG] Mutant 820 created new GetQueueUrlResponse { QueueUrl = queue.Url } -> new GetQueueUrlResponse {} using Stryker.Core.Mutators.ObjectCreationMutator
[12:29:57 DBG] Mutant 821 created {
        ArgumentNullException.ThrowIfNull(request);
        
        var deadLetterQueueArn = request.QueueUrl;
        var deadLetterSourceQueues = _bus.Queues.Values
            .Where(q => q.ErrorQueue?.Arn == deadLetterQueueArn)
            .Select(q => q.Url)
            .OrderBy(url => url)
            .ToList();

        var pagedQueues = new PaginatedList<string>(deadLetterSourceQueues);

        var (items, nextToken) = pagedQueues.GetPage(
            TokenGenerator,
            request.MaxResults == 0 ? 1000 : request.MaxResults,
            request.NextToken);

        return Task.FromResult(new ListDeadLetterSourceQueuesResponse
        {
            QueueUrls = items,
            NextToken = nextToken
        }.SetCommonProperties());

        static string TokenGenerator(string x)
        {
            return Convert.ToBase64String(Encoding.UTF8.GetBytes(x));
        }
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 822 created ArgumentNullException.ThrowIfNull(request); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 823 created _bus.Queues.Values
            .Where(q => q.ErrorQueue?.Arn == deadLetterQueueArn)
            .Select(q => q.Url)
            .OrderBy -> _bus.Queues.Values
            .Where(q => q.ErrorQueue?.Arn == deadLetterQueueArn)
            .Select(q => q.Url)
            .OrderByDescending using Stryker.Core.Mutators.LinqMutator
[12:29:57 DBG] Mutant 824 created q.ErrorQueue?.Arn == deadLetterQueueArn -> q.ErrorQueue?.Arn != deadLetterQueueArn using Stryker.Core.Mutators.BinaryExpressionMutator
[12:29:57 DBG] Mutant 825 created request.MaxResults == 0 ? 1000 : request.MaxResults -> (true?1000 :request.MaxResults) using Stryker.Core.Mutators.ConditionalExpressionMutator
[12:29:57 DBG] Mutant 826 created request.MaxResults == 0 ? 1000 : request.MaxResults -> (false?1000 :request.MaxResults) using Stryker.Core.Mutators.ConditionalExpressionMutator
[12:29:57 DBG] Mutant 827 created request.MaxResults == 0 -> request.MaxResults != 0 using Stryker.Core.Mutators.BinaryExpressionMutator
[12:29:57 DBG] Mutant 828 created new ListDeadLetterSourceQueuesResponse
        {
            QueueUrls = items,
            NextToken = nextToken
        } -> new ListDeadLetterSourceQueuesResponse
{} using Stryker.Core.Mutators.ObjectCreationMutator
[12:29:57 DBG] Mutant 829 created {
            return Convert.ToBase64String(Encoding.UTF8.GetBytes(x));
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 830 created {
        ArgumentNullException.ThrowIfNull(request);
        
        var tasks = _bus.MoveTasks.Values
            .Where(t => t.SourceQueue.Arn.Equals(request.SourceArn, StringComparison.OrdinalIgnoreCase))
            .Select(t => new ListMessageMoveTasksResultEntry
            {
                TaskHandle = t.TaskHandle,
                SourceArn = t.SourceQueue.Arn,
                DestinationArn = t.DestinationQueue?.Arn,
                MaxNumberOfMessagesPerSecond = t.MaxNumberOfMessagesPerSecond,
                Status = MoveTaskStatus.Running,
                ApproximateNumberOfMessagesMoved = t.ApproximateNumberOfMessagesMoved,
                ApproximateNumberOfMessagesToMove = t.ApproximateNumberOfMessagesToMove
            });
        
        return Task.FromResult(new ListMessageMoveTasksResponse
        {
            Results = tasks.ToList()
        }.SetCommonProperties());
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 831 created ArgumentNullException.ThrowIfNull(request); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 832 created new ListMessageMoveTasksResultEntry
            {
                TaskHandle = t.TaskHandle,
                SourceArn = t.SourceQueue.Arn,
                DestinationArn = t.DestinationQueue?.Arn,
                MaxNumberOfMessagesPerSecond = t.MaxNumberOfMessagesPerSecond,
                Status = MoveTaskStatus.Running,
                ApproximateNumberOfMessagesMoved = t.ApproximateNumberOfMessagesMoved,
                ApproximateNumberOfMessagesToMove = t.ApproximateNumberOfMessagesToMove
            } -> new ListMessageMoveTasksResultEntry
{} using Stryker.Core.Mutators.ObjectCreationMutator
[12:29:57 DBG] Mutant 833 created new ListMessageMoveTasksResponse
        {
            Results = tasks.ToList()
        } -> new ListMessageMoveTasksResponse
{} using Stryker.Core.Mutators.ObjectCreationMutator
[12:29:57 DBG] Mutant 834 created {
        ArgumentNullException.ThrowIfNull(request);
        
        var allQueues = _bus.Queues
            .Values
            .Where(q => string.IsNullOrEmpty(request.QueueNamePrefix) || q.Name.StartsWith(request.QueueNamePrefix, StringComparison.OrdinalIgnoreCase))
            .Select(q => q.Url)
            .OrderBy(url => url)
            .ToList();

        var pagedQueues = new PaginatedList<string>(allQueues);

        var (items, nextToken) = pagedQueues.GetPage(
            TokenGenerator, 
            request.MaxResults == 0 ? 1000 : request.MaxResults, 
            request.NextToken);

        return Task.FromResult(new ListQueuesResponse
        {
            QueueUrls = items,
            NextToken = nextToken
        }.SetCommonProperties());

        static string TokenGenerator(string x)
        {
            return Convert.ToBase64String(Encoding.UTF8.GetBytes(x));
        }
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 835 created ArgumentNullException.ThrowIfNull(request); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 836 created _bus.Queues
            .Values
            .Where(q => string.IsNullOrEmpty(request.QueueNamePrefix) || q.Name.StartsWith(request.QueueNamePrefix, StringComparison.OrdinalIgnoreCase))
            .Select(q => q.Url)
            .OrderBy -> _bus.Queues
            .Values
            .Where(q => string.IsNullOrEmpty(request.QueueNamePrefix) || q.Name.StartsWith(request.QueueNamePrefix, StringComparison.OrdinalIgnoreCase))
            .Select(q => q.Url)
            .OrderByDescending using Stryker.Core.Mutators.LinqMutator
[12:29:57 DBG] Mutant 837 created string.IsNullOrEmpty(request.QueueNamePrefix) || q.Name.StartsWith(request.QueueNamePrefix, StringComparison.OrdinalIgnoreCase) -> string.IsNullOrEmpty(request.QueueNamePrefix) && q.Name.StartsWith(request.QueueNamePrefix, StringComparison.OrdinalIgnoreCase) using Stryker.Core.Mutators.BinaryExpressionMutator
[12:29:57 DBG] Mutant 838 created string.IsNullOrEmpty(request.QueueNamePrefix) -> (request.QueueNamePrefix!=null) using Stryker.Core.Mutators.StringEmptyMutator
[12:29:57 DBG] Mutant 839 created string.IsNullOrEmpty(request.QueueNamePrefix) -> (request.QueueNamePrefix!="") using Stryker.Core.Mutators.StringEmptyMutator
[12:29:57 DBG] Mutant 840 created request.MaxResults == 0 ? 1000 : request.MaxResults -> (true?1000 :request.MaxResults) using Stryker.Core.Mutators.ConditionalExpressionMutator
[12:29:57 DBG] Mutant 841 created request.MaxResults == 0 ? 1000 : request.MaxResults -> (false?1000 :request.MaxResults) using Stryker.Core.Mutators.ConditionalExpressionMutator
[12:29:57 DBG] Mutant 842 created request.MaxResults == 0 -> request.MaxResults != 0 using Stryker.Core.Mutators.BinaryExpressionMutator
[12:29:57 DBG] Mutant 843 created new ListQueuesResponse
        {
            QueueUrls = items,
            NextToken = nextToken
        } -> new ListQueuesResponse
{} using Stryker.Core.Mutators.ObjectCreationMutator
[12:29:57 DBG] Mutant 844 created {
            return Convert.ToBase64String(Encoding.UTF8.GetBytes(x));
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 845 created {
        ArgumentNullException.ThrowIfNull(request);
        
        var queueName = GetQueueNameFromUrl(request.QueueUrl);
        if (!_bus.Queues.TryGetValue(queueName, out var queue))
        {
            throw new QueueDoesNotExistException("Queue not found.");
        }
        
        return Task.FromResult(new ListQueueTagsResponse
        {
            Tags = new Dictionary<string, string>(queue.Tags)
        }.SetCommonProperties());
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 846 created ArgumentNullException.ThrowIfNull(request); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 847 created !_bus.Queues.TryGetValue(queueName, out var queue) -> _bus.Queues.TryGetValue(queueName, out var queue) using Stryker.Core.Mutators.PrefixUnaryMutator
[12:29:57 DBG] Mutant 848 created {
            throw new QueueDoesNotExistException("Queue not found.");
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 849 created throw new QueueDoesNotExistException("Queue not found."); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 850 created "Queue not found." -> "" using Stryker.Core.Mutators.StringMutator
[12:29:57 DBG] Mutant 851 created new ListQueueTagsResponse
        {
            Tags = new Dictionary<string, string>(queue.Tags)
        } -> new ListQueueTagsResponse
{} using Stryker.Core.Mutators.ObjectCreationMutator
[12:29:57 DBG] Mutant 852 created {
        return PurgeQueueAsync(new PurgeQueueRequest
        {
            QueueUrl = queueUrl
        }, cancellationToken);
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 853 created new PurgeQueueRequest
        {
            QueueUrl = queueUrl
        } -> new PurgeQueueRequest
{} using Stryker.Core.Mutators.ObjectCreationMutator
[12:29:57 DBG] Mutant 854 created {
        ArgumentNullException.ThrowIfNull(request);
        
        var queueName = GetQueueNameFromUrl(request.QueueUrl);
        if (!_bus.Queues.TryGetValue(queueName, out var queue))
        {
            throw new QueueDoesNotExistException($"Queue {request.QueueUrl} does not exist.");
        }

        while (queue.Messages.Reader.TryRead(out _))
        {
        }
        
        var inflightMessageReceipts = queue.InFlightMessages.Keys.ToList();
        
        foreach (var receipt in inflightMessageReceipts)
        {
            queue.InFlightMessages.Remove(receipt, out var inFlightInfo);
            var (_, expirationHandler) = inFlightInfo;
            expirationHandler.Dispose();
        }

        return Task.FromResult(new PurgeQueueResponse().SetCommonProperties());
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 855 created ArgumentNullException.ThrowIfNull(request); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 856 created !_bus.Queues.TryGetValue(queueName, out var queue) -> _bus.Queues.TryGetValue(queueName, out var queue) using Stryker.Core.Mutators.PrefixUnaryMutator
[12:29:57 DBG] Mutant 857 created {
            throw new QueueDoesNotExistException($"Queue {request.QueueUrl} does not exist.");
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 858 created throw new QueueDoesNotExistException($"Queue {request.QueueUrl} does not exist."); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 859 created $"Queue {request.QueueUrl} does not exist." -> $"" using Stryker.Core.Mutators.InterpolatedStringMutator
[12:29:57 DBG] Mutant 860 created queue.Messages.Reader.TryRead(out _) -> !(queue.Messages.Reader.TryRead(out _)) using Stryker.Core.Mutators.NegateConditionMutator
[12:29:57 DBG] Mutant 861 created {
            queue.InFlightMessages.Remove(receipt, out var inFlightInfo);
            var (_, expirationHandler) = inFlightInfo;
            expirationHandler.Dispose();
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 862 created expirationHandler.Dispose(); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 863 created {
        return RemovePermissionAsync(new RemovePermissionRequest
        {
            QueueUrl = queueUrl,
            Label = label
        }, cancellationToken);
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 864 created new RemovePermissionRequest
        {
            QueueUrl = queueUrl,
            Label = label
        } -> new RemovePermissionRequest
{} using Stryker.Core.Mutators.ObjectCreationMutator
[12:29:57 DBG] Mutant 865 created {
        ArgumentNullException.ThrowIfNull(request);
        
        var queueName = GetQueueNameFromUrl(request.QueueUrl);
        if (!_bus.Queues.TryGetValue(queueName, out var queue))
        {
            throw new QueueDoesNotExistException($"Queue {request.QueueUrl} does not exist.");
        }

        var policy = queue.Attributes.TryGetValue("Policy", out var policyJson)
            ? Policy.FromJson(policyJson)
            : new Policy($"{queue.Arn}/SQSDefaultPolicy");

        var statementToRemove = policy.Statements.FirstOrDefault(s => s.Id == request.Label);
        if (statementToRemove == null)
        {
            throw new ArgumentException($"Value {request.Label} for parameter Label is invalid. Reason: can't find label.");
        }

        policy.Statements.Remove(statementToRemove);

        if (policy.Statements.Any())
        {
            queue.Attributes["Policy"] = policy.ToJson();
        }
        else
        {
            queue.Attributes.Remove("Policy");
        }
        
        return Task.FromResult(new RemovePermissionResponse().SetCommonProperties());
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 866 created ArgumentNullException.ThrowIfNull(request); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 867 created !_bus.Queues.TryGetValue(queueName, out var queue) -> _bus.Queues.TryGetValue(queueName, out var queue) using Stryker.Core.Mutators.PrefixUnaryMutator
[12:29:57 DBG] Mutant 868 created {
            throw new QueueDoesNotExistException($"Queue {request.QueueUrl} does not exist.");
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 869 created throw new QueueDoesNotExistException($"Queue {request.QueueUrl} does not exist."); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 870 created $"Queue {request.QueueUrl} does not exist." -> $"" using Stryker.Core.Mutators.InterpolatedStringMutator
[12:29:57 DBG] Mutant 871 created queue.Attributes.TryGetValue("Policy", out var policyJson)
            ? Policy.FromJson(policyJson)
            : new Policy($"{queue.Arn}/SQSDefaultPolicy") -> (true?Policy.FromJson(policyJson)
:new Policy($"{queue.Arn}/SQSDefaultPolicy")) using Stryker.Core.Mutators.ConditionalExpressionMutator
[12:29:57 DBG] Mutant 872 created queue.Attributes.TryGetValue("Policy", out var policyJson)
            ? Policy.FromJson(policyJson)
            : new Policy($"{queue.Arn}/SQSDefaultPolicy") -> (false?Policy.FromJson(policyJson)
:new Policy($"{queue.Arn}/SQSDefaultPolicy")) using Stryker.Core.Mutators.ConditionalExpressionMutator
[12:29:57 DBG] Mutant 873 created "Policy" -> "" using Stryker.Core.Mutators.StringMutator
[12:29:57 DBG] Mutant 874 created $"{queue.Arn}/SQSDefaultPolicy" -> $"" using Stryker.Core.Mutators.InterpolatedStringMutator
[12:29:57 DBG] Mutant 875 created policy.Statements.FirstOrDefault -> policy.Statements.First using Stryker.Core.Mutators.LinqMutator
[12:29:57 DBG] Mutant 876 created s.Id == request.Label -> s.Id != request.Label using Stryker.Core.Mutators.BinaryExpressionMutator
[12:29:57 DBG] Mutant 877 created statementToRemove == null -> statementToRemove != null using Stryker.Core.Mutators.BinaryExpressionMutator
[12:29:57 DBG] Mutant 878 created {
            throw new ArgumentException($"Value {request.Label} for parameter Label is invalid. Reason: can't find label.");
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 879 created throw new ArgumentException($"Value {request.Label} for parameter Label is invalid. Reason: can't find label."); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 880 created $"Value {request.Label} for parameter Label is invalid. Reason: can't find label." -> $"" using Stryker.Core.Mutators.InterpolatedStringMutator
[12:29:57 DBG] Mutant 881 created policy.Statements.Remove(statementToRemove); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 882 created policy.Statements.Any() -> !(policy.Statements.Any()) using Stryker.Core.Mutators.NegateConditionMutator
[12:29:57 DBG] Mutant 883 created policy.Statements.Any -> policy.Statements.All using Stryker.Core.Mutators.LinqMutator
[12:29:57 DBG] Mutant 884 created {
            queue.Attributes["Policy"] = policy.ToJson();
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 885 created "Policy" -> "" using Stryker.Core.Mutators.StringMutator
[12:29:57 DBG] Mutant 886 created {
            queue.Attributes.Remove("Policy");
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 887 created queue.Attributes.Remove("Policy"); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 888 created "Policy" -> "" using Stryker.Core.Mutators.StringMutator
[12:29:57 DBG] Mutant 889 created {
        return SendMessageBatchAsync(new SendMessageBatchRequest
        {
            QueueUrl = queueUrl,
            Entries = entries
        }, cancellationToken);
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 890 created new SendMessageBatchRequest
        {
            QueueUrl = queueUrl,
            Entries = entries
        } -> new SendMessageBatchRequest
{} using Stryker.Core.Mutators.ObjectCreationMutator
[12:29:57 DBG] Mutant 891 created {
        ArgumentNullException.ThrowIfNull(request);
        
        var queueName = GetQueueNameFromUrl(request.QueueUrl);
        if (!_bus.Queues.TryGetValue(queueName, out var queue))
        {
            throw new QueueDoesNotExistException($"Queue {request.QueueUrl} does not exist.");
        }

        var response = new SendMessageBatchResponse
        {
            Successful = [],
            Failed = []
        };

        var totalSize = request.Entries.Sum(e => CalculateMessageSize(e.MessageBody, e.MessageAttributes));
        
        if (totalSize > MaxMessageSize)
        {
            throw new BatchRequestTooLongException(
                $"Batch size ({totalSize} bytes) exceeds the maximum allowed size ({MaxMessageSize} bytes)");
        }
        
        foreach (var entry in request.Entries)
        {
            var message = CreateMessage(entry.MessageBody, entry.MessageAttributes, entry.MessageSystemAttributes);

            if (entry.DelaySeconds > 0)
            {
                message.Attributes["DelaySeconds"] = entry.DelaySeconds.ToString(NumberFormatInfo.InvariantInfo);
                _ = SendDelayedMessageAsync(queue, message, entry.DelaySeconds);
            }
            else
            {
                queue.Messages.Writer.TryWrite(message);
            }

            response.Successful.Add(new SendMessageBatchResultEntry
            {
                Id = entry.Id,
                MessageId = message.MessageId,
                MD5OfMessageBody = message.MD5OfBody
            });
        }
        
        return Task.FromResult(response.SetCommonProperties());
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 892 created ArgumentNullException.ThrowIfNull(request); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 893 created !_bus.Queues.TryGetValue(queueName, out var queue) -> _bus.Queues.TryGetValue(queueName, out var queue) using Stryker.Core.Mutators.PrefixUnaryMutator
[12:29:57 DBG] Mutant 894 created {
            throw new QueueDoesNotExistException($"Queue {request.QueueUrl} does not exist.");
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 895 created throw new QueueDoesNotExistException($"Queue {request.QueueUrl} does not exist."); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 896 created $"Queue {request.QueueUrl} does not exist." -> $"" using Stryker.Core.Mutators.InterpolatedStringMutator
[12:29:57 DBG] Mutant 897 created new SendMessageBatchResponse
        {
            Successful = [],
            Failed = []
        } -> new SendMessageBatchResponse
{} using Stryker.Core.Mutators.ObjectCreationMutator
[12:29:57 DBG] Mutant 898 created request.Entries.Sum -> request.Entries.Max using Stryker.Core.Mutators.LinqMutator
[12:29:57 DBG] Mutant 899 created totalSize > MaxMessageSize -> totalSize < MaxMessageSize using Stryker.Core.Mutators.BinaryExpressionMutator
[12:29:57 DBG] Mutant 900 created totalSize > MaxMessageSize -> totalSize >= MaxMessageSize using Stryker.Core.Mutators.BinaryExpressionMutator
[12:29:57 DBG] Mutant 901 created totalSize > MaxMessageSize -> !(totalSize > MaxMessageSize) using Stryker.Core.Mutators.NegateConditionMutator
[12:29:57 DBG] Mutant 902 created {
            throw new BatchRequestTooLongException(
                $"Batch size ({totalSize} bytes) exceeds the maximum allowed size ({MaxMessageSize} bytes)");
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 903 created throw new BatchRequestTooLongException(
                $"Batch size ({totalSize} bytes) exceeds the maximum allowed size ({MaxMessageSize} bytes)"); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 904 created $"Batch size ({totalSize} bytes) exceeds the maximum allowed size ({MaxMessageSize} bytes)" -> $"" using Stryker.Core.Mutators.InterpolatedStringMutator
[12:29:57 DBG] Mutant 905 created {
            var message = CreateMessage(entry.MessageBody, entry.MessageAttributes, entry.MessageSystemAttributes);

            if (entry.DelaySeconds > 0)
            {
                message.Attributes["DelaySeconds"] = entry.DelaySeconds.ToString(NumberFormatInfo.InvariantInfo);
                _ = SendDelayedMessageAsync(queue, message, entry.DelaySeconds);
            }
            else
            {
                queue.Messages.Writer.TryWrite(message);
            }

            response.Successful.Add(new SendMessageBatchResultEntry
            {
                Id = entry.Id,
                MessageId = message.MessageId,
                MD5OfMessageBody = message.MD5OfBody
            });
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 906 created entry.DelaySeconds > 0 -> entry.DelaySeconds < 0 using Stryker.Core.Mutators.BinaryExpressionMutator
[12:29:57 DBG] Mutant 907 created entry.DelaySeconds > 0 -> entry.DelaySeconds >= 0 using Stryker.Core.Mutators.BinaryExpressionMutator
[12:29:57 DBG] Mutant 908 created entry.DelaySeconds > 0 -> !(entry.DelaySeconds > 0) using Stryker.Core.Mutators.NegateConditionMutator
[12:29:57 DBG] Mutant 909 created {
                message.Attributes["DelaySeconds"] = entry.DelaySeconds.ToString(NumberFormatInfo.InvariantInfo);
                _ = SendDelayedMessageAsync(queue, message, entry.DelaySeconds);
            } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 910 created "DelaySeconds" -> "" using Stryker.Core.Mutators.StringMutator
[12:29:57 DBG] Mutant 911 created {
                queue.Messages.Writer.TryWrite(message);
            } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 912 created queue.Messages.Writer.TryWrite(message); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 913 created new SendMessageBatchResultEntry
            {
                Id = entry.Id,
                MessageId = message.MessageId,
                MD5OfMessageBody = message.MD5OfBody
            } -> new SendMessageBatchResultEntry
{} using Stryker.Core.Mutators.ObjectCreationMutator
[12:29:57 DBG] Mutant 914 created {
        return SetQueueAttributesAsync(new SetQueueAttributesRequest
        {
            QueueUrl = queueUrl,
            Attributes = attributes
        }, cancellationToken);
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 915 created new SetQueueAttributesRequest
        {
            QueueUrl = queueUrl,
            Attributes = attributes
        } -> new SetQueueAttributesRequest
{} using Stryker.Core.Mutators.ObjectCreationMutator
[12:29:57 DBG] Mutant 916 created {
        ArgumentNullException.ThrowIfNull(request);
        
        var queueName = GetQueueNameFromUrl(request.QueueUrl);
        if (!_bus.Queues.TryGetValue(queueName, out var queue))
        {
            throw new QueueDoesNotExistException($"Queue {request.QueueUrl} does not exist.");
        }
        
        foreach (var (key, value) in request.Attributes)
        {
            queue.Attributes[key] = value;
        }
        
        UpdateQueueProperties(queue);
        
        return Task.FromResult(new SetQueueAttributesResponse
        {
            HttpStatusCode = HttpStatusCode.OK
        }.SetCommonProperties());
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 917 created ArgumentNullException.ThrowIfNull(request); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 918 created !_bus.Queues.TryGetValue(queueName, out var queue) -> _bus.Queues.TryGetValue(queueName, out var queue) using Stryker.Core.Mutators.PrefixUnaryMutator
[12:29:57 DBG] Mutant 919 created {
            throw new QueueDoesNotExistException($"Queue {request.QueueUrl} does not exist.");
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 920 created throw new QueueDoesNotExistException($"Queue {request.QueueUrl} does not exist."); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 921 created $"Queue {request.QueueUrl} does not exist." -> $"" using Stryker.Core.Mutators.InterpolatedStringMutator
[12:29:57 DBG] Mutant 922 created {
            queue.Attributes[key] = value;
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 923 created UpdateQueueProperties(queue); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 924 created new SetQueueAttributesResponse
        {
            HttpStatusCode = HttpStatusCode.OK
        } -> new SetQueueAttributesResponse
{} using Stryker.Core.Mutators.ObjectCreationMutator
[12:29:57 DBG] Mutant 925 created {
        if (queue.Attributes.TryGetValue(QueueAttributeName.RedrivePolicy, out var redrivePolicy))
        {
            var policy = JsonDocument.Parse(redrivePolicy);
            var deadLetterTargetArn = policy.RootElement.GetProperty("deadLetterTargetArn").GetString();
            var maxReceiveCount = 0;
            var maxReceiveCountProperty = policy.RootElement.GetProperty("maxReceiveCount");
            if (maxReceiveCountProperty.ValueKind == JsonValueKind.Number)
            {
                maxReceiveCount = maxReceiveCountProperty.GetInt32();
            }
            else
            {
                var maxReceiveCountString = maxReceiveCountProperty.GetString();
                if (maxReceiveCountString != null)
                {
                    maxReceiveCount = int.Parse(maxReceiveCountString, NumberFormatInfo.InvariantInfo);
                }
            }
            
            if (deadLetterTargetArn != null && maxReceiveCount > 0)
            {
                var deadLetterTargetQueueName = deadLetterTargetArn.Split(':').Last();
                if (!_bus.Queues.TryGetValue(deadLetterTargetQueueName, out var errorQueue))
                {
                    throw new InvalidOperationException("Dead letter queue not found");
                }

                queue.ErrorQueue = errorQueue;
                queue.MaxReceiveCount = maxReceiveCount;
            }
        }
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 926 created queue.Attributes.TryGetValue(QueueAttributeName.RedrivePolicy, out var redrivePolicy) -> !(queue.Attributes.TryGetValue(QueueAttributeName.RedrivePolicy, out var redrivePolicy)) using Stryker.Core.Mutators.NegateConditionMutator
[12:29:57 DBG] Mutant 927 created {
            var policy = JsonDocument.Parse(redrivePolicy);
            var deadLetterTargetArn = policy.RootElement.GetProperty("deadLetterTargetArn").GetString();
            var maxReceiveCount = 0;
            var maxReceiveCountProperty = policy.RootElement.GetProperty("maxReceiveCount");
            if (maxReceiveCountProperty.ValueKind == JsonValueKind.Number)
            {
                maxReceiveCount = maxReceiveCountProperty.GetInt32();
            }
            else
            {
                var maxReceiveCountString = maxReceiveCountProperty.GetString();
                if (maxReceiveCountString != null)
                {
                    maxReceiveCount = int.Parse(maxReceiveCountString, NumberFormatInfo.InvariantInfo);
                }
            }
            
            if (deadLetterTargetArn != null && maxReceiveCount > 0)
            {
                var deadLetterTargetQueueName = deadLetterTargetArn.Split(':').Last();
                if (!_bus.Queues.TryGetValue(deadLetterTargetQueueName, out var errorQueue))
                {
                    throw new InvalidOperationException("Dead letter queue not found");
                }

                queue.ErrorQueue = errorQueue;
                queue.MaxReceiveCount = maxReceiveCount;
            }
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 928 created "deadLetterTargetArn" -> "" using Stryker.Core.Mutators.StringMutator
[12:29:57 DBG] Mutant 929 created "maxReceiveCount" -> "" using Stryker.Core.Mutators.StringMutator
[12:29:57 DBG] Mutant 930 created maxReceiveCountProperty.ValueKind == JsonValueKind.Number -> maxReceiveCountProperty.ValueKind != JsonValueKind.Number using Stryker.Core.Mutators.BinaryExpressionMutator
[12:29:57 DBG] Mutant 931 created {
                maxReceiveCount = maxReceiveCountProperty.GetInt32();
            } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 932 created {
                var maxReceiveCountString = maxReceiveCountProperty.GetString();
                if (maxReceiveCountString != null)
                {
                    maxReceiveCount = int.Parse(maxReceiveCountString, NumberFormatInfo.InvariantInfo);
                }
            } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 933 created maxReceiveCountString != null -> maxReceiveCountString == null using Stryker.Core.Mutators.BinaryExpressionMutator
[12:29:57 DBG] Mutant 934 created {
                    maxReceiveCount = int.Parse(maxReceiveCountString, NumberFormatInfo.InvariantInfo);
                } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 935 created deadLetterTargetArn != null && maxReceiveCount > 0 -> deadLetterTargetArn != null || maxReceiveCount > 0 using Stryker.Core.Mutators.BinaryExpressionMutator
[12:29:57 DBG] Mutant 936 created deadLetterTargetArn != null && maxReceiveCount > 0 -> !(deadLetterTargetArn != null && maxReceiveCount > 0) using Stryker.Core.Mutators.NegateConditionMutator
[12:29:57 DBG] Mutant 937 created deadLetterTargetArn != null -> deadLetterTargetArn == null using Stryker.Core.Mutators.BinaryExpressionMutator
[12:29:57 DBG] Mutant 938 created maxReceiveCount > 0 -> maxReceiveCount < 0 using Stryker.Core.Mutators.BinaryExpressionMutator
[12:29:57 DBG] Mutant 939 created maxReceiveCount > 0 -> maxReceiveCount >= 0 using Stryker.Core.Mutators.BinaryExpressionMutator
[12:29:57 DBG] Mutant 940 created {
                var deadLetterTargetQueueName = deadLetterTargetArn.Split(':').Last();
                if (!_bus.Queues.TryGetValue(deadLetterTargetQueueName, out var errorQueue))
                {
                    throw new InvalidOperationException("Dead letter queue not found");
                }

                queue.ErrorQueue = errorQueue;
                queue.MaxReceiveCount = maxReceiveCount;
            } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 941 created deadLetterTargetArn.Split(':').Last -> deadLetterTargetArn.Split(':').First using Stryker.Core.Mutators.LinqMutator
[12:29:57 DBG] Mutant 942 created !_bus.Queues.TryGetValue(deadLetterTargetQueueName, out var errorQueue) -> _bus.Queues.TryGetValue(deadLetterTargetQueueName, out var errorQueue) using Stryker.Core.Mutators.PrefixUnaryMutator
[12:29:57 DBG] Mutant 943 created {
                    throw new InvalidOperationException("Dead letter queue not found");
                } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 944 created throw new InvalidOperationException("Dead letter queue not found"); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 945 created "Dead letter queue not found" -> "" using Stryker.Core.Mutators.StringMutator
[12:29:57 DBG] Mutant 946 created {
        ArgumentNullException.ThrowIfNull(request);
        
        var sourceQueueName = GetQueueNameFromArn(request.SourceArn);
        if (!_bus.Queues.TryGetValue(sourceQueueName, out var sourceQueue))
        {
            throw new ResourceNotFoundException("Source queue not found.");
        }

        if (_bus.MoveTasks.Values
                .Any(t => t.SourceQueue.Arn.Equals(request.SourceArn, StringComparison.OrdinalIgnoreCase) && t.Status == MoveTaskStatus.Running))
        {
            throw new UnsupportedOperationException("Move task already running for the source queue.");
        }

        var deadLetterQueues =
            _bus.Queues.Values
                .Select(q => q.ErrorQueue?.Arn)
                .Where(arn => arn is not null);
        
        if (!deadLetterQueues.Contains(sourceQueue.Arn))
        {
            throw new InvalidOperationException("Source queue is not a dead letter queue.");
        }

        SqsQueueResource? destinationQueue = null;
        if (request.DestinationArn is not null)
        {
            var destinationQueueName = GetQueueNameFromArn(request.DestinationArn);
            if (!_bus.Queues.TryGetValue(destinationQueueName, out destinationQueue))
            {
                throw new ResourceNotFoundException("Destination queue not found.");
            }
        }

        var approximateNumberOfMessages = 
            sourceQueue.Attributes.GetValueOrDefault(QueueAttributeName.ApproximateNumberOfMessages, "0");
        
        var moveTask = new SqsMoveTask
        {
            TaskHandle = Guid.NewGuid().ToString(),
            SourceQueue = sourceQueue,
            DestinationQueue = destinationQueue,
            MaxNumberOfMessagesPerSecond = request.MaxNumberOfMessagesPerSecond,
            ApproximateNumberOfMessagesMoved = 0,
            ApproximateNumberOfMessagesToMove = int.Parse(approximateNumberOfMessages, NumberFormatInfo.InvariantInfo),
            MoveTaskJob = new SqsMoveTaskJob(_bus.TimeProvider, sourceQueue, destinationQueue, _bus, request.MaxNumberOfMessagesPerSecond),
            Status = MoveTaskStatus.Running
        };
        
        _bus.MoveTasks.TryAdd(moveTask.TaskHandle, moveTask);

        return Task.FromResult(new StartMessageMoveTaskResponse
        {
            TaskHandle = moveTask.TaskHandle
        }.SetCommonProperties());
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 947 created ArgumentNullException.ThrowIfNull(request); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 948 created !_bus.Queues.TryGetValue(sourceQueueName, out var sourceQueue) -> _bus.Queues.TryGetValue(sourceQueueName, out var sourceQueue) using Stryker.Core.Mutators.PrefixUnaryMutator
[12:29:57 DBG] Mutant 949 created {
            throw new ResourceNotFoundException("Source queue not found.");
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 950 created throw new ResourceNotFoundException("Source queue not found."); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 951 created "Source queue not found." -> "" using Stryker.Core.Mutators.StringMutator
[12:29:57 DBG] Mutant 952 created _bus.MoveTasks.Values
                .Any(t => t.SourceQueue.Arn.Equals(request.SourceArn, StringComparison.OrdinalIgnoreCase) && t.Status == MoveTaskStatus.Running) -> !(_bus.MoveTasks.Values
                .Any(t => t.SourceQueue.Arn.Equals(request.SourceArn, StringComparison.OrdinalIgnoreCase) && t.Status == MoveTaskStatus.Running)) using Stryker.Core.Mutators.NegateConditionMutator
[12:29:57 DBG] Mutant 953 created _bus.MoveTasks.Values
                .Any -> _bus.MoveTasks.Values
                .All using Stryker.Core.Mutators.LinqMutator
[12:29:57 DBG] Mutant 954 created t.SourceQueue.Arn.Equals(request.SourceArn, StringComparison.OrdinalIgnoreCase) && t.Status == MoveTaskStatus.Running -> t.SourceQueue.Arn.Equals(request.SourceArn, StringComparison.OrdinalIgnoreCase) || t.Status == MoveTaskStatus.Running using Stryker.Core.Mutators.BinaryExpressionMutator
[12:29:57 DBG] Mutant 955 created t.Status == MoveTaskStatus.Running -> t.Status != MoveTaskStatus.Running using Stryker.Core.Mutators.BinaryExpressionMutator
[12:29:57 DBG] Mutant 956 created {
            throw new UnsupportedOperationException("Move task already running for the source queue.");
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 957 created throw new UnsupportedOperationException("Move task already running for the source queue."); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 958 created "Move task already running for the source queue." -> "" using Stryker.Core.Mutators.StringMutator
[12:29:57 DBG] Mutant 959 created not null -> null using Stryker.Core.Mutators.IsPatternExpressionMutator
[12:29:57 DBG] Mutant 960 created !deadLetterQueues.Contains(sourceQueue.Arn) -> deadLetterQueues.Contains(sourceQueue.Arn) using Stryker.Core.Mutators.PrefixUnaryMutator
[12:29:57 DBG] Mutant 961 created {
            throw new InvalidOperationException("Source queue is not a dead letter queue.");
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 962 created throw new InvalidOperationException("Source queue is not a dead letter queue."); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 963 created "Source queue is not a dead letter queue." -> "" using Stryker.Core.Mutators.StringMutator
[12:29:57 DBG] Mutant 964 created not null -> null using Stryker.Core.Mutators.IsPatternExpressionMutator
[12:29:57 DBG] Mutant 965 created {
            var destinationQueueName = GetQueueNameFromArn(request.DestinationArn);
            if (!_bus.Queues.TryGetValue(destinationQueueName, out destinationQueue))
            {
                throw new ResourceNotFoundException("Destination queue not found.");
            }
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 966 created !_bus.Queues.TryGetValue(destinationQueueName, out destinationQueue) -> _bus.Queues.TryGetValue(destinationQueueName, out destinationQueue) using Stryker.Core.Mutators.PrefixUnaryMutator
[12:29:57 DBG] Mutant 967 created {
                throw new ResourceNotFoundException("Destination queue not found.");
            } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 968 created throw new ResourceNotFoundException("Destination queue not found."); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 969 created "Destination queue not found." -> "" using Stryker.Core.Mutators.StringMutator
[12:29:57 DBG] Mutant 970 created "0" -> "" using Stryker.Core.Mutators.StringMutator
[12:29:57 DBG] Mutant 971 created new SqsMoveTask
        {
            TaskHandle = Guid.NewGuid().ToString(),
            SourceQueue = sourceQueue,
            DestinationQueue = destinationQueue,
            MaxNumberOfMessagesPerSecond = request.MaxNumberOfMessagesPerSecond,
            ApproximateNumberOfMessagesMoved = 0,
            ApproximateNumberOfMessagesToMove = int.Parse(approximateNumberOfMessages, NumberFormatInfo.InvariantInfo),
            MoveTaskJob = new SqsMoveTaskJob(_bus.TimeProvider, sourceQueue, destinationQueue, _bus, request.MaxNumberOfMessagesPerSecond),
            Status = MoveTaskStatus.Running
        } -> new SqsMoveTask
{} using Stryker.Core.Mutators.ObjectCreationMutator
[12:29:57 DBG] Mutant 972 created _bus.MoveTasks.TryAdd(moveTask.TaskHandle, moveTask); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 973 created new StartMessageMoveTaskResponse
        {
            TaskHandle = moveTask.TaskHandle
        } -> new StartMessageMoveTaskResponse
{} using Stryker.Core.Mutators.ObjectCreationMutator
[12:29:57 DBG] Mutant 974 created {
        ArgumentNullException.ThrowIfNull(request);
        
        var queueName = GetQueueNameFromUrl(request.QueueUrl);
        if (!_bus.Queues.TryGetValue(queueName, out var queue))
        {
            throw new QueueDoesNotExistException("Queue not found.");
        }
        
        foreach (var tag in request.Tags)
        {
            if (tag.Value is not null)
            {
                queue.Tags[tag.Key] = tag.Value;
            }
        }
        
        return Task.FromResult(new TagQueueResponse().SetCommonProperties());
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 975 created ArgumentNullException.ThrowIfNull(request); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 976 created !_bus.Queues.TryGetValue(queueName, out var queue) -> _bus.Queues.TryGetValue(queueName, out var queue) using Stryker.Core.Mutators.PrefixUnaryMutator
[12:29:57 DBG] Mutant 977 created {
            throw new QueueDoesNotExistException("Queue not found.");
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 978 created throw new QueueDoesNotExistException("Queue not found."); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 979 created "Queue not found." -> "" using Stryker.Core.Mutators.StringMutator
[12:29:57 DBG] Mutant 980 created {
            if (tag.Value is not null)
            {
                queue.Tags[tag.Key] = tag.Value;
            }
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 981 created not null -> null using Stryker.Core.Mutators.IsPatternExpressionMutator
[12:29:57 DBG] Mutant 982 created {
                queue.Tags[tag.Key] = tag.Value;
            } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 983 created {
        ArgumentNullException.ThrowIfNull(request);
        
        var queueName = GetQueueNameFromUrl(request.QueueUrl);
        if (!_bus.Queues.TryGetValue(queueName, out var queue))
        {
            throw new QueueDoesNotExistException("Queue not found.");
        }
        
        foreach (var tagKey in request.TagKeys)
        {
            queue.Tags.Remove(tagKey);
        }
        
        return Task.FromResult(new UntagQueueResponse().SetCommonProperties());
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 984 created ArgumentNullException.ThrowIfNull(request); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 985 created !_bus.Queues.TryGetValue(queueName, out var queue) -> _bus.Queues.TryGetValue(queueName, out var queue) using Stryker.Core.Mutators.PrefixUnaryMutator
[12:29:57 DBG] Mutant 986 created {
            throw new QueueDoesNotExistException("Queue not found.");
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 987 created throw new QueueDoesNotExistException("Queue not found."); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 988 created "Queue not found." -> "" using Stryker.Core.Mutators.StringMutator
[12:29:57 DBG] Mutant 989 created {
            queue.Tags.Remove(tagKey);
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 990 created queue.Tags.Remove(tagKey); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 991 created {
        return AddPermissionAsync(new AddPermissionRequest
        {
            QueueUrl = queueUrl,
            Label = label,
            AWSAccountIds = awsAccountIds,
            Actions = actions
        }, cancellationToken);
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 992 created new AddPermissionRequest
        {
            QueueUrl = queueUrl,
            Label = label,
            AWSAccountIds = awsAccountIds,
            Actions = actions
        } -> new AddPermissionRequest
{} using Stryker.Core.Mutators.ObjectCreationMutator
[12:29:57 DBG] Mutant 993 created {
        ArgumentNullException.ThrowIfNull(request);
        
        var queueName = GetQueueNameFromUrl(request.QueueUrl);
        if (!_bus.Queues.TryGetValue(queueName, out var queue))
        {
            throw new QueueDoesNotExistException("Queue not found.");
        }
        
        var policy = queue.Attributes.TryGetValue("Policy", out var policyJson)
            ? Policy.FromJson(policyJson)
            : new Policy($"{queue.Arn}/SQSDefaultPolicy");

        var statement = new Statement(Statement.StatementEffect.Allow)
        {
            Id = request.Label,
            Actions = request.Actions.Select(action => new ActionIdentifier($"SQS:{action}")).ToList()
        };

        statement.Resources.Add(new Resource(queue.Arn));
        
        foreach (var accountId in request.AWSAccountIds)
        {
            statement.Principals.Add(new Principal($"arn:aws:iam::{accountId}:root"));
        }

        if (policy.CheckIfStatementExists(statement))
        {
            throw new ArgumentException($"Value {request.Label} for parameter Label is invalid. Reason: Already exists.");
        }

        policy.Statements.Add(statement);
        queue.Attributes["Policy"] = policy.ToJson();
        
        return Task.FromResult(new AddPermissionResponse().SetCommonProperties());
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 994 created ArgumentNullException.ThrowIfNull(request); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 995 created !_bus.Queues.TryGetValue(queueName, out var queue) -> _bus.Queues.TryGetValue(queueName, out var queue) using Stryker.Core.Mutators.PrefixUnaryMutator
[12:29:57 DBG] Mutant 996 created {
            throw new QueueDoesNotExistException("Queue not found.");
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 997 created throw new QueueDoesNotExistException("Queue not found."); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 998 created "Queue not found." -> "" using Stryker.Core.Mutators.StringMutator
[12:29:57 DBG] Mutant 999 created queue.Attributes.TryGetValue("Policy", out var policyJson)
            ? Policy.FromJson(policyJson)
            : new Policy($"{queue.Arn}/SQSDefaultPolicy") -> (true?Policy.FromJson(policyJson)
:new Policy($"{queue.Arn}/SQSDefaultPolicy")) using Stryker.Core.Mutators.ConditionalExpressionMutator
[12:29:57 DBG] Mutant 1000 created queue.Attributes.TryGetValue("Policy", out var policyJson)
            ? Policy.FromJson(policyJson)
            : new Policy($"{queue.Arn}/SQSDefaultPolicy") -> (false?Policy.FromJson(policyJson)
:new Policy($"{queue.Arn}/SQSDefaultPolicy")) using Stryker.Core.Mutators.ConditionalExpressionMutator
[12:29:57 DBG] Mutant 1001 created "Policy" -> "" using Stryker.Core.Mutators.StringMutator
[12:29:57 DBG] Mutant 1002 created $"{queue.Arn}/SQSDefaultPolicy" -> $"" using Stryker.Core.Mutators.InterpolatedStringMutator
[12:29:57 DBG] Mutant 1003 created new Statement(Statement.StatementEffect.Allow)
        {
            Id = request.Label,
            Actions = request.Actions.Select(action => new ActionIdentifier($"SQS:{action}")).ToList()
        } -> new Statement(Statement.StatementEffect.Allow)
{} using Stryker.Core.Mutators.ObjectCreationMutator
[12:29:57 DBG] Mutant 1004 created $"SQS:{action}" -> $"" using Stryker.Core.Mutators.InterpolatedStringMutator
[12:29:57 DBG] Mutant 1005 created statement.Resources.Add(new Resource(queue.Arn)); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 1006 created {
            statement.Principals.Add(new Principal($"arn:aws:iam::{accountId}:root"));
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 1007 created statement.Principals.Add(new Principal($"arn:aws:iam::{accountId}:root")); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 1008 created $"arn:aws:iam::{accountId}:root" -> $"" using Stryker.Core.Mutators.InterpolatedStringMutator
[12:29:57 DBG] Mutant 1009 created policy.CheckIfStatementExists(statement) -> !(policy.CheckIfStatementExists(statement)) using Stryker.Core.Mutators.NegateConditionMutator
[12:29:57 DBG] Mutant 1010 created {
            throw new ArgumentException($"Value {request.Label} for parameter Label is invalid. Reason: Already exists.");
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 1011 created throw new ArgumentException($"Value {request.Label} for parameter Label is invalid. Reason: Already exists."); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 1012 created $"Value {request.Label} for parameter Label is invalid. Reason: Already exists." -> $"" using Stryker.Core.Mutators.InterpolatedStringMutator
[12:29:57 DBG] Mutant 1013 created policy.Statements.Add(statement); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 1014 created "Policy" -> "" using Stryker.Core.Mutators.StringMutator
[12:29:57 DBG] Mutating /Users/stuart.lang/RiderProjects/ConsoleApp9/src/LocalSqsSnsMessaging/SqsClient/InMemorySqsClient_Unsupported.cs
[12:29:57 DBG] Mutating /Users/stuart.lang/RiderProjects/ConsoleApp9/src/LocalSqsSnsMessaging/SqsInflightMessageExpirationJob.cs
[12:29:57 DBG] Mutant 1015 created {
            Queue = queue;
            ReceiptHandle = receiptHandle;
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 1016 created {
        var state = new TimerState(
            queue ?? throw new ArgumentNullException(nameof(queue)),
            receiptHandle ?? throw new ArgumentNullException(nameof(receiptHandle))
        );
        
        _timer = timeProvider.CreateTimer(VisibilityTimeoutCallback, state, timeout, Timeout.InfiniteTimeSpan);
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 1017 created {
        _timer.Change(timeout, Timeout.InfiniteTimeSpan);
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 1018 created _timer.Change(timeout, Timeout.InfiniteTimeSpan); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 1019 created {
        var timerState = (TimerState)state!;
        if (timerState.Queue.InFlightMessages.TryRemove(timerState.ReceiptHandle, out var inFlightMessage))
        {
            var (message, inFlightExpireCallback) = inFlightMessage;
            timerState.Queue.Messages.Writer.TryWrite(message);
            inFlightExpireCallback.Dispose();
        }
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 1020 created timerState.Queue.InFlightMessages.TryRemove(timerState.ReceiptHandle, out var inFlightMessage) -> !(timerState.Queue.InFlightMessages.TryRemove(timerState.ReceiptHandle, out var inFlightMessage)) using Stryker.Core.Mutators.NegateConditionMutator
[12:29:57 DBG] Mutant 1021 created {
            var (message, inFlightExpireCallback) = inFlightMessage;
            timerState.Queue.Messages.Writer.TryWrite(message);
            inFlightExpireCallback.Dispose();
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 1022 created timerState.Queue.Messages.Writer.TryWrite(message); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 1023 created inFlightExpireCallback.Dispose(); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 1024 created {
        _timer.Dispose();
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 1025 created _timer.Dispose(); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutating /Users/stuart.lang/RiderProjects/ConsoleApp9/src/LocalSqsSnsMessaging/SqsMoveTask.cs
[12:29:57 DBG] Mutating /Users/stuart.lang/RiderProjects/ConsoleApp9/src/LocalSqsSnsMessaging/SqsMoveTaskJob.cs
[12:29:57 DBG] Mutant 1026 created {
        _timer = timeProvider.CreateTimer(MoveMessages, (sourceQueue, destinationQueue, bus, rateLimitPerSecond), TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(1));
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 1027 created {
        var (sourceQueue, destinationQueue, bus, rateLimitPerSecond) = ((SqsQueueResource, SqsQueueResource?, InMemoryAwsBus, int))state!;
        var messagesMoveThisIteration = 0;
        while (sourceQueue.Messages.Reader.TryRead(out var message) && messagesMoveThisIteration < rateLimitPerSecond)
        {
            var newMessage = CloneNewMessage(message);
            if (destinationQueue is not null)
            {
                destinationQueue.Messages.Writer.TryWrite(newMessage);
            }
            else
            {
                if (message.Attributes.TryGetValue(MessageSystemAttributeName.DeadLetterQueueSourceArn, out var deadLetterSourceArn))
                {
                    var deadLetterSourceQueueName = GetQueueNameFromArn(deadLetterSourceArn);
                    if (!bus.Queues.TryGetValue(deadLetterSourceQueueName, out var deadLetterSourceQueue))
                    {
                        continue;
                    }
                    deadLetterSourceQueue.Messages.Writer.TryWrite(newMessage);
                }
            }
            messagesMoveThisIteration++;
        }

        if (bus.MoveTasks.TryGetValue(sourceQueue.Name, out var moveTask))
        {
            moveTask.ApproximateNumberOfMessagesMoved += messagesMoveThisIteration;
            moveTask.ApproximateNumberOfMessagesToMove -= messagesMoveThisIteration;
            
            if (moveTask.ApproximateNumberOfMessagesToMove >= 0)
            {
                moveTask.Status = MoveTaskStatus.Completed;
                moveTask.MoveTaskJob.Dispose();
            }
        }
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 1028 created sourceQueue.Messages.Reader.TryRead(out var message) && messagesMoveThisIteration < rateLimitPerSecond -> sourceQueue.Messages.Reader.TryRead(out var message) || messagesMoveThisIteration < rateLimitPerSecond using Stryker.Core.Mutators.BinaryExpressionMutator
[12:29:57 DBG] Mutant 1029 created sourceQueue.Messages.Reader.TryRead(out var message) && messagesMoveThisIteration < rateLimitPerSecond -> !(sourceQueue.Messages.Reader.TryRead(out var message) && messagesMoveThisIteration < rateLimitPerSecond) using Stryker.Core.Mutators.NegateConditionMutator
[12:29:57 DBG] Mutant 1030 created messagesMoveThisIteration < rateLimitPerSecond -> messagesMoveThisIteration > rateLimitPerSecond using Stryker.Core.Mutators.BinaryExpressionMutator
[12:29:57 DBG] Mutant 1031 created messagesMoveThisIteration < rateLimitPerSecond -> messagesMoveThisIteration <= rateLimitPerSecond using Stryker.Core.Mutators.BinaryExpressionMutator
[12:29:57 DBG] Mutant 1032 created {
            var newMessage = CloneNewMessage(message);
            if (destinationQueue is not null)
            {
                destinationQueue.Messages.Writer.TryWrite(newMessage);
            }
            else
            {
                if (message.Attributes.TryGetValue(MessageSystemAttributeName.DeadLetterQueueSourceArn, out var deadLetterSourceArn))
                {
                    var deadLetterSourceQueueName = GetQueueNameFromArn(deadLetterSourceArn);
                    if (!bus.Queues.TryGetValue(deadLetterSourceQueueName, out var deadLetterSourceQueue))
                    {
                        continue;
                    }
                    deadLetterSourceQueue.Messages.Writer.TryWrite(newMessage);
                }
            }
            messagesMoveThisIteration++;
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 1033 created not null -> null using Stryker.Core.Mutators.IsPatternExpressionMutator
[12:29:57 DBG] Mutant 1034 created {
                destinationQueue.Messages.Writer.TryWrite(newMessage);
            } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 1035 created destinationQueue.Messages.Writer.TryWrite(newMessage); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 1036 created {
                if (message.Attributes.TryGetValue(MessageSystemAttributeName.DeadLetterQueueSourceArn, out var deadLetterSourceArn))
                {
                    var deadLetterSourceQueueName = GetQueueNameFromArn(deadLetterSourceArn);
                    if (!bus.Queues.TryGetValue(deadLetterSourceQueueName, out var deadLetterSourceQueue))
                    {
                        continue;
                    }
                    deadLetterSourceQueue.Messages.Writer.TryWrite(newMessage);
                }
            } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 1037 created message.Attributes.TryGetValue(MessageSystemAttributeName.DeadLetterQueueSourceArn, out var deadLetterSourceArn) -> !(message.Attributes.TryGetValue(MessageSystemAttributeName.DeadLetterQueueSourceArn, out var deadLetterSourceArn)) using Stryker.Core.Mutators.NegateConditionMutator
[12:29:57 DBG] Mutant 1038 created {
                    var deadLetterSourceQueueName = GetQueueNameFromArn(deadLetterSourceArn);
                    if (!bus.Queues.TryGetValue(deadLetterSourceQueueName, out var deadLetterSourceQueue))
                    {
                        continue;
                    }
                    deadLetterSourceQueue.Messages.Writer.TryWrite(newMessage);
                } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 1039 created !bus.Queues.TryGetValue(deadLetterSourceQueueName, out var deadLetterSourceQueue) -> bus.Queues.TryGetValue(deadLetterSourceQueueName, out var deadLetterSourceQueue) using Stryker.Core.Mutators.PrefixUnaryMutator
[12:29:57 DBG] Mutant 1040 created {
                        continue;
                    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 1041 created continue; -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 1042 created deadLetterSourceQueue.Messages.Writer.TryWrite(newMessage); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 1043 created messagesMoveThisIteration++; -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 1044 created messagesMoveThisIteration++ -> messagesMoveThisIteration-- using Stryker.Core.Mutators.PostfixUnaryMutator
[12:29:57 DBG] Mutant 1045 created bus.MoveTasks.TryGetValue(sourceQueue.Name, out var moveTask) -> !(bus.MoveTasks.TryGetValue(sourceQueue.Name, out var moveTask)) using Stryker.Core.Mutators.NegateConditionMutator
[12:29:57 DBG] Mutant 1046 created {
            moveTask.ApproximateNumberOfMessagesMoved += messagesMoveThisIteration;
            moveTask.ApproximateNumberOfMessagesToMove -= messagesMoveThisIteration;
            
            if (moveTask.ApproximateNumberOfMessagesToMove >= 0)
            {
                moveTask.Status = MoveTaskStatus.Completed;
                moveTask.MoveTaskJob.Dispose();
            }
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 1047 created moveTask.ApproximateNumberOfMessagesMoved += messagesMoveThisIteration -> moveTask.ApproximateNumberOfMessagesMoved -= messagesMoveThisIteration using Stryker.Core.Mutators.AssignmentExpressionMutator
[12:29:57 DBG] Mutant 1048 created moveTask.ApproximateNumberOfMessagesToMove -= messagesMoveThisIteration -> moveTask.ApproximateNumberOfMessagesToMove += messagesMoveThisIteration using Stryker.Core.Mutators.AssignmentExpressionMutator
[12:29:57 DBG] Mutant 1049 created moveTask.ApproximateNumberOfMessagesToMove >= 0 -> moveTask.ApproximateNumberOfMessagesToMove < 0 using Stryker.Core.Mutators.BinaryExpressionMutator
[12:29:57 DBG] Mutant 1050 created moveTask.ApproximateNumberOfMessagesToMove >= 0 -> moveTask.ApproximateNumberOfMessagesToMove > 0 using Stryker.Core.Mutators.BinaryExpressionMutator
[12:29:57 DBG] Mutant 1051 created moveTask.ApproximateNumberOfMessagesToMove >= 0 -> !(moveTask.ApproximateNumberOfMessagesToMove >= 0) using Stryker.Core.Mutators.NegateConditionMutator
[12:29:57 DBG] Mutant 1052 created {
                moveTask.Status = MoveTaskStatus.Completed;
                moveTask.MoveTaskJob.Dispose();
            } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 1053 created moveTask.MoveTaskJob.Dispose(); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 1054 created {
        var newMessage = new Message
        {
            MessageId = source.MessageId,
            Body = source.Body,
            MD5OfBody = source.MD5OfBody,
            Attributes = new Dictionary<string, string>(source.Attributes),
            MessageAttributes = new Dictionary<string, MessageAttributeValue>(source.MessageAttributes),
            MD5OfMessageAttributes = source.MD5OfMessageAttributes
        };

        newMessage.Attributes.Remove(MessageSystemAttributeName.ApproximateFirstReceiveTimestamp);
        newMessage.Attributes.Remove(MessageSystemAttributeName.ApproximateReceiveCount);
        newMessage.Attributes.Remove(MessageSystemAttributeName.SentTimestamp);
        return newMessage;
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 1055 created new Message
        {
            MessageId = source.MessageId,
            Body = source.Body,
            MD5OfBody = source.MD5OfBody,
            Attributes = new Dictionary<string, string>(source.Attributes),
            MessageAttributes = new Dictionary<string, MessageAttributeValue>(source.MessageAttributes),
            MD5OfMessageAttributes = source.MD5OfMessageAttributes
        } -> new Message
{} using Stryker.Core.Mutators.ObjectCreationMutator
[12:29:57 DBG] Mutant 1056 created newMessage.Attributes.Remove(MessageSystemAttributeName.ApproximateFirstReceiveTimestamp); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 1057 created newMessage.Attributes.Remove(MessageSystemAttributeName.ApproximateReceiveCount); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 1058 created newMessage.Attributes.Remove(MessageSystemAttributeName.SentTimestamp); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 1059 created {
        var indexOfLastColon = queueArn.LastIndexOf(':');
        if (indexOfLastColon == -1)
        {
            throw new ArgumentException("ARN malformed", nameof(queueArn));
        }
        return queueArn[(indexOfLastColon+1) ..];
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 1060 created indexOfLastColon == -1 -> indexOfLastColon != -1 using Stryker.Core.Mutators.BinaryExpressionMutator
[12:29:57 DBG] Mutant 1061 created -1 -> +1 using Stryker.Core.Mutators.PrefixUnaryMutator
[12:29:57 DBG] Mutant 1062 created {
            throw new ArgumentException("ARN malformed", nameof(queueArn));
        } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 1063 created throw new ArgumentException("ARN malformed", nameof(queueArn)); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutant 1064 created "ARN malformed" -> "" using Stryker.Core.Mutators.StringMutator
[12:29:57 DBG] Mutant 1065 created indexOfLastColon+1 -> indexOfLastColon-1 using Stryker.Core.Mutators.BinaryExpressionMutator
[12:29:57 DBG] Mutant 1066 created {
        _timer.Dispose();
    } -> {} using Stryker.Core.Mutators.BlockMutator
[12:29:57 DBG] Mutant 1067 created _timer.Dispose(); -> ; using Stryker.Core.Mutators.StatementMutator
[12:29:57 DBG] Mutating /Users/stuart.lang/RiderProjects/ConsoleApp9/src/LocalSqsSnsMessaging/SqsQueueResource.cs
[12:29:57 DBG] Mutant 1068 created ".fifo" -> "" using Stryker.Core.Mutators.StringMutator
[12:29:57 DBG] Mutant 1069 created $"arn:aws:sqs:{Region}:{AccountId}:{Name}" -> $"" using Stryker.Core.Mutators.InterpolatedStringMutator
[12:29:57 DBG] 1070 mutants created
[12:29:57 DBG] Trying compilation for the first time.
[12:29:58 DBG] Compilation failed
[12:29:58 DBG] The type arguments for method 'MutantContext.TrackValue<T>(Func<T>)' cannot be inferred from the usage. Try specifying the type arguments explicitly., SourceFile(/Users/stuart.lang/RiderProjects/ConsoleApp9/src/LocalSqsSnsMessaging/SqsClient/InMemorySqsClient.cs[1378..1388))
[12:29:58 DBG] The type arguments for method 'MutantContext.TrackValue<T>(Func<T>)' cannot be inferred from the usage. Try specifying the type arguments explicitly., SourceFile(/Users/stuart.lang/RiderProjects/ConsoleApp9/src/LocalSqsSnsMessaging/SnsPublishAction.cs[666..676))
[12:29:58 DBG] The type arguments for method 'MutantContext.TrackValue<T>(Func<T>)' cannot be inferred from the usage. Try specifying the type arguments explicitly., SourceFile(/Users/stuart.lang/RiderProjects/ConsoleApp9/src/LocalSqsSnsMessaging/SnsPublishAction.cs[1065..1075))
[12:29:58 DBG] Operator '<' cannot be applied to operands of type 'int' and 'target-typed conditional expression', SourceFile(/Users/stuart.lang/RiderProjects/ConsoleApp9/src/LocalSqsSnsMessaging/PaginatedList.cs[3070..3242))
[12:29:58 DBG] Type of conditional expression cannot be determined because there is no implicit conversion between 'method group' and 'int', SourceFile(/Users/stuart.lang/RiderProjects/ConsoleApp9/src/LocalSqsSnsMessaging/PaginatedList.cs[3170..3241))
[12:29:58 DBG] Required member 'SnsTopicResource.Name' must be set in the object initializer or attribute constructor., SourceFile(/Users/stuart.lang/RiderProjects/ConsoleApp9/src/LocalSqsSnsMessaging/SnsClient/InMemorySnsClient.cs[8020..8036))
[12:29:58 DBG] Required member 'SnsTopicResource.Region' must be set in the object initializer or attribute constructor., SourceFile(/Users/stuart.lang/RiderProjects/ConsoleApp9/src/LocalSqsSnsMessaging/SnsClient/InMemorySnsClient.cs[8020..8036))
[12:29:58 DBG] Required member 'SnsTopicResource.Arn' must be set in the object initializer or attribute constructor., SourceFile(/Users/stuart.lang/RiderProjects/ConsoleApp9/src/LocalSqsSnsMessaging/SnsClient/InMemorySnsClient.cs[8020..8036))
[12:29:58 DBG] The name 'visibilityTimeout' does not exist in the current context, SourceFile(/Users/stuart.lang/RiderProjects/ConsoleApp9/src/LocalSqsSnsMessaging/SqsClient/InMemorySqsClient.cs[12893..12910))
[12:29:58 DBG] The name 'visibilityTimeout' does not exist in the current context, SourceFile(/Users/stuart.lang/RiderProjects/ConsoleApp9/src/LocalSqsSnsMessaging/SqsClient/InMemorySqsClient.cs[14263..14280))
[12:29:58 DBG] Required member 'SqsQueueResource.Name' must be set in the object initializer or attribute constructor., SourceFile(/Users/stuart.lang/RiderProjects/ConsoleApp9/src/LocalSqsSnsMessaging/SqsClient/InMemorySqsClient.cs[15971..15987))
[12:29:58 DBG] Required member 'SqsQueueResource.Region' must be set in the object initializer or attribute constructor., SourceFile(/Users/stuart.lang/RiderProjects/ConsoleApp9/src/LocalSqsSnsMessaging/SqsClient/InMemorySqsClient.cs[15971..15987))
[12:29:58 DBG] Required member 'SqsQueueResource.Url' must be set in the object initializer or attribute constructor., SourceFile(/Users/stuart.lang/RiderProjects/ConsoleApp9/src/LocalSqsSnsMessaging/SqsClient/InMemorySqsClient.cs[15971..15987))
[12:29:58 DBG] Required member 'SqsQueueResource.AccountId' must be set in the object initializer or attribute constructor., SourceFile(/Users/stuart.lang/RiderProjects/ConsoleApp9/src/LocalSqsSnsMessaging/SqsClient/InMemorySqsClient.cs[15971..15987))
[12:29:58 DBG] Operator '>' cannot be applied to operands of type 'target-typed conditional expression' and 'int', SourceFile(/Users/stuart.lang/RiderProjects/ConsoleApp9/src/LocalSqsSnsMessaging/SnsPublishAction.cs[13963..14051))
[12:29:58 DBG] Type of conditional expression cannot be determined because there is no implicit conversion between 'method group' and 'int', SourceFile(/Users/stuart.lang/RiderProjects/ConsoleApp9/src/LocalSqsSnsMessaging/SnsPublishAction.cs[13964..14046))
[12:29:58 DBG] Operator '>' cannot be applied to operands of type 'target-typed conditional expression' and 'int', SourceFile(/Users/stuart.lang/RiderProjects/ConsoleApp9/src/LocalSqsSnsMessaging/SqsClient/InMemorySqsClient.cs[33255..33339))
[12:29:58 DBG] Type of conditional expression cannot be determined because there is no implicit conversion between 'method group' and 'int', SourceFile(/Users/stuart.lang/RiderProjects/ConsoleApp9/src/LocalSqsSnsMessaging/SqsClient/InMemorySqsClient.cs[33256..33334))
[12:29:58 DBG] Operator '>=' cannot be applied to operands of type 'target-typed conditional expression' and 'int', SourceFile(/Users/stuart.lang/RiderProjects/ConsoleApp9/src/LocalSqsSnsMessaging/SqsClient/InMemorySqsClient.cs[36166..36277))
[12:29:58 DBG] Type of conditional expression cannot be determined because there is no implicit conversion between 'method group' and 'int', SourceFile(/Users/stuart.lang/RiderProjects/ConsoleApp9/src/LocalSqsSnsMessaging/SqsClient/InMemorySqsClient.cs[36167..36245))
[12:29:58 DBG] Operator '>=' cannot be applied to operands of type 'target-typed conditional expression' and 'int', SourceFile(/Users/stuart.lang/RiderProjects/ConsoleApp9/src/LocalSqsSnsMessaging/SqsClient/InMemorySqsClient.cs[39398..39493))
[12:29:58 DBG] Type of conditional expression cannot be determined because there is no implicit conversion between 'method group' and 'int', SourceFile(/Users/stuart.lang/RiderProjects/ConsoleApp9/src/LocalSqsSnsMessaging/SqsClient/InMemorySqsClient.cs[39399..39477))
[12:29:58 DBG] Operator '>=' cannot be applied to operands of type 'target-typed conditional expression' and 'int', SourceFile(/Users/stuart.lang/RiderProjects/ConsoleApp9/src/LocalSqsSnsMessaging/SqsClient/InMemorySqsClient.cs[40430..40525))
[12:29:58 DBG] Type of conditional expression cannot be determined because there is no implicit conversion between 'method group' and 'int', SourceFile(/Users/stuart.lang/RiderProjects/ConsoleApp9/src/LocalSqsSnsMessaging/SqsClient/InMemorySqsClient.cs[40431..40509))
[12:29:58 DBG] Operator '==' cannot be applied to operands of type 'target-typed conditional expression' and 'int', SourceFile(/Users/stuart.lang/RiderProjects/ConsoleApp9/src/LocalSqsSnsMessaging/SqsClient/InMemorySqsClient.cs[44537..44656))
[12:29:58 DBG] Type of conditional expression cannot be determined because there is no implicit conversion between 'method group' and 'int', SourceFile(/Users/stuart.lang/RiderProjects/ConsoleApp9/src/LocalSqsSnsMessaging/SqsClient/InMemorySqsClient.cs[44538..44650))
[12:29:58 DBG] The name 'policyJson' does not exist in the current context, SourceFile(/Users/stuart.lang/RiderProjects/ConsoleApp9/src/LocalSqsSnsMessaging/SnsClient/InMemorySnsClient.cs[32679..32689))
[12:29:58 DBG] The name 'policyJson' does not exist in the current context, SourceFile(/Users/stuart.lang/RiderProjects/ConsoleApp9/src/LocalSqsSnsMessaging/SnsClient/InMemorySnsClient.cs[33591..33601))
[12:29:58 DBG] No overload for method 'All' takes 0 arguments, SourceFile(/Users/stuart.lang/RiderProjects/ConsoleApp9/src/LocalSqsSnsMessaging/SnsClient/InMemorySnsClient.cs[35761..35764))
[12:29:58 DBG] The name 'filterPolicy' does not exist in the current context, SourceFile(/Users/stuart.lang/RiderProjects/ConsoleApp9/src/LocalSqsSnsMessaging/SnsClient/InMemorySnsClient.cs[45196..45208))
[12:29:58 DBG] The name 'filterPolicy' does not exist in the current context, SourceFile(/Users/stuart.lang/RiderProjects/ConsoleApp9/src/LocalSqsSnsMessaging/SnsClient/InMemorySnsClient.cs[46735..46747))
[12:29:58 DBG] Required member 'SnsSubscription.SubscriptionArn' must be set in the object initializer or attribute constructor., SourceFile(/Users/stuart.lang/RiderProjects/ConsoleApp9/src/LocalSqsSnsMessaging/SnsClient/InMemorySnsClient.cs[52622..52637))
[12:29:58 DBG] Required member 'SnsSubscription.TopicArn' must be set in the object initializer or attribute constructor., SourceFile(/Users/stuart.lang/RiderProjects/ConsoleApp9/src/LocalSqsSnsMessaging/SnsClient/InMemorySnsClient.cs[52622..52637))
[12:29:58 DBG] Required member 'SnsSubscription.EndPoint' must be set in the object initializer or attribute constructor., SourceFile(/Users/stuart.lang/RiderProjects/ConsoleApp9/src/LocalSqsSnsMessaging/SnsClient/InMemorySnsClient.cs[52622..52637))
[12:29:58 DBG] Required member 'SnsSubscription.Protocol' must be set in the object initializer or attribute constructor., SourceFile(/Users/stuart.lang/RiderProjects/ConsoleApp9/src/LocalSqsSnsMessaging/SnsClient/InMemorySnsClient.cs[52622..52637))
[12:29:58 DBG] Required member 'SnsSubscription.Raw' must be set in the object initializer or attribute constructor., SourceFile(/Users/stuart.lang/RiderProjects/ConsoleApp9/src/LocalSqsSnsMessaging/SnsClient/InMemorySnsClient.cs[52622..52637))
[12:29:58 DBG] Required member 'SnsSubscription.FilterPolicy' must be set in the object initializer or attribute constructor., SourceFile(/Users/stuart.lang/RiderProjects/ConsoleApp9/src/LocalSqsSnsMessaging/SnsClient/InMemorySnsClient.cs[52622..52637))
[12:29:58 DBG] Use of unassigned local variable 'isRawMessageDelivery', SourceFile(/Users/stuart.lang/RiderProjects/ConsoleApp9/src/LocalSqsSnsMessaging/SnsClient/InMemorySnsClient.cs[48204..48224))
[12:29:58 DBG] Use of unassigned local variable 'isRawMessageDelivery', SourceFile(/Users/stuart.lang/RiderProjects/ConsoleApp9/src/LocalSqsSnsMessaging/SnsClient/InMemorySnsClient.cs[49820..49840))
[12:29:58 DBG] Operator '==' cannot be applied to operands of type 'target-typed conditional expression' and 'int', SourceFile(/Users/stuart.lang/RiderProjects/ConsoleApp9/src/LocalSqsSnsMessaging/SqsClient/InMemorySqsClient.cs[78123..78236))
[12:29:58 DBG] Type of conditional expression cannot be determined because there is no implicit conversion between 'method group' and 'int', SourceFile(/Users/stuart.lang/RiderProjects/ConsoleApp9/src/LocalSqsSnsMessaging/SqsClient/InMemorySqsClient.cs[78124..78230))
[12:29:58 DBG] The name 'topic' does not exist in the current context, SourceFile(/Users/stuart.lang/RiderProjects/ConsoleApp9/src/LocalSqsSnsMessaging/SnsClient/InMemorySnsClient.cs[66107..66112))
[12:29:58 DBG] The name 'topic' does not exist in the current context, SourceFile(/Users/stuart.lang/RiderProjects/ConsoleApp9/src/LocalSqsSnsMessaging/SnsClient/InMemorySnsClient.cs[66321..66326))
[12:29:58 DBG] 'Enumerable.Sum(IEnumerable<decimal>)' is a method, which is not valid in the given context, SourceFile(/Users/stuart.lang/RiderProjects/ConsoleApp9/src/LocalSqsSnsMessaging/SqsClient/InMemorySqsClient.cs[82769..82772))
[12:29:58 DBG] 'Enumerable.Sum(IEnumerable<decimal>)' is a method, which is not valid in the given context, SourceFile(/Users/stuart.lang/RiderProjects/ConsoleApp9/src/LocalSqsSnsMessaging/SqsClient/InMemorySqsClient.cs[83039..83042))
[12:29:58 DBG] 'Enumerable.Sum(IEnumerable<decimal>)' is a method, which is not valid in the given context, SourceFile(/Users/stuart.lang/RiderProjects/ConsoleApp9/src/LocalSqsSnsMessaging/SqsClient/InMemorySqsClient.cs[83881..83884))
[12:29:58 DBG] 'Enumerable.Sum(IEnumerable<decimal>)' is a method, which is not valid in the given context, SourceFile(/Users/stuart.lang/RiderProjects/ConsoleApp9/src/LocalSqsSnsMessaging/SqsClient/InMemorySqsClient.cs[84413..84416))
[12:29:58 DBG] The name 'policyJson' does not exist in the current context, SourceFile(/Users/stuart.lang/RiderProjects/ConsoleApp9/src/LocalSqsSnsMessaging/SnsClient/InMemorySnsClient.cs[68568..68578))
[12:29:58 DBG] The name 'policyJson' does not exist in the current context, SourceFile(/Users/stuart.lang/RiderProjects/ConsoleApp9/src/LocalSqsSnsMessaging/SnsClient/InMemorySnsClient.cs[69705..69715))
[12:29:58 DBG] The name 'policyJson' does not exist in the current context, SourceFile(/Users/stuart.lang/RiderProjects/ConsoleApp9/src/LocalSqsSnsMessaging/SqsClient/InMemorySqsClient.cs[98773..98783))
[12:29:58 DBG] The name 'policyJson' does not exist in the current context, SourceFile(/Users/stuart.lang/RiderProjects/ConsoleApp9/src/LocalSqsSnsMessaging/SqsClient/InMemorySqsClient.cs[99874..99884))
[12:29:58 DBG] No overload for method 'All' takes 0 arguments, SourceFile(/Users/stuart.lang/RiderProjects/ConsoleApp9/src/LocalSqsSnsMessaging/SqsClient/InMemorySqsClient.cs[103594..103597))
[12:29:58 DBG] Required member 'SqsMoveTask.TaskHandle' must be set in the object initializer or attribute constructor., SourceFile(/Users/stuart.lang/RiderProjects/ConsoleApp9/src/LocalSqsSnsMessaging/SqsClient/InMemorySqsClient.cs[123704..123715))
[12:29:58 DBG] Required member 'SqsMoveTask.SourceQueue' must be set in the object initializer or attribute constructor., SourceFile(/Users/stuart.lang/RiderProjects/ConsoleApp9/src/LocalSqsSnsMessaging/SqsClient/InMemorySqsClient.cs[123704..123715))
[12:29:58 DBG] Required member 'SqsMoveTask.MoveTaskJob' must be set in the object initializer or attribute constructor., SourceFile(/Users/stuart.lang/RiderProjects/ConsoleApp9/src/LocalSqsSnsMessaging/SqsClient/InMemorySqsClient.cs[123704..123715))
[12:29:58 DBG] Required member 'SqsMoveTask.Status' must be set in the object initializer or attribute constructor., SourceFile(/Users/stuart.lang/RiderProjects/ConsoleApp9/src/LocalSqsSnsMessaging/SqsClient/InMemorySqsClient.cs[123704..123715))
[12:29:58 DBG] The name 'policyJson' does not exist in the current context, SourceFile(/Users/stuart.lang/RiderProjects/ConsoleApp9/src/LocalSqsSnsMessaging/SqsClient/InMemorySqsClient.cs[129477..129487))
[12:29:58 DBG] The name 'policyJson' does not exist in the current context, SourceFile(/Users/stuart.lang/RiderProjects/ConsoleApp9/src/LocalSqsSnsMessaging/SqsClient/InMemorySqsClient.cs[130784..130794))
[12:29:58 DBG] Trying compilation for the second time.
[12:29:58 DBG] RollBacking mutations from /Users/stuart.lang/RiderProjects/ConsoleApp9/src/LocalSqsSnsMessaging/PaginatedList.cs.
[12:29:58 DBG] Found mutant 21 of type 'Equality' controlled by 'ConditionalInstrumentationEngine'.
[12:29:58 DBG] Found mutant 25 of type 'Linq' controlled by 'ConditionalInstrumentationEngine'.
[12:29:58 VRB] RolledBack to namespace LocalSqsSnsMessaging;

internal sealed class PaginatedList<T>
{
    private readonly IList<T> _items;

    public PaginatedList(IEnumerable<T> items)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(4)){}else    {
        _items = items.ToList();
    }
}
    /// <summary>
    /// Gets a paginated and optionally filtered list. Useful for AWS APIs with paginated responses.
    /// </summary>
    /// <param name="tokenGenerator">Function to generate a token for each item</param>
    /// <param name="pageSize">Number of items per page</param>
    /// <param name="nextToken">Token for the next page</param>
    /// <param name="filter">Optional filter function</param>
    /// <returns>A tuple containing the items for the current page and the next page token</returns>
    public (List<T> Items, string? NextToken) GetPage(
        Func<T, string> tokenGenerator,
        int pageSize,
        string? nextToken = null,
        Func<T, bool>? filter = null)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(5)){}else    {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(6)){;}else{        ArgumentNullException.ThrowIfNull(tokenGenerator);
}if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(7)){;}else{        ArgumentOutOfRangeException.ThrowIfLessThanOrEqual(pageSize, 0, (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(8)?"":"Page size must be positive."));
}        
        var query = (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(10)?(false?_items.Where(filter).ToList() :_items):(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(9)?(true?_items.Where(filter).ToList() :_items):(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(11)?filter == null :filter != null )? _items.Where(filter).ToList() : _items));

        var startIndex = 0;
        if ((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(12)?string.IsNullOrEmpty(nextToken):!(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(14)?(nextToken!=""):(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(13)?(nextToken!=null):string.IsNullOrEmpty(nextToken)))))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(15)){}else        {
            startIndex = query.FindIndex(item => (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(16)?tokenGenerator(item) != nextToken:tokenGenerator(item) == nextToken));
            if ((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(17)?startIndex != -1:startIndex == (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(18)?+1:-1))) startIndex = 0;  // Token not found, start from beginning
        }
}
        var page = (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(19)?query.Skip(startIndex).Skip(pageSize).ToList():(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(20)?query.Take(startIndex).Take(pageSize).ToList():query.Skip(startIndex).Take(pageSize).ToList()));

        string? newNextToken = null;
        if ((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(23)?!(startIndex + pageSize < query.Count):(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(22)?startIndex + pageSize <= query.Count:(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(24)?startIndex - pageSize :startIndex + pageSize )< query.Count)))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(26)){}else        {
            newNextToken = tokenGenerator(query.ElementAt((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(27)?startIndex - pageSize:startIndex + pageSize)));
        }
}
        return (page, newNextToken);
    }
return default((List<T> Items, string? NextToken));}}

internal static class EnumerableExtensions
{
    public static int FindIndex<T>(this IEnumerable<T> source, Func<T, bool> predicate)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(28)){}else    {
        var index = 0;
        foreach (var item in source)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(29)){}else        {
            if ((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(30)?!(predicate(item)):predicate(item))) return index;
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(31)){;}else{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(32)){            index--;
}else{            index++;
}}        }
}        return (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(33)?+1:-1);
    }
return default(int);}}
[12:29:58 DBG] RollBacking mutations from /Users/stuart.lang/RiderProjects/ConsoleApp9/src/LocalSqsSnsMessaging/SnsClient/InMemorySnsClient.cs.
[12:29:58 DBG] Found mutant 72 of type 'Initializer' controlled by 'ConditionalInstrumentationEngine'.
[12:29:58 DBG] Found mutant 72 of type 'Initializer' controlled by 'ConditionalInstrumentationEngine'.
[12:29:58 DBG] Found mutant 72 of type 'Initializer' controlled by 'ConditionalInstrumentationEngine'.
[12:29:58 DBG] Found mutant 189 of type 'Conditional' controlled by 'IfInstrumentationEngine'.
[12:29:58 DBG] Found mutant 188 of type 'Conditional' controlled by 'IfInstrumentationEngine'.
[12:29:58 DBG] Found mutant 200 of type 'Linq' controlled by 'ConditionalInstrumentationEngine'.
[12:29:58 DBG] Found mutant 254 of type 'Conditional' controlled by 'IfInstrumentationEngine'.
[12:29:58 DBG] Found mutant 253 of type 'Conditional' controlled by 'IfInstrumentationEngine'.
[12:29:58 DBG] Found mutant 257 of type 'Initializer' controlled by 'ConditionalInstrumentationEngine'.
[12:29:58 DBG] Found mutant 257 of type 'Initializer' controlled by 'ConditionalInstrumentationEngine'.
[12:29:58 DBG] Found mutant 257 of type 'Initializer' controlled by 'ConditionalInstrumentationEngine'.
[12:29:58 DBG] Found mutant 257 of type 'Initializer' controlled by 'ConditionalInstrumentationEngine'.
[12:29:58 DBG] Found mutant 257 of type 'Initializer' controlled by 'ConditionalInstrumentationEngine'.
[12:29:58 DBG] Found mutant 257 of type 'Initializer' controlled by 'ConditionalInstrumentationEngine'.
[12:29:58 DBG] Found mutant 250 of type 'Logical' controlled by 'IfInstrumentationEngine'.
[12:29:58 DBG] Found mutant 251 of type 'Logical' controlled by 'IfInstrumentationEngine'.
[12:29:58 DBG] Found mutant 308 of type 'Conditional' controlled by 'IfInstrumentationEngine'.
[12:29:58 DBG] Found mutant 307 of type 'Conditional' controlled by 'IfInstrumentationEngine'.
[12:29:58 DBG] Found mutant 322 of type 'Conditional' controlled by 'IfInstrumentationEngine'.
[12:29:58 DBG] Found mutant 321 of type 'Conditional' controlled by 'IfInstrumentationEngine'.
[12:29:58 VRB] RolledBack to using System.Runtime.CompilerServices;
using System.Text;
using Amazon.Auth.AccessControlPolicy;
using Amazon.Auth.AccessControlPolicy.ActionIdentifiers;
using Amazon.Runtime;
using Amazon.Runtime.SharedInterfaces;
using Amazon.SimpleNotificationService;
using Amazon.SimpleNotificationService.Model;
using RemovePermissionRequest = Amazon.SimpleNotificationService.Model.RemovePermissionRequest;
using RemovePermissionResponse = Amazon.SimpleNotificationService.Model.RemovePermissionResponse;

namespace LocalSqsSnsMessaging;

/// <summary>
/// Represents an in-memory implementation of Amazon Simple Notification Service (SNS) client.
/// This class provides methods to interact with SNS topics and subscriptions in a local, in-memory environment,
/// primarily for testing and development purposes without connecting to actual AWS services.
/// </summary>
public sealed partial class InMemorySnsClient : IAmazonSimpleNotificationService
{
    private readonly InMemoryAwsBus _bus;
    private readonly Lazy<ISimpleNotificationServicePaginatorFactory> _paginators;
    
    private const int MaxMessageSize = 262144;

    internal InMemorySnsClient(InMemoryAwsBus bus)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(36)){}else    {
        _bus = bus;
        _paginators = new(() => GetPaginatorFactory(this));
    }
}
#pragma warning disable CA1063
    void IDisposable.Dispose()
#pragma warning restore CA1063
    {
    }

    IClientConfig? IAmazonService.Config => null;

    public async Task<string> SubscribeQueueAsync(string topicArn, ICoreAmazonSQS sqsClient, string sqsQueueUrl)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(37)){}else{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(41))    {
        ArgumentNullException.ThrowIfNull(sqsClient);
        
        // Get the queue's existing policy
        var queueAttributes = await sqsClient.GetAttributesAsync(sqsQueueUrl).ConfigureAwait(true);
        
        var sqsQueueArn = queueAttributes["QueueArn"];

        string? policyStr = null;
        if(!(queueAttributes.TryGetValue("Policy", out var attribute)))
        {
            policyStr = attribute;
        }
        var policy = string.IsNullOrEmpty(policyStr) ? new Policy() : Policy.FromJson(policyStr);

        if (!HasSqsPermission(policy, topicArn, sqsQueueArn))
        {
            AddSqsPermission(policy, topicArn, sqsQueueArn);
        }

        var response = await SubscribeAsync(new SubscribeRequest
        {
            TopicArn = topicArn,
            Protocol = "sqs",
            Endpoint = sqsQueueArn,
        }).ConfigureAwait(true);

        var setAttributes = new Dictionary<string, string> { { "Policy", policy.ToJson() } };
        await sqsClient.SetAttributesAsync(sqsQueueUrl, setAttributes).ConfigureAwait(true);

        return response.SubscriptionArn;
    }
else    {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(38)){;}else{        ArgumentNullException.ThrowIfNull(sqsClient);
}        
        // Get the queue's existing policy
        var queueAttributes = await sqsClient.GetAttributesAsync(sqsQueueUrl).ConfigureAwait((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(39)?false:true));
        
        var sqsQueueArn = queueAttributes[(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(40)?"":"QueueArn")];

        string? policyStr = null;
        if(queueAttributes.TryGetValue((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(42)?"":"Policy"), out var attribute))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(43)){}else        {
            policyStr = attribute;
        }
}        var policy = (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(45)?(false?new Policy() :Policy.FromJson(policyStr)):(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(44)?(true?new Policy() :Policy.FromJson(policyStr)):(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(47)?(policyStr!=""):(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(46)?(policyStr!=null):string.IsNullOrEmpty(policyStr) ))? new Policy() : Policy.FromJson(policyStr)));

        if ((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(48)?HasSqsPermission(policy, topicArn, sqsQueueArn):!HasSqsPermission(policy, topicArn, sqsQueueArn)))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(49)){}else        {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(50)){;}else{            AddSqsPermission(policy, topicArn, sqsQueueArn);
}        }
}
        var response = await SubscribeAsync((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(51)?new SubscribeRequest
{}:new SubscribeRequest
        {
            TopicArn = topicArn,
            Protocol = (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(52)?"":"sqs"),
            Endpoint = sqsQueueArn,
        })).ConfigureAwait((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(53)?false:true));

        var setAttributes = (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(54)?new Dictionary<string, string> {}:new Dictionary<string, string> { { (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(55)?"":"Policy"), policy.ToJson() } });
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(56)){;}else{        await sqsClient.SetAttributesAsync(sqsQueueUrl, setAttributes).ConfigureAwait((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(57)?false:true));
}
        return response.SubscriptionArn;
    }
}return default(string);}
    public async Task<IDictionary<string, string>> SubscribeQueueToTopicsAsync(IList<string> topicArns,
        ICoreAmazonSQS sqsClient, string sqsQueueUrl)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(58)){}else    {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(59)){;}else{        ArgumentNullException.ThrowIfNull(topicArns);
}        
        Dictionary<string, string> topicSubscriptionMapping = new();
        foreach (var topicArn in topicArns)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(60)){}else        {
            var subscriptionArn = await SubscribeQueueAsync(topicArn, sqsClient, sqsQueueUrl).ConfigureAwait((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(61)?false:true));
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(62)){;}else{            topicSubscriptionMapping.Add(topicArn, subscriptionArn);
}        }
}
        return topicSubscriptionMapping;
    }
return default(IDictionary<string, string>);}
    public Task<Topic?> FindTopicAsync(string topicName)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(63)){}else{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(64))    {
        if (_bus.Topics.TryGetValue(topicName, out var topic))
        {
            return Task.FromResult<Topic?>(null);
        }

        return Task.FromResult<Topic?>(new Topic
        {
            TopicArn = topic.Arn
        });
    }
else    {
        if (!_bus.Topics.TryGetValue(topicName, out var topic))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(65)){}else        {
            return Task.FromResult<Topic?>(null);
        }
}
        return Task.FromResult<Topic?>((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(66)?new Topic
{}:new Topic
        {
            TopicArn = topic.Arn
        }));
    }
}return default(Task<Topic?>);}
    public Task<CreateTopicResponse> CreateTopicAsync(string name, CancellationToken cancellationToken = default)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(67)){}else    {
        return CreateTopicAsync((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(68)?new CreateTopicRequest {}:new CreateTopicRequest { Name = name }), cancellationToken);
    }
return default(Task<CreateTopicResponse>);}
    public Task<CreateTopicResponse> CreateTopicAsync(CreateTopicRequest request,
        CancellationToken cancellationToken = default)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(69)){}else    {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(70)){;}else{        ArgumentNullException.ThrowIfNull(request);
}        
        var topicArn = (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(71)?$"":$"arn:aws:sns:{_bus.CurrentRegion}:{_bus.CurrentAccountId}:{request.Name}");
        var topic = new SnsTopicResource
        {
            Name = request.Name,
            Region = _bus.CurrentRegion,
            Arn = topicArn
        };
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(73)){;}else{
        _bus.Topics.TryAdd(request.Name, topic);
}
        return Task.FromResult((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(74)?new CreateTopicResponse
{}:new CreateTopicResponse
        {
            TopicArn = topicArn
        }).SetCommonProperties());
    }
return default(Task<CreateTopicResponse>);}
    public Task<DeleteTopicResponse> DeleteTopicAsync(string topicArn, CancellationToken cancellationToken = default)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(75)){}else    {
        return DeleteTopicAsync((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(76)?new DeleteTopicRequest {}:new DeleteTopicRequest { TopicArn = topicArn }), cancellationToken);
    }
return default(Task<DeleteTopicResponse>);}
    public Task<DeleteTopicResponse> DeleteTopicAsync(DeleteTopicRequest request,
        CancellationToken cancellationToken = default)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(77)){}else    {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(78)){;}else{        ArgumentNullException.ThrowIfNull(request);
}        
        var topicName = GetTopicNameByArn(request.TopicArn);
        _bus.Topics.TryRemove(topicName, out _);

        return Task.FromResult(new DeleteTopicResponse().SetCommonProperties());
    }
return default(Task<DeleteTopicResponse>);}
    public Task<GetSubscriptionAttributesResponse> GetSubscriptionAttributesAsync(string subscriptionArn,
        CancellationToken cancellationToken = default)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(79)){}else    {
        return GetSubscriptionAttributesAsync((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(80)?new GetSubscriptionAttributesRequest {}:new GetSubscriptionAttributesRequest { SubscriptionArn = subscriptionArn }),
            cancellationToken);
    }
return default(Task<GetSubscriptionAttributesResponse>);}
    public Task<GetSubscriptionAttributesResponse> GetSubscriptionAttributesAsync(
        GetSubscriptionAttributesRequest request,
        CancellationToken cancellationToken = default)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(81)){}else{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(83))    {
        ArgumentNullException.ThrowIfNull(request);
        
        if (_bus.Subscriptions.TryGetValue(request.SubscriptionArn, out var subscription))
        {
            throw new NotFoundException("Subscription not found.");
        }

        return Task.FromResult(new GetSubscriptionAttributesResponse
        {
            Attributes = new Dictionary<string, string>
            {
                ["SubscriptionArn"] = subscription.SubscriptionArn,
                ["TopicArn"] = subscription.TopicArn,
                ["Protocol"] = subscription.Protocol,
                ["Endpoint"] = subscription.EndPoint,
                ["Owner"] = _bus.CurrentAccountId,
                ["ConfirmationWasAuthenticated"] = "false",
                ["IsAuthenticated"] = "false",
                ["PendingConfirmation"] = "false",
                ["RawMessageDelivery"] = subscription.Raw.ToString(),
                ["FilterPolicy"] = subscription.FilterPolicy
            }
        }.SetCommonProperties());
    }
else    {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(82)){;}else{        ArgumentNullException.ThrowIfNull(request);
}        
        if (!_bus.Subscriptions.TryGetValue(request.SubscriptionArn, out var subscription))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(84)){}else        {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(85)){;}else{            throw new NotFoundException((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(86)?"":"Subscription not found."));
}        }
}
        return Task.FromResult((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(87)?new GetSubscriptionAttributesResponse
{}:new GetSubscriptionAttributesResponse
        {
            Attributes = (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(88)?new Dictionary<string, string>
{}:new Dictionary<string, string>
            {
                [(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(89)?"":"SubscriptionArn")] = subscription.SubscriptionArn,
                [(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(90)?"":"TopicArn")] = subscription.TopicArn,
                [(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(91)?"":"Protocol")] = subscription.Protocol,
                [(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(92)?"":"Endpoint")] = subscription.EndPoint,
                [(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(93)?"":"Owner")] = _bus.CurrentAccountId,
                [(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(94)?"":"ConfirmationWasAuthenticated")] = (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(95)?"":"false"),
                [(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(96)?"":"IsAuthenticated")] = (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(97)?"":"false"),
                [(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(98)?"":"PendingConfirmation")] = (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(99)?"":"false"),
                [(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(100)?"":"RawMessageDelivery")] = subscription.Raw.ToString(),
                [(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(101)?"":"FilterPolicy")] = subscription.FilterPolicy
            }
)        }).SetCommonProperties());
    }
}return default(Task<GetSubscriptionAttributesResponse>);}
    public Task<GetTopicAttributesResponse> GetTopicAttributesAsync(string topicArn,
        CancellationToken cancellationToken = default)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(102)){}else    {
        return GetTopicAttributesAsync((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(103)?new GetTopicAttributesRequest {}:new GetTopicAttributesRequest { TopicArn = topicArn }), cancellationToken);
    }
return default(Task<GetTopicAttributesResponse>);}
    public Task<GetTopicAttributesResponse> GetTopicAttributesAsync(GetTopicAttributesRequest request,
        CancellationToken cancellationToken = default)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(104)){}else{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(106))    {
        ArgumentNullException.ThrowIfNull(request);
        
        var topicName = GetTopicNameByArn(request.TopicArn);
        if (_bus.Topics.TryGetValue(topicName, out var topic))
        {
            throw new NotFoundException("Topic not found.");
        }

        return Task.FromResult(new GetTopicAttributesResponse
        {
            Attributes = topic.Attributes
        }.SetCommonProperties());
    }
else    {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(105)){;}else{        ArgumentNullException.ThrowIfNull(request);
}        
        var topicName = GetTopicNameByArn(request.TopicArn);
        if (!_bus.Topics.TryGetValue(topicName, out var topic))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(107)){}else        {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(108)){;}else{            throw new NotFoundException((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(109)?"":"Topic not found."));
}        }
}
        return Task.FromResult((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(110)?new GetTopicAttributesResponse
{}:new GetTopicAttributesResponse
        {
            Attributes = topic.Attributes
        }).SetCommonProperties());
    }
}return default(Task<GetTopicAttributesResponse>);}
    public Task<ListSubscriptionsResponse> ListSubscriptionsAsync(CancellationToken cancellationToken = default)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(111)){}else    {
        var subscriptions = _bus.Subscriptions.Values.ToList();
        return Task.FromResult((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(112)?new ListSubscriptionsResponse
{}:new ListSubscriptionsResponse
        {
            Subscriptions = subscriptions.Select(s => (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(113)?new Subscription
{}:new Subscription
            {
                SubscriptionArn = s.SubscriptionArn,
                TopicArn = s.TopicArn,
                Protocol = s.Protocol,
                Endpoint = s.EndPoint,
                Owner = _bus.CurrentAccountId,
            })).ToList()
        }).SetCommonProperties());
    }
return default(Task<ListSubscriptionsResponse>);}
    public Task<ListSubscriptionsResponse> ListSubscriptionsAsync(string nextToken,
        CancellationToken cancellationToken = default)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(114)){}else    {
        return ListSubscriptionsAsync((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(115)?new ListSubscriptionsRequest {}:new ListSubscriptionsRequest { NextToken = nextToken }), cancellationToken);
    }
return default(Task<ListSubscriptionsResponse>);}
    public Task<ListSubscriptionsResponse> ListSubscriptionsAsync(ListSubscriptionsRequest request,
        CancellationToken cancellationToken = default)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(116)){}else    {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(117)){;}else{        ArgumentNullException.ThrowIfNull(request);
}        
        var allSubscriptions = _bus.Subscriptions.Values
            .Select(s => (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(118)?new Subscription
{}:new Subscription
            {
                SubscriptionArn = s.SubscriptionArn,
                TopicArn = s.TopicArn,
                Protocol = s.Protocol,
                Endpoint = s.EndPoint,
                Owner = _bus.CurrentAccountId,
            })).ToList();

        var pagedSubscriptions = new PaginatedList<Subscription>(allSubscriptions);

        var (items, nextToken) = pagedSubscriptions.GetPage(
            TokenGenerator, 100, request.NextToken);
        
        return Task.FromResult((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(119)?new ListSubscriptionsResponse
{}:new ListSubscriptionsResponse
        {
            Subscriptions = items,
            NextToken = nextToken
        }).SetCommonProperties());

        static string TokenGenerator(Subscription x)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(120)){}else        {
            return Convert.ToBase64String(Encoding.UTF8.GetBytes(x.SubscriptionArn));
        }
return default(string);}    }
return default(Task<ListSubscriptionsResponse>);}
    public Task<ListSubscriptionsByTopicResponse> ListSubscriptionsByTopicAsync(string topicArn, string nextToken,
        CancellationToken cancellationToken = default)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(121)){}else    {
        return ListSubscriptionsByTopicAsync((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(122)?new ListSubscriptionsByTopicRequest
{}:new ListSubscriptionsByTopicRequest
        {
            TopicArn = topicArn,
            NextToken = nextToken
        }), cancellationToken);
    }
return default(Task<ListSubscriptionsByTopicResponse>);}
    public Task<ListSubscriptionsByTopicResponse> ListSubscriptionsByTopicAsync(string topicArn,
        CancellationToken cancellationToken = default)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(123)){}else    {
        return ListSubscriptionsByTopicAsync((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(124)?new ListSubscriptionsByTopicRequest {}:new ListSubscriptionsByTopicRequest { TopicArn = topicArn }),
            cancellationToken);
    }
return default(Task<ListSubscriptionsByTopicResponse>);}
    public Task<ListSubscriptionsByTopicResponse> ListSubscriptionsByTopicAsync(ListSubscriptionsByTopicRequest request,
        CancellationToken cancellationToken = default)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(125)){}else    {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(126)){;}else{        ArgumentNullException.ThrowIfNull(request);
}        
        var topicName = GetTopicNameByArn(request.TopicArn);
        if ((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(127)?_bus.Topics.TryGetValue(topicName, out _):!_bus.Topics.TryGetValue(topicName, out _)))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(128)){}else        {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(129)){;}else{            throw new NotFoundException((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(130)?"":"Topic not found."));
}        }
}
        var allSubscriptions = _bus.Subscriptions.Values
            .Where(s => string.Equals(s.TopicArn, request.TopicArn, StringComparison.OrdinalIgnoreCase))
            .Select(s => (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(131)?new Subscription
{}:new Subscription
            {
                SubscriptionArn = s.SubscriptionArn,
                TopicArn = s.TopicArn,
                Protocol = s.Protocol,
                Endpoint = s.EndPoint,
                Owner = _bus.CurrentAccountId,
            }))
            .ToList();

        var pagedSubscriptions = new PaginatedList<Subscription>(allSubscriptions);

        var (items, nextToken) = pagedSubscriptions.GetPage(
            TokenGenerator, 100, request.NextToken);

        return Task.FromResult((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(132)?new ListSubscriptionsByTopicResponse
{}:new ListSubscriptionsByTopicResponse
        {
            Subscriptions = items,
            NextToken = nextToken
        }).SetCommonProperties());

        static string TokenGenerator(Subscription x)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(133)){}else        {
            return Convert.ToBase64String(Encoding.UTF8.GetBytes(x.SubscriptionArn));
        }
return default(string);}    }
return default(Task<ListSubscriptionsByTopicResponse>);}
    public Task<ListTagsForResourceResponse> ListTagsForResourceAsync(ListTagsForResourceRequest request,
        CancellationToken cancellationToken = default)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(134)){}else{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(136))    {
        ArgumentNullException.ThrowIfNull(request);
        
        var topicName = GetTopicNameByArn(request.ResourceArn);
        if (_bus.Topics.TryGetValue(topicName, out var topic))
        {
            throw new ResourceNotFoundException("Topic not found.");
        }
        
        var tags = topic.Tags.Select(t => new Tag { Key = t.Key, Value = t.Value }).ToList();
        
        return Task.FromResult(new ListTagsForResourceResponse
        {
            Tags = tags
        }.SetCommonProperties());
    }
else    {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(135)){;}else{        ArgumentNullException.ThrowIfNull(request);
}        
        var topicName = GetTopicNameByArn(request.ResourceArn);
        if (!_bus.Topics.TryGetValue(topicName, out var topic))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(137)){}else        {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(138)){;}else{            throw new ResourceNotFoundException((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(139)?"":"Topic not found."));
}        }
}        
        var tags = topic.Tags.Select(t => (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(140)?new Tag {}:new Tag { Key = t.Key, Value = t.Value })).ToList();
        
        return Task.FromResult((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(141)?new ListTagsForResourceResponse
{}:new ListTagsForResourceResponse
        {
            Tags = tags
        }).SetCommonProperties());
    }
}return default(Task<ListTagsForResourceResponse>);}
    public Task<ListTopicsResponse> ListTopicsAsync(CancellationToken cancellationToken = default)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(142)){}else    {
        return Task.FromResult((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(143)?new ListTopicsResponse
{}:new ListTopicsResponse
        {
            Topics = _bus.Topics.Values.Select(t => (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(144)?new Topic
{}:new Topic
            {
                TopicArn = t.Arn
            })).ToList()
        }).SetCommonProperties());
    }
return default(Task<ListTopicsResponse>);}
    public Task<ListTopicsResponse> ListTopicsAsync(string nextToken, CancellationToken cancellationToken = default)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(145)){}else    {
        return ListTopicsAsync((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(146)?new ListTopicsRequest {}:new ListTopicsRequest { NextToken = nextToken }), cancellationToken);
    }
return default(Task<ListTopicsResponse>);}
    public Task<ListTopicsResponse> ListTopicsAsync(ListTopicsRequest request,
        CancellationToken cancellationToken = default)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(147)){}else    {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(148)){;}else{        ArgumentNullException.ThrowIfNull(request);
}        
        var allTopics = _bus.Topics.Values
            .Select(t => (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(149)?new Topic {}:new Topic { TopicArn = t.Arn }))
            .ToList();

        var pagedTopics = new PaginatedList<Topic>(allTopics);

        var (items, nextToken) = pagedTopics.GetPage(
            TokenGenerator, 100, request.NextToken);

        return Task.FromResult((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(150)?new ListTopicsResponse
{}:new ListTopicsResponse
        {
            Topics = items,
            NextToken = nextToken
        }).SetCommonProperties());

        static string TokenGenerator(Topic x)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(151)){}else        {
            return Convert.ToBase64String(Encoding.UTF8.GetBytes(x.TopicArn));
        }
return default(string);}    }
return default(Task<ListTopicsResponse>);}    
    public Task<PublishResponse> PublishAsync(string topicArn, string message,
        CancellationToken cancellationToken = default)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(152)){}else    {
        return PublishAsync(topicArn, message, null, cancellationToken);
    }
return default(Task<PublishResponse>);}
    public Task<PublishResponse> PublishAsync(string topicArn, string message, string? subject,
        CancellationToken cancellationToken = default)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(153)){}else    {
        return PublishAsync((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(154)?new PublishRequest
{}:new PublishRequest
        {
            TopicArn = topicArn,
            Message = message,
            Subject = subject
        }), cancellationToken);
    }
return default(Task<PublishResponse>);}
    public Task<PublishResponse> PublishAsync(PublishRequest request, CancellationToken cancellationToken = default)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(155)){}else    {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(156)){;}else{        ArgumentNullException.ThrowIfNull(request);
}
        var messageSize = CalculateMessageSize(request.Message, request.MessageAttributes);
        if ((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(159)?!(messageSize > MaxMessageSize):(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(158)?messageSize >= MaxMessageSize:(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(157)?messageSize < MaxMessageSize:messageSize > MaxMessageSize))))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(160)){}else        {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(161)){;}else{            throw new InvalidParameterException((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(162)?$"":$"Message size has exceeded the limit of {MaxMessageSize} bytes."));
}        }
}        
        var topic = GetTopicByArn(request.TopicArn);
        var result = topic.PublishAction.Execute(request);

        return Task.FromResult(result);
    }
return default(Task<PublishResponse>);}    
    private static int CalculateMessageSize(string message, Dictionary<string, MessageAttributeValue>? messageAttributes)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(163)){}else    {
        var totalSize = 0;
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(164)){
        // Add message body size
        totalSize -= Encoding.UTF8.GetByteCount(message);
}else{
        // Add message body size
        totalSize += Encoding.UTF8.GetByteCount(message);
}
        // Add message attributes size
        if ((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(165)?messageAttributes == null:messageAttributes != null))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(166)){}else        {
            foreach (var (key, attributeValue) in messageAttributes)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(167)){}else            {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(168)){                // Add attribute name size
                totalSize -= Encoding.UTF8.GetByteCount(key);
}else{                // Add attribute name size
                totalSize += Encoding.UTF8.GetByteCount(key);
}if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(169)){
                // Add data type size (including any custom type prefix)
                totalSize -= Encoding.UTF8.GetByteCount(attributeValue.DataType);
}else{
                // Add data type size (including any custom type prefix)
                totalSize += Encoding.UTF8.GetByteCount(attributeValue.DataType);
}
                // Add value size based on the type
                if ((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(170)?attributeValue.BinaryValue == null:attributeValue.BinaryValue != null))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(171)){}else                {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(172)){                    totalSize -= (int)attributeValue.BinaryValue.Length;
}else{                    totalSize += (int)attributeValue.BinaryValue.Length;
}                }
}                else if ((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(173)?attributeValue.StringValue == null:attributeValue.StringValue != null))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(174)){}else                {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(175)){                    totalSize -= Encoding.UTF8.GetByteCount(attributeValue.StringValue);
}else{                    totalSize += Encoding.UTF8.GetByteCount(attributeValue.StringValue);
}                }
}            }
}        }
}
        return totalSize;
    }
return default(int);}

    public Task<PublishBatchResponse> PublishBatchAsync(PublishBatchRequest request,
        CancellationToken cancellationToken = default)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(176)){}else    {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(177)){;}else{        ArgumentNullException.ThrowIfNull(request);
}        var totalSize = (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(178)?request.PublishBatchRequestEntries
            .Max(requestEntry => CalculateMessageSize(requestEntry.Message, requestEntry.MessageAttributes)):request.PublishBatchRequestEntries
            .Sum(requestEntry => CalculateMessageSize(requestEntry.Message, requestEntry.MessageAttributes)));
        if ((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(181)?!(totalSize > MaxMessageSize):(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(180)?totalSize >= MaxMessageSize:(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(179)?totalSize < MaxMessageSize:totalSize > MaxMessageSize))))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(182)){}else        {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(183)){;}else{            throw new InvalidParameterException((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(184)?$"":$"Message size has exceeded the limit of {MaxMessageSize} bytes."));
}        }
}        
        var topic = GetTopicByArn(request.TopicArn);
        var result = topic.PublishAction.ExecuteBatch(request);

        return Task.FromResult(result);
    }
return default(Task<PublishBatchResponse>);}
    public Task<RemovePermissionResponse> RemovePermissionAsync(string topicArn, string label,
        CancellationToken cancellationToken = default)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(185)){}else    {
        return RemovePermissionAsync(new RemovePermissionRequest(), cancellationToken);
    }
return default(Task<RemovePermissionResponse>);}
    public Task<RemovePermissionResponse> RemovePermissionAsync(RemovePermissionRequest request,
        CancellationToken cancellationToken = default)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(186)){}else{    {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(187)){;}else{        ArgumentNullException.ThrowIfNull(request);
}        
        var topic = GetTopicByArn(request.TopicArn);
        
        var policy = topic.Attributes.TryGetValue((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(190)?"":"Policy"), out var policyJson)
            ? Policy.FromJson(policyJson)
            : new Policy((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(191)?$"":$"{topic.Arn}/SNSDefaultPolicy"));

        var statementToRemove = (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(192)?policy.Statements.First(s => s.Id == request.Label):policy.Statements.FirstOrDefault(s => (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(193)?s.Id != request.Label:s.Id == request.Label)));
        if ((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(194)?statementToRemove != null:statementToRemove == null))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(195)){}else        {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(196)){;}else{            throw new ArgumentException((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(197)?$"":$"Value {request.Label} for parameter Label is invalid. Reason: can't find label."));
}        }
}if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(198)){;}else{
        policy.Statements.Remove(statementToRemove);
}
        if ((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(199)?!(policy.Statements.Any()):policy.Statements.Any()))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(201)){}else        {
            topic.Attributes[(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(202)?"":"Policy")] = policy.ToJson();
        }
}        else
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(203)){}else        {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(204)){;}else{            topic.Attributes.Remove((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(205)?"":"Policy"));
}        }
}
        return Task.FromResult(new RemovePermissionResponse().SetCommonProperties());
    }
}return default(Task<RemovePermissionResponse>);}    
    public Task<SetSubscriptionAttributesResponse> SetSubscriptionAttributesAsync(string subscriptionArn,
        string attributeName, string attributeValue,
        CancellationToken cancellationToken = default)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(206)){}else    {
        return SetSubscriptionAttributesAsync(
(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(207)?            new SetSubscriptionAttributesRequest
{}:            new SetSubscriptionAttributesRequest
            {
                SubscriptionArn = subscriptionArn,
                AttributeName = attributeName,
                AttributeValue = attributeValue
            }),
            cancellationToken);
    }
return default(Task<SetSubscriptionAttributesResponse>);}
    public Task<SetSubscriptionAttributesResponse> SetSubscriptionAttributesAsync(
        SetSubscriptionAttributesRequest request,
        CancellationToken cancellationToken = default)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(208)){}else{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(210))    {
        ArgumentNullException.ThrowIfNull(request);
        
        if (_bus.Subscriptions.TryGetValue(request.SubscriptionArn, out var subscription))
        {
            throw new NotFoundException($"Subscription not found: {request.SubscriptionArn}");
        }

        // Update the attribute
        if (request.AttributeName.Equals("RawMessageDelivery", StringComparison.OrdinalIgnoreCase))
        {
            if (bool.TryParse(request.AttributeValue, out var isRawMessageDelivery))
            {
                subscription.Raw = isRawMessageDelivery;
            }
            else
            {
                throw new InvalidParameterException(
                    "Invalid value for RawMessageDelivery attribute. Expected true or false.");
            }
        }
        else if (request.AttributeName.Equals("FilterPolicy", StringComparison.OrdinalIgnoreCase))
        {
            subscription.FilterPolicy = request.AttributeValue;
        }
        else
        {
            throw new InvalidParameterException($"Unsupported attribute: {request.AttributeName}");
        }

        return Task.FromResult(new SetSubscriptionAttributesResponse().SetCommonProperties());
    }
else    {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(209)){;}else{        ArgumentNullException.ThrowIfNull(request);
}        
        if (!_bus.Subscriptions.TryGetValue(request.SubscriptionArn, out var subscription))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(211)){}else        {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(212)){;}else{            throw new NotFoundException((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(213)?$"":$"Subscription not found: {request.SubscriptionArn}"));
}        }
}
        // Update the attribute
        if ((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(214)?!(request.AttributeName.Equals("RawMessageDelivery", StringComparison.OrdinalIgnoreCase)):request.AttributeName.Equals((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(215)?"":"RawMessageDelivery"), StringComparison.OrdinalIgnoreCase)))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(216)){}else{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(217))        {
            if (!(bool.TryParse(request.AttributeValue, out var isRawMessageDelivery)))
            {
                subscription.Raw = isRawMessageDelivery;
            }
            else
            {
                throw new InvalidParameterException(
                    "Invalid value for RawMessageDelivery attribute. Expected true or false.");
            }
        }
else        {
            if (bool.TryParse(request.AttributeValue, out var isRawMessageDelivery))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(218)){}else            {
                subscription.Raw = isRawMessageDelivery;
            }
}            else
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(219)){}else            {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(220)){;}else{                throw new InvalidParameterException(
(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(221)?"":                    "Invalid value for RawMessageDelivery attribute. Expected true or false."));
}            }
}        }
}}        else if ((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(222)?!(request.AttributeName.Equals("FilterPolicy", StringComparison.OrdinalIgnoreCase)):request.AttributeName.Equals((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(223)?"":"FilterPolicy"), StringComparison.OrdinalIgnoreCase)))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(224)){}else        {
            subscription.FilterPolicy = request.AttributeValue;
        }
}        else
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(225)){}else        {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(226)){;}else{            throw new InvalidParameterException((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(227)?$"":$"Unsupported attribute: {request.AttributeName}"));
}        }
}
        return Task.FromResult(new SetSubscriptionAttributesResponse().SetCommonProperties());
    }
}return default(Task<SetSubscriptionAttributesResponse>);}
    public Task<SetTopicAttributesResponse> SetTopicAttributesAsync(string topicArn, string attributeName,
        string attributeValue,
        CancellationToken cancellationToken = default)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(228)){}else    {
        return SetTopicAttributesAsync((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(229)?new SetTopicAttributesRequest
{}:new SetTopicAttributesRequest
        {
            TopicArn = topicArn,
            AttributeName = attributeName,
            AttributeValue = attributeValue
        }), cancellationToken);
    }
return default(Task<SetTopicAttributesResponse>);}
    public Task<SetTopicAttributesResponse> SetTopicAttributesAsync(SetTopicAttributesRequest request,
        CancellationToken cancellationToken = default)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(230)){}else{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(232))    {
        ArgumentNullException.ThrowIfNull(request);
        
        var topicName = GetTopicNameByArn(request.TopicArn);
        if (_bus.Topics.TryGetValue(topicName, out var topic))
        {
            throw new NotFoundException("Topic not found.");
        }

        topic.Attributes[request.AttributeName] = request.AttributeValue;
        return Task.FromResult(new SetTopicAttributesResponse().SetCommonProperties());
    }
else    {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(231)){;}else{        ArgumentNullException.ThrowIfNull(request);
}        
        var topicName = GetTopicNameByArn(request.TopicArn);
        if (!_bus.Topics.TryGetValue(topicName, out var topic))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(233)){}else        {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(234)){;}else{            throw new NotFoundException((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(235)?"":"Topic not found."));
}        }
}
        topic.Attributes[request.AttributeName] = request.AttributeValue;
        return Task.FromResult(new SetTopicAttributesResponse().SetCommonProperties());
    }
}return default(Task<SetTopicAttributesResponse>);}
    public Task<SubscribeResponse> SubscribeAsync(string topicArn, string protocol, string endpoint,
        CancellationToken cancellationToken = default)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(236)){}else    {
        return SubscribeAsync((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(237)?new SubscribeRequest
{}:new SubscribeRequest
        {
            TopicArn = topicArn,
            Protocol = protocol,
            Endpoint = endpoint
        }), cancellationToken);
    }
return default(Task<SubscribeResponse>);}
    public Task<SubscribeResponse> SubscribeAsync(SubscribeRequest request,
        CancellationToken cancellationToken = default)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(238)){}else{    {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(239)){;}else{        ArgumentNullException.ThrowIfNull(request);
}        
        if ((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(240)?request.Protocol.Equals("sqs", StringComparison.OrdinalIgnoreCase):!request.Protocol.Equals((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(241)?"":"sqs"), StringComparison.OrdinalIgnoreCase)))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(242)){}else        {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(243)){;}else{            throw new NotSupportedException((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(244)?"":"Only SQS protocol is supported."));
}        }
}        
        var queueName = (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(245)?request.Endpoint.Split(':').First():request.Endpoint.Split(':').Last());
        if ((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(246)?_bus.Queues.TryGetValue(queueName, out _):!_bus.Queues.TryGetValue(queueName, out _)))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(247)){}else        {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(248)){;}else{            throw new NotFoundException((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(249)?"":"Queue not found."));
}        }
}
        var parsedRawMessageDelivery =
            request.Attributes.TryGetValue((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(252)?"":"RawMessageDelivery"), out var rawMessageDelivery) &&
            bool.TryParse(rawMessageDelivery, out var isRawMessageDelivery) &&
            isRawMessageDelivery;
        
        var parsedFilterPolicy =
            request.Attributes.TryGetValue((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(255)?"":"FilterPolicy"), out var filterPolicy) ? filterPolicy : (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(256)?"Stryker was here!":string.Empty);
        
        var snsSubscription = new SnsSubscription
        {
            SubscriptionArn = Guid.NewGuid().ToString(),
            TopicArn = request.TopicArn,
            EndPoint = request.Endpoint,
            Protocol = request.Protocol,
            Raw = parsedRawMessageDelivery,
            FilterPolicy = parsedFilterPolicy
        };
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(258)){;}else{        _bus.Subscriptions.TryAdd(snsSubscription.SubscriptionArn, snsSubscription);
}if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(259)){;}else{        
        SnsPublishActionFactory.UpdateTopicPublishAction(snsSubscription.TopicArn, _bus);
}
        return Task.FromResult((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(260)?new SubscribeResponse
{}:new SubscribeResponse
        {
            SubscriptionArn = snsSubscription.SubscriptionArn
        }).SetCommonProperties());
    }
}return default(Task<SubscribeResponse>);}
    public Task<TagResourceResponse> TagResourceAsync(TagResourceRequest request,
        CancellationToken cancellationToken = default)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(261)){}else{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(263))    {
        ArgumentNullException.ThrowIfNull(request);
        
        var topicName = GetTopicNameByArn(request.ResourceArn);
        if (_bus.Topics.TryGetValue(topicName, out var topic))
        {
            throw new ResourceNotFoundException("Topic not found.");
        }
        
        foreach (var tag in request.Tags)
        {
            topic.Tags[tag.Key] = tag.Value;
        }
        
        return Task.FromResult(new TagResourceResponse().SetCommonProperties());
    }
else    {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(262)){;}else{        ArgumentNullException.ThrowIfNull(request);
}        
        var topicName = GetTopicNameByArn(request.ResourceArn);
        if (!_bus.Topics.TryGetValue(topicName, out var topic))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(264)){}else        {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(265)){;}else{            throw new ResourceNotFoundException((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(266)?"":"Topic not found."));
}        }
}        
        foreach (var tag in request.Tags)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(267)){}else        {
            topic.Tags[tag.Key] = tag.Value;
        }
}        
        return Task.FromResult(new TagResourceResponse().SetCommonProperties());
    }
}return default(Task<TagResourceResponse>);}
    public Task<UnsubscribeResponse> UnsubscribeAsync(string subscriptionArn,
        CancellationToken cancellationToken = default)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(268)){}else    {
        return UnsubscribeAsync((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(269)?new UnsubscribeRequest {}:new UnsubscribeRequest { SubscriptionArn = subscriptionArn }), cancellationToken);
    }
return default(Task<UnsubscribeResponse>);}
    public Task<UnsubscribeResponse> UnsubscribeAsync(UnsubscribeRequest request,
        CancellationToken cancellationToken = default)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(270)){}else{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(272))    {
        ArgumentNullException.ThrowIfNull(request);
        
        if (_bus.Subscriptions.TryRemove(request.SubscriptionArn, out var subscription))
        {
            throw new NotFoundException("Subscription not found.");
        }
        
        SnsPublishActionFactory.UpdateTopicPublishAction(subscription.TopicArn, _bus);
        
        return Task.FromResult(new UnsubscribeResponse().SetCommonProperties());
    }
else    {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(271)){;}else{        ArgumentNullException.ThrowIfNull(request);
}        
        if (!_bus.Subscriptions.TryRemove(request.SubscriptionArn, out var subscription))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(273)){}else        {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(274)){;}else{            throw new NotFoundException((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(275)?"":"Subscription not found."));
}        }
}if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(276)){;}else{        
        SnsPublishActionFactory.UpdateTopicPublishAction(subscription.TopicArn, _bus);
}        
        return Task.FromResult(new UnsubscribeResponse().SetCommonProperties());
    }
}return default(Task<UnsubscribeResponse>);}
    public Task<UntagResourceResponse> UntagResourceAsync(UntagResourceRequest request,
        CancellationToken cancellationToken = default)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(277)){}else{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(279))    {
        ArgumentNullException.ThrowIfNull(request);
        
        var topicName = GetTopicNameByArn(request.ResourceArn);
        if (_bus.Topics.TryGetValue(topicName, out var topic))
        {
            throw new ResourceNotFoundException("Topic not found.");
        }
        
        foreach (var tagKey in request.TagKeys)
        {
            topic.Tags.Remove(tagKey);
        }
        
        return Task.FromResult(new UntagResourceResponse().SetCommonProperties());
    }
else    {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(278)){;}else{        ArgumentNullException.ThrowIfNull(request);
}        
        var topicName = GetTopicNameByArn(request.ResourceArn);
        if (!_bus.Topics.TryGetValue(topicName, out var topic))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(280)){}else        {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(281)){;}else{            throw new ResourceNotFoundException((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(282)?"":"Topic not found."));
}        }
}        
        foreach (var tagKey in request.TagKeys)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(283)){}else        {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(284)){;}else{            topic.Tags.Remove(tagKey);
}        }
}        
        return Task.FromResult(new UntagResourceResponse().SetCommonProperties());
    }
}return default(Task<UntagResourceResponse>);}
    private static void AddSqsPermission(Policy policy, string topicArn, string sqsQueueArn)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(285)){}else    {
        var statement = new Statement(Statement.StatementEffect.Allow);
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(286)){;}else{#pragma warning disable CS0612,CS0618
        statement.Actions.Add(SQSActionIdentifiers.SendMessage);
}if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(287)){;}else{#pragma warning restore CS0612,CS0618
        statement.Resources.Add(new Resource(sqsQueueArn));
}if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(288)){;}else{        statement.Conditions.Add(ConditionFactory.NewSourceArnCondition(topicArn));
}if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(289)){;}else{        statement.Principals.Add(new Principal((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(290)?"":"*")));
}if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(291)){;}else{        policy.Statements.Add(statement);
}    }
}    
    private static bool HasSqsPermission(Policy policy, string topicArn, string sqsQueueArn)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(292)){}else    {
        foreach (var statement in policy.Statements)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(293)){}else        {
            // See if the statement contains the topic as a resource
            var containsResource = (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(294)?statement.Resources.All(resource => resource.Id.Equals(sqsQueueArn, StringComparison.OrdinalIgnoreCase)):statement.Resources.Any(resource => resource.Id.Equals(sqsQueueArn, StringComparison.OrdinalIgnoreCase)));

            // If queue found as the resource see if the condition is for this topic
            if ((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(295)?!(containsResource):containsResource))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(296)){}else            {
                foreach (var condition in statement.Conditions)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(297)){}else                {
                    if ((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(299)?!((string.Equals(condition.Type, ConditionFactory.StringComparisonType.StringLike.ToString(), StringComparison.OrdinalIgnoreCase) ||
                         string.Equals(condition.Type, ConditionFactory.StringComparisonType.StringEquals.ToString(), StringComparison.OrdinalIgnoreCase) ||
                         string.Equals(condition.Type, ConditionFactory.ArnComparisonType.ArnEquals.ToString(), StringComparison.OrdinalIgnoreCase) ||
                         string.Equals(condition.Type, ConditionFactory.ArnComparisonType.ArnLike.ToString(), StringComparison.OrdinalIgnoreCase)) &&
                        string.Equals(condition.ConditionKey, ConditionFactory.SOURCE_ARN_CONDITION_KEY, StringComparison.OrdinalIgnoreCase) &&
                        condition.Values.Contains<string>(topicArn)):(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(298)?(string.Equals(condition.Type, ConditionFactory.StringComparisonType.StringLike.ToString(), StringComparison.OrdinalIgnoreCase) ||
                         string.Equals(condition.Type, ConditionFactory.StringComparisonType.StringEquals.ToString(), StringComparison.OrdinalIgnoreCase) ||
                         string.Equals(condition.Type, ConditionFactory.ArnComparisonType.ArnEquals.ToString(), StringComparison.OrdinalIgnoreCase) ||
                         string.Equals(condition.Type, ConditionFactory.ArnComparisonType.ArnLike.ToString(), StringComparison.OrdinalIgnoreCase)) &&
                        string.Equals(condition.ConditionKey, ConditionFactory.SOURCE_ARN_CONDITION_KEY, StringComparison.OrdinalIgnoreCase) ||
                        condition.Values.Contains<string>(topicArn):(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(300)?(string.Equals(condition.Type, ConditionFactory.StringComparisonType.StringLike.ToString(), StringComparison.OrdinalIgnoreCase) ||
                         string.Equals(condition.Type, ConditionFactory.StringComparisonType.StringEquals.ToString(), StringComparison.OrdinalIgnoreCase) ||
                         string.Equals(condition.Type, ConditionFactory.ArnComparisonType.ArnEquals.ToString(), StringComparison.OrdinalIgnoreCase) ||
                         string.Equals(condition.Type, ConditionFactory.ArnComparisonType.ArnLike.ToString(), StringComparison.OrdinalIgnoreCase)) ||
                        string.Equals(condition.ConditionKey, ConditionFactory.SOURCE_ARN_CONDITION_KEY, StringComparison.OrdinalIgnoreCase) :((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(301)?string.Equals(condition.Type, ConditionFactory.StringComparisonType.StringLike.ToString(), StringComparison.OrdinalIgnoreCase) ||
                         string.Equals(condition.Type, ConditionFactory.StringComparisonType.StringEquals.ToString(), StringComparison.OrdinalIgnoreCase) ||
                         string.Equals(condition.Type, ConditionFactory.ArnComparisonType.ArnEquals.ToString(), StringComparison.OrdinalIgnoreCase) &&
                         string.Equals(condition.Type, ConditionFactory.ArnComparisonType.ArnLike.ToString(), StringComparison.OrdinalIgnoreCase):(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(302)?string.Equals(condition.Type, ConditionFactory.StringComparisonType.StringLike.ToString(), StringComparison.OrdinalIgnoreCase) ||
                         string.Equals(condition.Type, ConditionFactory.StringComparisonType.StringEquals.ToString(), StringComparison.OrdinalIgnoreCase) &&
                         string.Equals(condition.Type, ConditionFactory.ArnComparisonType.ArnEquals.ToString(), StringComparison.OrdinalIgnoreCase) :(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(303)?string.Equals(condition.Type, ConditionFactory.StringComparisonType.StringLike.ToString(), StringComparison.OrdinalIgnoreCase) &&
                         string.Equals(condition.Type, ConditionFactory.StringComparisonType.StringEquals.ToString(), StringComparison.OrdinalIgnoreCase) :string.Equals(condition.Type, ConditionFactory.StringComparisonType.StringLike.ToString(), StringComparison.OrdinalIgnoreCase) ||
                         string.Equals(condition.Type, ConditionFactory.StringComparisonType.StringEquals.ToString(), StringComparison.OrdinalIgnoreCase) )||
                         string.Equals(condition.Type, ConditionFactory.ArnComparisonType.ArnEquals.ToString(), StringComparison.OrdinalIgnoreCase) )||
                         string.Equals(condition.Type, ConditionFactory.ArnComparisonType.ArnLike.ToString(), StringComparison.OrdinalIgnoreCase))) &&
                        string.Equals(condition.ConditionKey, ConditionFactory.SOURCE_ARN_CONDITION_KEY, StringComparison.OrdinalIgnoreCase) )&&
                        condition.Values.Contains<string>(topicArn))))
                        return (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(304)?false:true);
                }
}            }
}        }
}
        return (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(305)?true:false);
    }
return default(bool);}    
    private SnsTopicResource GetTopicByArn(string topicArn)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(306)){}else{    {
        var topicName = GetTopicNameByArn(topicArn);
        return _bus.Topics.TryGetValue(topicName, out var topic)
            ? topic
            : throw new NotFoundException((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(309)?$"":$"Topic not found: {topicArn}"));
    }
}return default(SnsTopicResource);}    
    private static string GetTopicNameByArn(string topicArn)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(310)){}else    {
        var indexOfLastColon = topicArn.LastIndexOf(':');
        if ((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(311)?indexOfLastColon != -1:indexOfLastColon == (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(312)?+1:-1)))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(313)){}else        {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(314)){;}else{            throw new ArgumentException((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(315)?"":"ARN malformed"), nameof(topicArn));
}        }
}        return topicArn[((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(316)?indexOfLastColon-1:indexOfLastColon+1)) ..];
    }
return default(string);}
    public Task<AddPermissionResponse> AddPermissionAsync(string topicArn, string label,
        List<string> awsAccountId, List<string> actionName, CancellationToken cancellationToken = default)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(317)){}else    {
        return AddPermissionAsync((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(318)?new AddPermissionRequest
{}:new AddPermissionRequest
        {
            TopicArn = topicArn,
            Label = label,
            AWSAccountId = awsAccountId,
            ActionName = actionName
        }), cancellationToken);
    }
return default(Task<AddPermissionResponse>);}    
    public Task<AddPermissionResponse> AddPermissionAsync(AddPermissionRequest request, CancellationToken cancellationToken = default)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(319)){}else{    {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(320)){;}else{        ArgumentNullException.ThrowIfNull(request);
}        
        var topic = GetTopicByArn(request.TopicArn);
        
        var policy = topic.Attributes.TryGetValue((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(323)?"":"Policy"), out var policyJson)
            ? Policy.FromJson(policyJson)
            : new Policy((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(324)?$"":$"{topic.Arn}/SNSDefaultPolicy"));

        var statement = (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(325)?new Statement(Statement.StatementEffect.Allow)
{}:new Statement(Statement.StatementEffect.Allow)
        {
            Id = request.Label,
            Actions = request.ActionName.Select(action => new ActionIdentifier((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(326)?$"":$"SNS:{action}"))).ToList()
        });
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(327)){;}else{
        statement.Resources.Add(new Resource(topic.Arn));
}        
        foreach (var accountId in request.AWSAccountId)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(328)){}else        {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(329)){;}else{            statement.Principals.Add(new Principal((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(330)?$"":$"arn:aws:iam::{accountId}:root")));
}        }
}
        if ((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(331)?!(policy.CheckIfStatementExists(statement)):policy.CheckIfStatementExists(statement)))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(332)){}else        {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(333)){;}else{            throw new ArgumentException((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(334)?$"":$"Value {request.Label} for parameter Label is invalid. Reason: Already exists."));
}        }
}if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(335)){;}else{
        policy.Statements.Add(statement);
}        topic.Attributes[(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(336)?"":"Policy")] = policy.ToJson();

        return Task.FromResult(new AddPermissionResponse().SetCommonProperties());
    }
}return default(Task<AddPermissionResponse>);}
    [UnsafeAccessor(UnsafeAccessorKind.Constructor)]
    private static extern SimpleNotificationServicePaginatorFactory GetPaginatorFactory(IAmazonSimpleNotificationService client); 
    
    public ISimpleNotificationServicePaginatorFactory Paginators => _paginators.Value;
}
[12:29:58 DBG] RollBacking mutations from /Users/stuart.lang/RiderProjects/ConsoleApp9/src/LocalSqsSnsMessaging/SnsPublishAction.cs.
[12:29:58 DBG] Found mutant -1 of type 'null' controlled by 'StaticInitializerMarkerEngine'.
[12:29:58 DBG] Found mutant -1 of type 'null' controlled by 'StaticInitializerMarkerEngine'.
[12:29:58 DBG] Found mutant 409 of type 'Equality' controlled by 'ConditionalInstrumentationEngine'.
[12:29:58 DBG] Found mutant 412 of type 'Linq' controlled by 'ConditionalInstrumentationEngine'.
[12:29:58 VRB] RolledBack to using System.Collections.Concurrent;
using System.Numerics;
using System.Security.Cryptography;
using System.Text;
using System.Text.Json.Nodes;
using Amazon.SimpleNotificationService.Model;
using Amazon.SQS;
using Amazon.SQS.Model;
using MessageAttributeValue = Amazon.SimpleNotificationService.Model.MessageAttributeValue;
using SnsBatchResultErrorEntry = Amazon.SimpleNotificationService.Model.BatchResultErrorEntry;
using SqsMessageAttributeValue = Amazon.SQS.Model.MessageAttributeValue;

namespace LocalSqsSnsMessaging;

internal sealed class SnsPublishAction
{
    internal static SnsPublishAction NullInstance { get; } = new([], null!);
    
    private readonly List<(SnsSubscription Subscription, SqsQueueResource Queue)> _subscriptionsAndQueues;
    private readonly TimeProvider _timeProvider;
    private static Int128 _sequenceNumber = StrykerJDagWlyLhuvvoy5.MutantContext.TrackValue(()=>CreateSequenceNumber());
    private static SpinLock _sequenceSpinLock = new((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(337)?true:false));

    private static Int128 CreateSequenceNumber()
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(338)){}else    {
        var bytes = RandomNumberGenerator.GetBytes(16);
        var randomBigInt = new BigInteger(bytes);
        var twentyDigitBigInt = BigInteger.Abs((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(339)?randomBigInt * BigInteger.Pow(10, 20):randomBigInt % BigInteger.Pow(10, 20)));
        return (Int128)twentyDigitBigInt;
    }
return default(Int128);}    
    public SnsPublishAction(List<(SnsSubscription Subscription, SqsQueueResource Queue)> subscriptionsAndQueues, TimeProvider timeProvider)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(340)){}else    {
        _subscriptionsAndQueues = subscriptionsAndQueues;
        _timeProvider = timeProvider;
    }
}
    public PublishResponse Execute(PublishRequest request)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(341)){}else    {
        var messageId = Guid.NewGuid().ToString();
        
        foreach (var (subscription, queue) in _subscriptionsAndQueues)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(342)){}else        {
            var sqsMessage = CreateSqsMessage(request, messageId, subscription);
            if ((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(343)?!(queue.IsFifo):queue.IsFifo))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(344)){}else            {
                sqsMessage.Attributes[(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(345)?"":"MessageGroupId")] = request.MessageGroupId;
                sqsMessage.Attributes[(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(346)?"":"SequenceNumber")] = GetNextSequenceNumber().ToString(NumberFormatInfo.InvariantInfo);
                sqsMessage.Attributes[(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(347)?"":"SentTimestamp")] = _timeProvider.GetUtcNow().ToUnixTimeMilliseconds().ToString(NumberFormatInfo.InvariantInfo);
                
                string deduplicationId = request.MessageDeduplicationId;
                if ((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(350)?!(string.IsNullOrEmpty(deduplicationId)):(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(349)?(deduplicationId!=""):(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(348)?(deduplicationId!=null):string.IsNullOrEmpty(deduplicationId)))))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(351)){}else                {
                    // Generate a deduplication ID based on the message body
                    deduplicationId = GenerateMessageBodyHash(sqsMessage.Body);
                }
}
                sqsMessage.Attributes[MessageSystemAttributeName.MessageDeduplicationId] = deduplicationId;

                if ((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(352)?!(queue.DeduplicationIds.TryAdd(deduplicationId, sqsMessage.MessageId)):queue.DeduplicationIds.TryAdd(deduplicationId, sqsMessage.MessageId)))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(353)){}else                {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(354)){;}else{                    EnqueueFifoMessage(queue, request.MessageGroupId, sqsMessage);
}                }
}            }
}            else
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(355)){}else            {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(356)){;}else{                queue.Messages.Writer.TryWrite(sqsMessage);
}            }
}        }
}
        return (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(357)?new PublishResponse
{}:new PublishResponse
        {
            MessageId = messageId
        }).SetCommonProperties();
    }
return default(PublishResponse);}
    private static void EnqueueFifoMessage(SqsQueueResource queue, string messageGroupId, Message sqsMessage)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(358)){}else    {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(359)){;}else{        queue.MessageGroups.AddOrUpdate(messageGroupId, 
            _ => new ConcurrentQueue<Message>([sqsMessage]), 
            (_, existingQueue) =>
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(360)){}else            {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(361)){;}else{                existingQueue.Enqueue(sqsMessage);
}                return existingQueue;
            }return default;});
}    }
}
    public PublishBatchResponse ExecuteBatch(PublishBatchRequest request)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(362)){}else    {
        var response = (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(363)?new PublishBatchResponse
{}:new PublishBatchResponse
        {
            Successful = [],
            Failed = []
        });
        
        foreach (var entry in request.PublishBatchRequestEntries)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(364)){}else        {
            try
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(365)){}else            {
                var messageId = Guid.NewGuid().ToString();
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(366)){;}else{                PublishSingleMessage(entry, request.TopicArn, messageId);
}                response.Successful.Add((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(367)?new PublishBatchResultEntry
{}:new PublishBatchResultEntry
                {
                    Id = entry.Id,
                    MessageId = messageId
                }));
            }
}#pragma warning disable CA1031
            catch (Exception ex)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(368)){}else#pragma warning restore CA1031
            {
                response.Failed.Add((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(369)?new SnsBatchResultErrorEntry
{}:new SnsBatchResultErrorEntry
                {
                    Id = entry.Id,
                    Code = (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(370)?"":"InternalError"),
                    Message = ex.Message,
                    SenderFault = (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(371)?true:false
)                }));
            }
}        }
}        
        return response.SetCommonProperties();
    }
return default(PublishBatchResponse);}    
    private void PublishSingleMessage(PublishBatchRequestEntry entry, string topicArn, string messageId)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(372)){}else    {
        foreach (var (subscription, queue) in _subscriptionsAndQueues)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(373)){}else        {
            var sqsMessage = CreateSqsMessage(entry, topicArn, messageId, subscription);
            
            if ((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(374)?queue.Messages.Writer.TryWrite(sqsMessage):!queue.Messages.Writer.TryWrite(sqsMessage)))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(375)){}else            {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(376)){;}else{                throw new InvalidOperationException((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(377)?"":"Failed to write message to queue."));
}            }
}        }
}    }
}
    private Message CreateSqsMessage(PublishRequest request, string messageId, SnsSubscription subscription)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(378)){}else    {
        var message = (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(380)?(false?CreateRawSqsMessage(request.Message, request.MessageAttributes)
:CreateFormattedSqsMessage(request, messageId)):(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(379)?(true?CreateRawSqsMessage(request.Message, request.MessageAttributes)
:CreateFormattedSqsMessage(request, messageId)):subscription.Raw
            ? CreateRawSqsMessage(request.Message, request.MessageAttributes)
            : CreateFormattedSqsMessage(request, messageId)));

#pragma warning disable CA5351
        var hash = MD5.HashData(Encoding.UTF8.GetBytes(message.Body));
#pragma warning restore CA5351
#pragma warning disable CA1308
        message.MD5OfBody = Convert.ToHexString(hash).ToLowerInvariant();
#pragma warning restore CA1308
        
        return message;
    }
return default(Message);}    
    private Message CreateSqsMessage(PublishBatchRequestEntry entry, string topicArn, string messageId, SnsSubscription subscription)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(381)){}else    {
        var message = (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(383)?(false?CreateRawSqsMessage(entry.Message, entry.MessageAttributes)
:CreateFormattedSqsMessage(entry, topicArn, messageId)):(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(382)?(true?CreateRawSqsMessage(entry.Message, entry.MessageAttributes)
:CreateFormattedSqsMessage(entry, topicArn, messageId)):subscription.Raw
            ? CreateRawSqsMessage(entry.Message, entry.MessageAttributes)
            : CreateFormattedSqsMessage(entry, topicArn, messageId)));

#pragma warning disable CA5351
        var hash = MD5.HashData(Encoding.UTF8.GetBytes(message.Body));
#pragma warning restore CA5351
#pragma warning disable CA1308
        message.MD5OfBody = Convert.ToHexString(hash).ToLowerInvariant();
#pragma warning restore CA1308
        
        return message;
    }
return default(Message);}
    private static Message CreateRawSqsMessage(string message, Dictionary<string, MessageAttributeValue> attributes)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(384)){}else    {
        return (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(385)?new Message
{}:new Message
        {
            Body = message,
            MessageAttributes = attributes.ToDictionary(
                kvp => kvp.Key,
                kvp => (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(386)?new SqsMessageAttributeValue
{}:new SqsMessageAttributeValue
                {
                    DataType = kvp.Value.DataType,
                    StringValue = kvp.Value.StringValue,
                    BinaryValue = kvp.Value.BinaryValue
                }))
        });
    }
return default(Message);}
    private Message CreateFormattedSqsMessage(PublishRequest request, string messageId)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(387)){}else    {
        var snsMessage = CreateSnsMessage(messageId, request.TopicArn, request.Subject, request.Message, request.MessageAttributes);
        return CreateFormattedMessage(snsMessage, request.TopicArn);
    }
return default(Message);}
    private Message CreateFormattedSqsMessage(PublishBatchRequestEntry entry, string topicArn, string messageId)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(388)){}else    {
        var snsMessage = CreateSnsMessage(messageId, topicArn, entry.Subject, entry.Message, entry.MessageAttributes);
        return CreateFormattedMessage(snsMessage, topicArn);
    }
return default(Message);}
    private JsonObject CreateSnsMessage(string messageId, string topicArn, string? subject, string message, Dictionary<string, MessageAttributeValue> attributes)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(389)){}else    {
        var snsMessage = (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(390)?new JsonObject
{}:new JsonObject
        {
            [(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(391)?"":"Type")] = (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(392)?"":"Notification"),
            [(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(393)?"":"MessageId")] = messageId,
            [(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(394)?"":"TopicArn")] = topicArn,
            [(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(395)?"":"Message")] = message,
            [(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(396)?"":"Timestamp")] = _timeProvider.GetUtcNow().ToString((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(397)?"":"yyyy-MM-ddTHH:mm:ss.fffZ"), DateTimeFormatInfo.InvariantInfo),
            [(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(398)?"":"SignatureVersion")] = (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(399)?"":"1"),
            [(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(400)?"":"Signature")] = (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(401)?"":"EXAMPLE"),
            [(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(402)?"":"SigningCertURL")] = (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(403)?"":"EXAMPLE"),
            [(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(404)?"":"UnsubscribeURL")] = (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(405)?"":"EXAMPLE"
)        });

        if ((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(406)?subject is null:subject is not null))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(407)){}else        {
            snsMessage[(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(408)?"":"Subject")] = subject;
        }
}
        if ((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(411)?!(attributes.Count > 0):(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(410)?attributes.Count >= 0:attributes.Count > 0)))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(413)){}else        {
            var messageAttributes = new JsonObject();
            foreach (var (key, value) in attributes)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(414)){}else            {
                messageAttributes[key] = (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(415)?new JsonObject
{}:new JsonObject
                {
                    [(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(416)?"":"Type")] = value.DataType,
                    [(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(417)?"":"Value")] = (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(418)?Convert.ToBase64String(value.BinaryValue.ToArray())
:value.StringValue ?? Convert.ToBase64String(value.BinaryValue.ToArray())
)                });
            }
}            snsMessage[(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(419)?"":"MessageAttributes")] = messageAttributes;
        }
}
        return snsMessage;
    }
return default(JsonObject);}
    private static Message CreateFormattedMessage(JsonNode snsMessage, string topicArn)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(420)){}else    {
        return (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(421)?new Message
{}:new Message
        {
            Body = snsMessage.ToJsonString(),
            MessageAttributes = (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(422)?new Dictionary<string, SqsMessageAttributeValue>
{}:new Dictionary<string, SqsMessageAttributeValue>
            {
                [(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(423)?"":"TopicArn")] = new()
                {
                    DataType = (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(424)?"":"String"),
                    StringValue = topicArn
                }
            }
)        });
    }
return default(Message);}    
    private static string GenerateMessageBodyHash(string messageBody)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(425)){}else    {
        var hashBytes = SHA256.HashData(Encoding.UTF8.GetBytes(messageBody));
        return Convert.ToBase64String(hashBytes);
    }
return default(string);}    
    private static Int128 GetNextSequenceNumber()
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(426)){}else    {
        var lockTaken = (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(427)?true:false);
        try
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(428)){}else        {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(429)){;}else{            _sequenceSpinLock.Enter(ref lockTaken);
}            return (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(430)?--_sequenceNumber:++_sequenceNumber);
        }
}        finally
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(431)){}else        {
            if ((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(432)?!(lockTaken):lockTaken)) if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(433)){;}else{_sequenceSpinLock.Exit();
}        }
}    }
return default(Int128);}}
[12:29:58 DBG] RollBacking mutations from /Users/stuart.lang/RiderProjects/ConsoleApp9/src/LocalSqsSnsMessaging/SqsClient/InMemorySqsClient.cs.
[12:29:58 DBG] Found mutant -1 of type 'null' controlled by 'StaticInitializerMarkerEngine'.
[12:29:58 DBG] Found mutant 493 of type 'Conditional' controlled by 'IfInstrumentationEngine'.
[12:29:58 DBG] Found mutant 492 of type 'Conditional' controlled by 'IfInstrumentationEngine'.
[12:29:58 DBG] Found mutant 494 of type 'Initializer' controlled by 'ConditionalInstrumentationEngine'.
[12:29:58 DBG] Found mutant 494 of type 'Initializer' controlled by 'ConditionalInstrumentationEngine'.
[12:29:58 DBG] Found mutant 494 of type 'Initializer' controlled by 'ConditionalInstrumentationEngine'.
[12:29:58 DBG] Found mutant 494 of type 'Initializer' controlled by 'ConditionalInstrumentationEngine'.
[12:29:58 DBG] Found mutant 557 of type 'Equality' controlled by 'ConditionalInstrumentationEngine'.
[12:29:58 DBG] Found mutant 559 of type 'Linq' controlled by 'ConditionalInstrumentationEngine'.
[12:29:58 DBG] Found mutant 573 of type 'Equality' controlled by 'ConditionalInstrumentationEngine'.
[12:29:58 DBG] Found mutant 576 of type 'Linq' controlled by 'ConditionalInstrumentationEngine'.
[12:29:58 DBG] Found mutant 589 of type 'Equality' controlled by 'ConditionalInstrumentationEngine'.
[12:29:58 DBG] Found mutant 592 of type 'Linq' controlled by 'ConditionalInstrumentationEngine'.
[12:29:58 DBG] Found mutant 598 of type 'Equality' controlled by 'ConditionalInstrumentationEngine'.
[12:29:58 DBG] Found mutant 601 of type 'Linq' controlled by 'ConditionalInstrumentationEngine'.
[12:29:58 DBG] Found mutant 622 of type 'Equality' controlled by 'ConditionalInstrumentationEngine'.
[12:29:58 DBG] Found mutant 623 of type 'Linq' controlled by 'ConditionalInstrumentationEngine'.
[12:29:58 DBG] Found mutant 768 of type 'Equality' controlled by 'ConditionalInstrumentationEngine'.
[12:29:58 DBG] Found mutant 769 of type 'Linq' controlled by 'ConditionalInstrumentationEngine'.
[12:29:58 DBG] Found mutant 792 of type 'Linq' controlled by 'ConditionalInstrumentationEngine'.
[12:29:58 DBG] Found mutant 793 of type 'Linq' controlled by 'ConditionalInstrumentationEngine'.
[12:29:58 DBG] Found mutant 798 of type 'Linq' controlled by 'ConditionalInstrumentationEngine'.
[12:29:58 DBG] Found mutant 801 of type 'Linq' controlled by 'ConditionalInstrumentationEngine'.
[12:29:58 DBG] Found mutant 872 of type 'Conditional' controlled by 'IfInstrumentationEngine'.
[12:29:58 DBG] Found mutant 871 of type 'Conditional' controlled by 'IfInstrumentationEngine'.
[12:29:58 DBG] Found mutant 883 of type 'Linq' controlled by 'ConditionalInstrumentationEngine'.
[12:29:58 DBG] Found mutant 971 of type 'Initializer' controlled by 'ConditionalInstrumentationEngine'.
[12:29:58 DBG] Found mutant 971 of type 'Initializer' controlled by 'ConditionalInstrumentationEngine'.
[12:29:58 DBG] Found mutant 971 of type 'Initializer' controlled by 'ConditionalInstrumentationEngine'.
[12:29:58 DBG] Found mutant 971 of type 'Initializer' controlled by 'ConditionalInstrumentationEngine'.
[12:29:58 DBG] Found mutant 1000 of type 'Conditional' controlled by 'IfInstrumentationEngine'.
[12:29:58 DBG] Found mutant 999 of type 'Conditional' controlled by 'IfInstrumentationEngine'.
[12:29:58 VRB] RolledBack to using System.Collections.Concurrent;
using System.Net;
using System.Runtime.CompilerServices;
using System.Security.Cryptography;
using System.Text;
using System.Text.Json;
using Amazon.Auth.AccessControlPolicy;
using Amazon.Runtime;
using Amazon.SQS;
using Amazon.SQS.Model;
using BatchResultErrorEntry = Amazon.SQS.Model.BatchResultErrorEntry;
using MessageAttributeValue = Amazon.SQS.Model.MessageAttributeValue;
using RemovePermissionRequest = Amazon.SQS.Model.RemovePermissionRequest;
using RemovePermissionResponse = Amazon.SQS.Model.RemovePermissionResponse;
using ResourceNotFoundException = Amazon.SQS.Model.ResourceNotFoundException;

namespace LocalSqsSnsMessaging;

/// <summary>
/// Represents an in-memory implementation of Amazon Simple Queue Service (SQS) client.
/// This class provides methods to interact with SQS queues in a local, in-memory environment,
/// primarily for testing and development purposes without connecting to actual AWS services.
/// It implements the IAmazonSQS interface to maintain compatibility with the AWS SDK.
/// </summary>
public sealed partial class InMemorySqsClient : IAmazonSQS
{
    private readonly InMemoryAwsBus _bus;
    private readonly Lazy<ISQSPaginatorFactory> _paginators;

    private const int MaxMessageSize = 262144;
    private static readonly string[] InternalAttributes = [
        QueueAttributeName.ApproximateNumberOfMessages,
        QueueAttributeName.ApproximateNumberOfMessagesDelayed,
        QueueAttributeName.ApproximateNumberOfMessagesNotVisible,
        QueueAttributeName.CreatedTimestamp,
        QueueAttributeName.LastModifiedTimestamp,
        QueueAttributeName.QueueArn
    ];
    
    internal InMemorySqsClient(InMemoryAwsBus bus)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(444)){}else    {
        _bus = bus;
        _paginators = new(() => GetPaginatorFactory(this));
    }
}
#pragma warning disable CA1063
    void IDisposable.Dispose()
#pragma warning restore CA1063
    {
    }

    IClientConfig? IAmazonService.Config => null;

    public Task<Dictionary<string, string>> GetAttributesAsync(string queueUrl)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(445)){}else{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(447))    {
        ArgumentNullException.ThrowIfNull(queueUrl);
        
        var queueName = GetQueueNameFromUrl(queueUrl);
        if (!(_bus.Queues.TryGetValue(queueName, out var queue)))
        {
            return Task.FromResult(queue.Attributes);
        }

        throw new QueueDoesNotExistException($"Queue {queueUrl} does not exist.");
    }
else    {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(446)){;}else{        ArgumentNullException.ThrowIfNull(queueUrl);
}        
        var queueName = GetQueueNameFromUrl(queueUrl);
        if (_bus.Queues.TryGetValue(queueName, out var queue))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(448)){}else        {
            return Task.FromResult(queue.Attributes);
        }
}if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(449)){;}else{
        throw new QueueDoesNotExistException((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(450)?$"":$"Queue {queueUrl} does not exist."));
}    }
}return default(Task<Dictionary<string, string>>);}
    public Task SetAttributesAsync(string queueUrl, Dictionary<string, string> attributes)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(451)){}else{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(454))    {
        ArgumentNullException.ThrowIfNull(queueUrl);
        ArgumentNullException.ThrowIfNull(attributes);
        
        var queueName = GetQueueNameFromUrl(queueUrl);
        if (_bus.Queues.TryGetValue(queueName, out var queue))
        {
            throw new QueueDoesNotExistException($"Queue {queueName} does not exist.");
        }

        foreach (var (key, value) in attributes)
        {
            if (InternalAttributes.Contains(key))
            {
                throw new InvalidOperationException($"Cannot set internal attribute {key}");
            }
            
            queue.Attributes[key] = value;
        }

        return Task.CompletedTask;
    }
else    {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(452)){;}else{        ArgumentNullException.ThrowIfNull(queueUrl);
}if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(453)){;}else{        ArgumentNullException.ThrowIfNull(attributes);
}        
        var queueName = GetQueueNameFromUrl(queueUrl);
        if (!_bus.Queues.TryGetValue(queueName, out var queue))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(455)){}else        {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(456)){;}else{            throw new QueueDoesNotExistException((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(457)?$"":$"Queue {queueName} does not exist."));
}        }
}
        foreach (var (key, value) in attributes)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(458)){}else        {
            if ((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(459)?!(InternalAttributes.Contains(key)):InternalAttributes.Contains(key)))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(460)){}else            {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(461)){;}else{                throw new InvalidOperationException((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(462)?$"":$"Cannot set internal attribute {key}"));
}            }
}            
            queue.Attributes[key] = value;
        }
}
        return Task.CompletedTask;
    }
}return default(Task);}
    public Task<ChangeMessageVisibilityResponse> ChangeMessageVisibilityAsync(ChangeMessageVisibilityRequest request,
        CancellationToken cancellationToken = default)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(463)){}else{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(473))    {
        ArgumentNullException.ThrowIfNull(request);
        
        var queueName = GetQueueNameFromUrl(request.QueueUrl);
        if (!_bus.Queues.TryGetValue(queueName, out var queue))
        {
            throw new QueueDoesNotExistException($"Queue {request.QueueUrl} does not exist.");
        }
        
        if (!IsReceiptHandleValid(request.ReceiptHandle, queue.Arn))
        {
            throw new ReceiptHandleIsInvalidException($"Receipt handle {request.ReceiptHandle} is invalid.");
        }
        
        if (!(queue.InFlightMessages.TryGetValue(request.ReceiptHandle, out var message)))
        {
            var (_, inFlightExpireCallback) = message;
            inFlightExpireCallback.UpdateTimeout(TimeSpan.FromSeconds(request.VisibilityTimeout));
            return Task.FromResult(new ChangeMessageVisibilityResponse().SetCommonProperties());
        }

        // If message is in-flight, it should be updated by the expiration handler
        return Task.FromResult(new ChangeMessageVisibilityResponse().SetCommonProperties());
    }
else{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(465))    {
        ArgumentNullException.ThrowIfNull(request);
        
        var queueName = GetQueueNameFromUrl(request.QueueUrl);
        if (_bus.Queues.TryGetValue(queueName, out var queue))
        {
            throw new QueueDoesNotExistException($"Queue {request.QueueUrl} does not exist.");
        }
        
        if (!IsReceiptHandleValid(request.ReceiptHandle, queue.Arn))
        {
            throw new ReceiptHandleIsInvalidException($"Receipt handle {request.ReceiptHandle} is invalid.");
        }
        
        if (queue.InFlightMessages.TryGetValue(request.ReceiptHandle, out var message))
        {
            var (_, inFlightExpireCallback) = message;
            inFlightExpireCallback.UpdateTimeout(TimeSpan.FromSeconds(request.VisibilityTimeout));
            return Task.FromResult(new ChangeMessageVisibilityResponse().SetCommonProperties());
        }

        // If message is in-flight, it should be updated by the expiration handler
        return Task.FromResult(new ChangeMessageVisibilityResponse().SetCommonProperties());
    }
else    {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(464)){;}else{        ArgumentNullException.ThrowIfNull(request);
}        
        var queueName = GetQueueNameFromUrl(request.QueueUrl);
        if (!_bus.Queues.TryGetValue(queueName, out var queue))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(466)){}else        {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(467)){;}else{            throw new QueueDoesNotExistException((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(468)?$"":$"Queue {request.QueueUrl} does not exist."));
}        }
}        
        if ((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(469)?IsReceiptHandleValid(request.ReceiptHandle, queue.Arn):!IsReceiptHandleValid(request.ReceiptHandle, queue.Arn)))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(470)){}else        {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(471)){;}else{            throw new ReceiptHandleIsInvalidException((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(472)?$"":$"Receipt handle {request.ReceiptHandle} is invalid."));
}        }
}        
        if (queue.InFlightMessages.TryGetValue(request.ReceiptHandle, out var message))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(474)){}else        {
            var (_, inFlightExpireCallback) = message;
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(475)){;}else{            inFlightExpireCallback.UpdateTimeout(TimeSpan.FromSeconds(request.VisibilityTimeout));
}            return Task.FromResult(new ChangeMessageVisibilityResponse().SetCommonProperties());
        }
}
        // If message is in-flight, it should be updated by the expiration handler
        return Task.FromResult(new ChangeMessageVisibilityResponse().SetCommonProperties());
    }
}}return default(Task<ChangeMessageVisibilityResponse>);}    
    private static bool IsReceiptHandleValid(string receiptHandle, string queueArn)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(476)){}else{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(483))    {
        var bufferLength = receiptHandle.Length * 3 / 4;
        var buffer = bufferLength <= 1024 ? stackalloc byte[bufferLength] : new byte[bufferLength];
        if (Convert.TryFromBase64String(receiptHandle, buffer, out var written))
        {
            return false;
        }
        var decoded = Encoding.UTF8.GetString(buffer[..written]);
        var parts = decoded.Split(' ');
        return parts switch
        {
            [_, var secondItem, _, _] => secondItem.Equals(queueArn, StringComparison.OrdinalIgnoreCase),
            _ => false
        };
    }
else    {
        var bufferLength = (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(477)?receiptHandle.Length * 3 * 4:(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(478)?receiptHandle.Length / 3 :receiptHandle.Length * 3 )/ 4);
        var buffer = (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(480)?(false?stackalloc byte[bufferLength] :new byte[bufferLength]):(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(479)?(true?stackalloc byte[bufferLength] :new byte[bufferLength]):(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(482)?bufferLength < 1024 :(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(481)?bufferLength > 1024 :bufferLength <= 1024 ))? stackalloc byte[bufferLength] : new byte[bufferLength]));
        if (!Convert.TryFromBase64String(receiptHandle, buffer, out var written))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(484)){}else        {
            return (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(485)?true:false);
        }
}        var decoded = Encoding.UTF8.GetString(buffer[..written]);
        var parts = decoded.Split(' ');
        return parts switch
        {
            [_, var secondItem, _, _] => secondItem.Equals(queueArn, StringComparison.OrdinalIgnoreCase),
            _ => (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(486)?true:false
)        };
    }
}return default(bool);}
    public Task<CreateQueueResponse> CreateQueueAsync(string queueName,
        CancellationToken cancellationToken = default)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(487)){}else    {
        return CreateQueueAsync((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(488)?new CreateQueueRequest
{}:new CreateQueueRequest
        {
            QueueName = queueName,
        }), cancellationToken);
    }
return default(Task<CreateQueueResponse>);}
    public Task<CreateQueueResponse> CreateQueueAsync(CreateQueueRequest request,
        CancellationToken cancellationToken = default)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(489)){}else{    {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(490)){;}else{        ArgumentNullException.ThrowIfNull(request);
}        
        var queueUrl = (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(491)?$"":$"https://sqs.{_bus.CurrentRegion}.amazonaws.com/{_bus.CurrentAccountId}/{request.QueueName}");
        var visibilityTimeoutParsed = request.Attributes.TryGetValue(QueueAttributeName.VisibilityTimeout, out var visibilityTimeout)
            ? TimeSpan.FromSeconds(int.Parse(visibilityTimeout, NumberFormatInfo.InvariantInfo))
            : TimeSpan.FromSeconds(30);

        var queue = new SqsQueueResource
        {
            Name = request.QueueName,
            Region = _bus.CurrentRegion,
            AccountId = _bus.CurrentAccountId,
            Url = queueUrl,
            VisibilityTimeout = visibilityTimeoutParsed
        };
        
        foreach (var requestAttribute in request.Attributes)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(495)){}else        {
            if ((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(496)?!(InternalAttributes.Contains(requestAttribute.Key)):InternalAttributes.Contains(requestAttribute.Key)))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(497)){}else            {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(498)){;}else{                throw new InvalidOperationException((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(499)?$"":$"Cannot set internal attribute {requestAttribute.Key}"));
}            }
}
            queue.Attributes[requestAttribute.Key] = requestAttribute.Value;
        }
}if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(500)){;}else{        queue.Attributes.Add((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(501)?"":"QueueArn"), queue.Arn);
}if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(502)){;}else{        UpdateQueueProperties(queue);
}if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(503)){;}else{        _bus.Queues.TryAdd(request.QueueName, queue);
}
        var response = (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(504)?new CreateQueueResponse
{}:new CreateQueueResponse
        {
            QueueUrl = queueUrl
        });
        
        return Task.FromResult(response.SetCommonProperties());
    }
}return default(Task<CreateQueueResponse>);}
    public Task<DeleteMessageResponse> DeleteMessageAsync(string queueUrl, string receiptHandle,
        CancellationToken cancellationToken = default)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(505)){}else    {
        return DeleteMessageAsync((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(506)?new DeleteMessageRequest
{}:new DeleteMessageRequest
        {
            QueueUrl = queueUrl,
            ReceiptHandle = receiptHandle
        }), cancellationToken);
    }
return default(Task<DeleteMessageResponse>);}
    public Task<DeleteMessageResponse> DeleteMessageAsync(DeleteMessageRequest request,
        CancellationToken cancellationToken = default)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(507)){}else{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(513))    {
        ArgumentNullException.ThrowIfNull(request);
        
        var queueName = GetQueueNameFromUrl(request.QueueUrl);
        if (!_bus.Queues.TryGetValue(queueName, out var queue))
        {
            throw new QueueDoesNotExistException($"Queue {request.QueueUrl} does not exist.");
        }

        if (!(queue.InFlightMessages.Remove(request.ReceiptHandle, out var inFlightInfo)))
        {
            var (message, expirationHandler) = inFlightInfo;
            expirationHandler.Dispose();

            if (queue.IsFifo)
            {
                // Remove the message from the MessageGroups if it's the last one in its group
                if (message.Attributes.TryGetValue("MessageGroupId", out var groupId))
                {
                    if (queue.MessageGroups.TryGetValue(groupId, out var groupQueue) && groupQueue.IsEmpty)
                    {
                        queue.MessageGroups.TryRemove(groupId, out _);
                    }
                }

                // Remove the deduplication ID if it exists
                if (message.Attributes.TryGetValue("MessageDeduplicationId", out var deduplicationId))
                {
                    queue.DeduplicationIds.TryRemove(deduplicationId, out _);
                }
            }

            return Task.FromResult(new DeleteMessageResponse().SetCommonProperties());
        }

        throw new ReceiptHandleIsInvalidException($"Receipt handle {request.ReceiptHandle} is invalid.");
    }
else{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(509))    {
        ArgumentNullException.ThrowIfNull(request);
        
        var queueName = GetQueueNameFromUrl(request.QueueUrl);
        if (_bus.Queues.TryGetValue(queueName, out var queue))
        {
            throw new QueueDoesNotExistException($"Queue {request.QueueUrl} does not exist.");
        }

        if (queue.InFlightMessages.Remove(request.ReceiptHandle, out var inFlightInfo))
        {
            var (message, expirationHandler) = inFlightInfo;
            expirationHandler.Dispose();

            if (queue.IsFifo)
            {
                // Remove the message from the MessageGroups if it's the last one in its group
                if (message.Attributes.TryGetValue("MessageGroupId", out var groupId))
                {
                    if (queue.MessageGroups.TryGetValue(groupId, out var groupQueue) && groupQueue.IsEmpty)
                    {
                        queue.MessageGroups.TryRemove(groupId, out _);
                    }
                }

                // Remove the deduplication ID if it exists
                if (message.Attributes.TryGetValue("MessageDeduplicationId", out var deduplicationId))
                {
                    queue.DeduplicationIds.TryRemove(deduplicationId, out _);
                }
            }

            return Task.FromResult(new DeleteMessageResponse().SetCommonProperties());
        }

        throw new ReceiptHandleIsInvalidException($"Receipt handle {request.ReceiptHandle} is invalid.");
    }
else    {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(508)){;}else{        ArgumentNullException.ThrowIfNull(request);
}        
        var queueName = GetQueueNameFromUrl(request.QueueUrl);
        if (!_bus.Queues.TryGetValue(queueName, out var queue))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(510)){}else        {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(511)){;}else{            throw new QueueDoesNotExistException((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(512)?$"":$"Queue {request.QueueUrl} does not exist."));
}        }
}
        if (queue.InFlightMessages.Remove(request.ReceiptHandle, out var inFlightInfo))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(514)){}else        {
            var (message, expirationHandler) = inFlightInfo;
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(515)){;}else{            expirationHandler.Dispose();
}
            if ((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(516)?!(queue.IsFifo):queue.IsFifo))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(517)){}else{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(524))            {
                // Remove the message from the MessageGroups if it's the last one in its group
                if (message.Attributes.TryGetValue("MessageGroupId", out var groupId))
                {
                    if (queue.MessageGroups.TryGetValue(groupId, out var groupQueue) && groupQueue.IsEmpty)
                    {
                        queue.MessageGroups.TryRemove(groupId, out _);
                    }
                }

                // Remove the deduplication ID if it exists
                if (!(message.Attributes.TryGetValue("MessageDeduplicationId", out var deduplicationId)))
                {
                    queue.DeduplicationIds.TryRemove(deduplicationId, out _);
                }
            }
else{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(518))            {
                // Remove the message from the MessageGroups if it's the last one in its group
                if (!(message.Attributes.TryGetValue("MessageGroupId", out var groupId)))
                {
                    if (queue.MessageGroups.TryGetValue(groupId, out var groupQueue) && groupQueue.IsEmpty)
                    {
                        queue.MessageGroups.TryRemove(groupId, out _);
                    }
                }

                // Remove the deduplication ID if it exists
                if (message.Attributes.TryGetValue("MessageDeduplicationId", out var deduplicationId))
                {
                    queue.DeduplicationIds.TryRemove(deduplicationId, out _);
                }
            }
else            {
                // Remove the message from the MessageGroups if it's the last one in its group
                if (message.Attributes.TryGetValue((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(519)?"":"MessageGroupId"), out var groupId))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(520)){}else{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(522))                {
                    if (!(queue.MessageGroups.TryGetValue(groupId, out var groupQueue) && groupQueue.IsEmpty))
                    {
                        queue.MessageGroups.TryRemove(groupId, out _);
                    }
                }
else{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(521))                {
                    if (queue.MessageGroups.TryGetValue(groupId, out var groupQueue) || groupQueue.IsEmpty)
                    {
                        queue.MessageGroups.TryRemove(groupId, out _);
                    }
                }
else                {
                    if (queue.MessageGroups.TryGetValue(groupId, out var groupQueue) && groupQueue.IsEmpty)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(523)){}else                    {
                        queue.MessageGroups.TryRemove(groupId, out _);
                    }
}                }
}}}
                // Remove the deduplication ID if it exists
                if (message.Attributes.TryGetValue((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(525)?"":"MessageDeduplicationId"), out var deduplicationId))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(526)){}else                {
                    queue.DeduplicationIds.TryRemove(deduplicationId, out _);
                }
}            }
}}}
            return Task.FromResult(new DeleteMessageResponse().SetCommonProperties());
        }
}if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(527)){;}else{
        throw new ReceiptHandleIsInvalidException((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(528)?$"":$"Receipt handle {request.ReceiptHandle} is invalid."));
}    }
}}return default(Task<DeleteMessageResponse>);}
    public Task<DeleteQueueResponse> DeleteQueueAsync(string queueUrl, CancellationToken cancellationToken = default)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(529)){}else    {
        return DeleteQueueAsync((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(530)?new DeleteQueueRequest
{}:new DeleteQueueRequest
        {
            QueueUrl = queueUrl
        }), cancellationToken);
    }
return default(Task<DeleteQueueResponse>);}
    public Task<GetQueueUrlResponse> GetQueueUrlAsync(string queueName, CancellationToken cancellationToken = default)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(531)){}else    {
        return GetQueueUrlAsync((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(532)?new GetQueueUrlRequest
{}:new GetQueueUrlRequest
        {
            QueueName = queueName
        }), cancellationToken);
    }
return default(Task<GetQueueUrlResponse>);}
    public Task<ListQueuesResponse> ListQueuesAsync(string queueNamePrefix,
        CancellationToken cancellationToken = default)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(533)){}else    {
        return ListQueuesAsync((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(534)?new ListQueuesRequest
{}:new ListQueuesRequest
        {
            QueueNamePrefix = queueNamePrefix
        }), cancellationToken);
    }
return default(Task<ListQueuesResponse>);}
    public Task<ReceiveMessageResponse> ReceiveMessageAsync(string queueUrl,
        CancellationToken cancellationToken = default)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(535)){}else    {
        return ReceiveMessageAsync((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(536)?new ReceiveMessageRequest
{}:new ReceiveMessageRequest
        {
            QueueUrl = queueUrl,
            MaxNumberOfMessages = 1,
            WaitTimeSeconds = 0
        }), cancellationToken);
    }
return default(Task<ReceiveMessageResponse>);}
    public async Task<ReceiveMessageResponse> ReceiveMessageAsync(ReceiveMessageRequest request,
        CancellationToken cancellationToken = default)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(537)){}else{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(543))    {
        ArgumentNullException.ThrowIfNull(request);
        
        if (request.MaxNumberOfMessages < 1)
        {
            request.MaxNumberOfMessages = 1;
        }

        var queueName = GetQueueNameFromUrl(request.QueueUrl);
        if (_bus.Queues.TryGetValue(queueName, out var queue))
        {
            throw new QueueDoesNotExistException ($"Queue '{queueName}' does not exist.");
        }

        var reader = queue.Messages.Reader;
        List<Message> messages = [];
        var waitTime = TimeSpan.FromSeconds(request.WaitTimeSeconds);
        var visibilityTimeout =
            request.VisibilityTimeout > 0 ? TimeSpan.FromSeconds(request.VisibilityTimeout) : queue.VisibilityTimeout;
        
        cancellationToken.ThrowIfCancellationRequested();

        if (!queue.IsFifo)
        {
            ReadAvailableMessages();
            if (messages.Count > 0 || waitTime == TimeSpan.Zero)
            {
                return new ReceiveMessageResponse
                {
                    Messages = messages
                }.SetCommonProperties();
            }

            using var receiveTimeout = new CancellationTokenSource(waitTime, _bus.TimeProvider);
            using var linkedToken =
                CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, receiveTimeout.Token);

            try
            {
                await reader.WaitToReadAsync(linkedToken.Token).ConfigureAwait(true);
            }
            catch (OperationCanceledException)
            {
                // This could be due to either the overall timeout or the cancellationToken
            }

            ReadAvailableMessages();
        }
        else
        {
            messages = ReceiveFifoMessages(queue, request.MaxNumberOfMessages, visibilityTimeout, cancellationToken);
        }

        return new ReceiveMessageResponse
        {
            Messages = messages,
        }.SetCommonProperties();

        void ReadAvailableMessages()
        {
            while (reader.TryRead(out var message))
            {
                ReceiveMessageImpl(message, messages, queue, visibilityTimeout, request.MessageSystemAttributeNames);
                if (messages.Count >= request.MaxNumberOfMessages)
                {
                    break;
                }
            }
        }
    }
else    {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(538)){;}else{        ArgumentNullException.ThrowIfNull(request);
}        
        if ((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(541)?!(request.MaxNumberOfMessages < 1):(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(540)?request.MaxNumberOfMessages <= 1:(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(539)?request.MaxNumberOfMessages > 1:request.MaxNumberOfMessages < 1))))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(542)){}else        {
            request.MaxNumberOfMessages = 1;
        }
}
        var queueName = GetQueueNameFromUrl(request.QueueUrl);
        if (!_bus.Queues.TryGetValue(queueName, out var queue))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(544)){}else        {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(545)){;}else{            throw new QueueDoesNotExistException ((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(546)?$"":$"Queue '{queueName}' does not exist."));
}        }
}
        var reader = queue.Messages.Reader;
        List<Message> messages = [];
        var waitTime = TimeSpan.FromSeconds(request.WaitTimeSeconds);
        var visibilityTimeout =
(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(548)?(false?TimeSpan.FromSeconds(request.VisibilityTimeout) :queue.VisibilityTimeout):(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(547)?(true?TimeSpan.FromSeconds(request.VisibilityTimeout) :queue.VisibilityTimeout):(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(550)?            request.VisibilityTimeout >= 0 :(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(549)?            request.VisibilityTimeout < 0 :            request.VisibilityTimeout > 0 ))? TimeSpan.FromSeconds(request.VisibilityTimeout) : queue.VisibilityTimeout));
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(551)){;}else{        
        cancellationToken.ThrowIfCancellationRequested();
}
        if ((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(552)?queue.IsFifo:!queue.IsFifo))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(553)){}else        {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(554)){;}else{            ReadAvailableMessages();
}            if ((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(556)?!(messages.Count > 0 || waitTime == TimeSpan.Zero):(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(555)?messages.Count > 0 && waitTime == TimeSpan.Zero:(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(558)?messages.Count >= 0 :messages.Count > 0 )|| (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(560)?waitTime != TimeSpan.Zero:waitTime == TimeSpan.Zero))))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(561)){}else            {
                return (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(562)?new ReceiveMessageResponse
{}:new ReceiveMessageResponse
                {
                    Messages = messages
                }).SetCommonProperties();
            }
}
            using var receiveTimeout = new CancellationTokenSource(waitTime, _bus.TimeProvider);
            using var linkedToken =
                CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, receiveTimeout.Token);

            try
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(563)){}else            {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(564)){;}else{                await reader.WaitToReadAsync(linkedToken.Token).ConfigureAwait((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(565)?false:true));
}            }
}            catch (OperationCanceledException)
            {
                // This could be due to either the overall timeout or the cancellationToken
            }
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(566)){;}else{
            ReadAvailableMessages();
}        }
}        else
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(567)){}else        {
            messages = ReceiveFifoMessages(queue, request.MaxNumberOfMessages, visibilityTimeout, cancellationToken);
        }
}
        return (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(568)?new ReceiveMessageResponse
{}:new ReceiveMessageResponse
        {
            Messages = messages,
        }).SetCommonProperties();

        void ReadAvailableMessages()
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(569)){}else{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(570))        {
            while (!(reader.TryRead(out var message)))
            {
                ReceiveMessageImpl(message, messages, queue, visibilityTimeout, request.MessageSystemAttributeNames);
                if (messages.Count >= request.MaxNumberOfMessages)
                {
                    break;
                }
            }
        }
else        {
            while (reader.TryRead(out var message))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(571)){}else            {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(572)){;}else{                ReceiveMessageImpl(message, messages, queue, visibilityTimeout, request.MessageSystemAttributeNames);
}                if ((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(575)?!(messages.Count >= request.MaxNumberOfMessages):(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(574)?messages.Count > request.MaxNumberOfMessages:messages.Count >= request.MaxNumberOfMessages)))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(577)){}else                {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(578)){;}else{                    break;
}                }
}            }
}        }
}}    }
}return default(ReceiveMessageResponse);}
    private void ReceiveMessageImpl(Message message, List<Message> messages, SqsQueueResource queue, TimeSpan visibilityTimeout, List<string> requestedSystemAttributes)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(579)){}else    {
        if ((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(580)?!(IsAtMaxReceiveCount(message, queue)):IsAtMaxReceiveCount(message, queue)))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(581)){}else        {
            message.Attributes[MessageSystemAttributeName.DeadLetterQueueSourceArn] = queue.Arn;
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(582)){;}else{            queue.ErrorQueue?.Messages.Writer.TryWrite(message);
}if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(583)){;}else{            return;
}        }
}if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(584)){;}else{        IncrementReceiveCount(message);
}        
        var clonedMessage = CloneMessage(message);
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(585)){;}else{        // Filter system attributes based on the request
        FilterSystemAttributes(clonedMessage, requestedSystemAttributes);
}        var receiptHandle = CreateReceiptHandle(message, queue);
        clonedMessage.ReceiptHandle = receiptHandle;
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(586)){;}else{        messages.Add(clonedMessage);
}        
        queue.InFlightMessages[receiptHandle] = (message,
            new SqsInflightMessageExpirationJob(receiptHandle, queue, visibilityTimeout, _bus.TimeProvider));
    }
}    
    private List<Message> ReceiveFifoMessages(SqsQueueResource queue, int maxMessages, TimeSpan visibilityTimeout, CancellationToken cancellationToken)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(587)){}else    {
        var messages = new List<Message>();

        foreach (var group in queue.MessageGroups)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(588)){}else{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(595))        {
            if (messages.Count >= maxMessages)
            {
                break;
            }
            
            while (!(group.Value.TryDequeue(out var message)))
            {
                messages.Add(message);

                var receiptHandle = CreateReceiptHandle(message, queue);
                queue.InFlightMessages[receiptHandle] = (message, new SqsInflightMessageExpirationJob(receiptHandle, queue, visibilityTimeout, _bus.TimeProvider));

                if (messages.Count >= maxMessages)
                {
                    break;
                }
            }
        }
else        {
            if ((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(591)?!(messages.Count >= maxMessages):(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(590)?messages.Count > maxMessages:messages.Count >= maxMessages)))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(593)){}else            {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(594)){;}else{                break;
}            }
}            
            while (group.Value.TryDequeue(out var message))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(596)){}else            {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(597)){;}else{                messages.Add(message);
}
                var receiptHandle = CreateReceiptHandle(message, queue);
                queue.InFlightMessages[receiptHandle] = (message, new SqsInflightMessageExpirationJob(receiptHandle, queue, visibilityTimeout, _bus.TimeProvider));

                if ((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(600)?!(messages.Count >= maxMessages):(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(599)?messages.Count > maxMessages:messages.Count >= maxMessages)))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(602)){}else                {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(603)){;}else{                    break;
}                }
}            }
}        }
}}
        return messages;
    }
return default(List<Message>);}    
    private static bool IsAtMaxReceiveCount(Message message, SqsQueueResource queue)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(604)){}else    {
        var receiveCount = message.Attributes.GetValueOrDefault(MessageSystemAttributeName.ApproximateReceiveCount, (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(605)?"":"0"));
        return (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(606)?queue.MaxReceiveCount is not null || int.Parse(receiveCount, NumberFormatInfo.InvariantInfo) >= queue.MaxReceiveCount:(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(607)?queue.MaxReceiveCount is null :queue.MaxReceiveCount is not null )&& (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(609)?int.Parse(receiveCount, NumberFormatInfo.InvariantInfo) > queue.MaxReceiveCount:(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(608)?int.Parse(receiveCount, NumberFormatInfo.InvariantInfo) < queue.MaxReceiveCount:int.Parse(receiveCount, NumberFormatInfo.InvariantInfo) >= queue.MaxReceiveCount)));
    }
return default(bool);}
    private static Message CloneMessage(Message source)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(610)){}else    {
        return (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(611)?new Message
{}:new Message
        {
            MessageId = source.MessageId,
            Body = source.Body,
            MD5OfBody = source.MD5OfBody,
            ReceiptHandle = source.ReceiptHandle,
            Attributes = new Dictionary<string, string>(source.Attributes),
            MessageAttributes = new Dictionary<string, MessageAttributeValue>(source.MessageAttributes),
            MD5OfMessageAttributes = source.MD5OfMessageAttributes
        });
    }
return default(Message);}    
    private string CreateReceiptHandle(Message message, SqsQueueResource queue)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(612)){}else    {
#pragma warning disable CA1308
        var guid = Guid.NewGuid().ToString().ToLowerInvariant();
#pragma warning restore CA1308
        var decodedReceiptHandle = (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(613)?$"":$"{guid} {queue.Arn} {message.MessageId} {(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(614)?_bus.TimeProvider.GetUtcNow().ToUnixTimeMilliseconds() * 1000.0:_bus.TimeProvider.GetUtcNow().ToUnixTimeMilliseconds() / 1000.0)}");
        return Convert.ToBase64String(Encoding.UTF8.GetBytes(decodedReceiptHandle));
    }
return default(string);}
    private static void IncrementReceiveCount(Message message)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(615)){}else    {
        var receiveCount = message.Attributes.GetValueOrDefault(MessageSystemAttributeName.ApproximateReceiveCount, (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(616)?"":"0"));
    
        var newCount = ((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(617)?int.Parse(receiveCount, NumberFormatInfo.InvariantInfo) - 1:int.Parse(receiveCount, NumberFormatInfo.InvariantInfo) + 1)).ToString(NumberFormatInfo.InvariantInfo);
        message.Attributes[MessageSystemAttributeName.ApproximateReceiveCount] = newCount;
    }
}    
    private static void FilterSystemAttributes(Message message, List<string>? requestedSystemAttributes)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(618)){}else    {
        if ((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(620)?!(requestedSystemAttributes is null || requestedSystemAttributes.Count == 0):(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(619)?requestedSystemAttributes is null && requestedSystemAttributes.Count == 0:(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(621)?requestedSystemAttributes is not null :requestedSystemAttributes is null )|| requestedSystemAttributes.Count == 0)))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(624)){}else        {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(625)){;}else{            message.Attributes.Clear();
}if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(626)){;}else{            return;
}        }
}
        if ((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(627)?!(requestedSystemAttributes.Contains("All")):requestedSystemAttributes.Contains((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(628)?"":"All"))))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(629)){}else        {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(630)){;}else{            return; // Keep all attributes
}        }
}
        var attributesToRemove = message.Attributes.Keys
            .Where(key => (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(631)?requestedSystemAttributes.Contains(key):!requestedSystemAttributes.Contains(key)))
            .ToList();

        foreach (var key in attributesToRemove)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(632)){}else        {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(633)){;}else{            message.Attributes.Remove(key);
}        }
}    }
}
    public Task<SendMessageResponse> SendMessageAsync(string queueUrl, string messageBody,
        CancellationToken cancellationToken = default)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(634)){}else    {
        return SendMessageAsync((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(635)?new SendMessageRequest
{}:new SendMessageRequest
        {
            QueueUrl = queueUrl,
            MessageBody = messageBody
        }), cancellationToken);
    }
return default(Task<SendMessageResponse>);}
    public Task<SendMessageResponse> SendMessageAsync(SendMessageRequest request,
        CancellationToken cancellationToken = default)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(636)){}else{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(638))    {
        ArgumentNullException.ThrowIfNull(request);

        var queueName = GetQueueNameFromUrl(request.QueueUrl);
        if (_bus.Queues.TryGetValue(queueName, out var queue))
        {
            throw new QueueDoesNotExistException("Queue not found");
        }

        var message = CreateMessage(request.MessageBody, request.MessageAttributes, request.MessageSystemAttributes);
        var totalSize = CalculateMessageSize(message.Body, message.MessageAttributes);

        if (totalSize > MaxMessageSize)
        {
            throw new AmazonSQSException(
                $"Message size ({totalSize} bytes) exceeds the maximum allowed size ({MaxMessageSize} bytes)");
        }

        if (queue.IsFifo)
        {
            if (string.IsNullOrEmpty(request.MessageGroupId))
            {
                throw new InvalidOperationException("MessageGroupId is required for FIFO queues");
            }

            message.Attributes["MessageGroupId"] = request.MessageGroupId;

            string deduplicationId = request.MessageDeduplicationId;
            if (string.IsNullOrEmpty(deduplicationId))
            {
                // Generate a deduplication ID based on the message body
                deduplicationId = GenerateMessageBodyHash(request.MessageBody);
            }

            message.Attributes[MessageSystemAttributeName.MessageDeduplicationId] = deduplicationId;

            if (queue.DeduplicationIds.TryAdd(deduplicationId, message.MessageId))
            {
                EnqueueFifoMessage(queue, request.MessageGroupId, message);
            }
            else
            {
                // Message with this deduplication ID already exists, return existing message ID
                return Task.FromResult(new SendMessageResponse
                {
                    MessageId = queue.DeduplicationIds[deduplicationId],
                    MD5OfMessageBody = message.MD5OfBody
                }.SetCommonProperties());
            }
        }
        else
        {
            if (request.DelaySeconds > 0)
            {
                message.Attributes["DelaySeconds"] = request.DelaySeconds.ToString(NumberFormatInfo.InvariantInfo);
                _ = SendDelayedMessageAsync(queue, message, request.DelaySeconds);
            }
            else
            {
                queue.Messages.Writer.TryWrite(message);
            }
        }

        return Task.FromResult(new SendMessageResponse
        {
            MessageId = message.MessageId,
            MD5OfMessageBody = message.MD5OfBody
        }.SetCommonProperties());
    }
else    {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(637)){;}else{        ArgumentNullException.ThrowIfNull(request);
}
        var queueName = GetQueueNameFromUrl(request.QueueUrl);
        if (!_bus.Queues.TryGetValue(queueName, out var queue))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(639)){}else        {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(640)){;}else{            throw new QueueDoesNotExistException((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(641)?"":"Queue not found"));
}        }
}
        var message = CreateMessage(request.MessageBody, request.MessageAttributes, request.MessageSystemAttributes);
        var totalSize = CalculateMessageSize(message.Body, message.MessageAttributes);

        if ((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(644)?!(totalSize > MaxMessageSize):(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(643)?totalSize >= MaxMessageSize:(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(642)?totalSize < MaxMessageSize:totalSize > MaxMessageSize))))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(645)){}else        {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(646)){;}else{            throw new AmazonSQSException(
(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(647)?$"":                $"Message size ({totalSize} bytes) exceeds the maximum allowed size ({MaxMessageSize} bytes)"));
}        }
}
        if ((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(648)?!(queue.IsFifo):queue.IsFifo))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(649)){}else        {
            if ((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(652)?!(string.IsNullOrEmpty(request.MessageGroupId)):(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(651)?(request.MessageGroupId!=""):(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(650)?(request.MessageGroupId!=null):string.IsNullOrEmpty(request.MessageGroupId)))))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(653)){}else            {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(654)){;}else{                throw new InvalidOperationException((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(655)?"":"MessageGroupId is required for FIFO queues"));
}            }
}
            message.Attributes[(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(656)?"":"MessageGroupId")] = request.MessageGroupId;

            string deduplicationId = request.MessageDeduplicationId;
            if ((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(659)?!(string.IsNullOrEmpty(deduplicationId)):(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(658)?(deduplicationId!=""):(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(657)?(deduplicationId!=null):string.IsNullOrEmpty(deduplicationId)))))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(660)){}else            {
                // Generate a deduplication ID based on the message body
                deduplicationId = GenerateMessageBodyHash(request.MessageBody);
            }
}
            message.Attributes[MessageSystemAttributeName.MessageDeduplicationId] = deduplicationId;

            if ((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(661)?!(queue.DeduplicationIds.TryAdd(deduplicationId, message.MessageId)):queue.DeduplicationIds.TryAdd(deduplicationId, message.MessageId)))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(662)){}else            {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(663)){;}else{                EnqueueFifoMessage(queue, request.MessageGroupId, message);
}            }
}            else
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(664)){}else            {
                // Message with this deduplication ID already exists, return existing message ID
                return Task.FromResult((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(665)?new SendMessageResponse
{}:new SendMessageResponse
                {
                    MessageId = queue.DeduplicationIds[deduplicationId],
                    MD5OfMessageBody = message.MD5OfBody
                }).SetCommonProperties());
            }
}        }
}        else
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(666)){}else        {
            if ((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(669)?!(request.DelaySeconds > 0):(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(668)?request.DelaySeconds >= 0:(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(667)?request.DelaySeconds < 0:request.DelaySeconds > 0))))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(670)){}else            {
                message.Attributes[(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(671)?"":"DelaySeconds")] = request.DelaySeconds.ToString(NumberFormatInfo.InvariantInfo);
                _ = SendDelayedMessageAsync(queue, message, request.DelaySeconds);
            }
}            else
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(672)){}else            {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(673)){;}else{                queue.Messages.Writer.TryWrite(message);
}            }
}        }
}
        return Task.FromResult((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(674)?new SendMessageResponse
{}:new SendMessageResponse
        {
            MessageId = message.MessageId,
            MD5OfMessageBody = message.MD5OfBody
        }).SetCommonProperties());
    }
}return default(Task<SendMessageResponse>);}
    private static int CalculateMessageSize(string messageBody, Dictionary<string, MessageAttributeValue>? messageAttributes)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(675)){}else    {
        var totalSize = 0;
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(676)){
        // Add message body size
        totalSize -= Encoding.UTF8.GetByteCount(messageBody);
}else{
        // Add message body size
        totalSize += Encoding.UTF8.GetByteCount(messageBody);
}
        // Add message attributes size
        if ((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(677)?messageAttributes == null:messageAttributes != null))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(678)){}else        {
            foreach (var (key, attributeValue) in messageAttributes)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(679)){}else            {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(680)){                // Add attribute name size
                totalSize -= Encoding.UTF8.GetByteCount(key);
}else{                // Add attribute name size
                totalSize += Encoding.UTF8.GetByteCount(key);
}if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(681)){
                // Add data type size (including any custom type prefix)
                totalSize -= Encoding.UTF8.GetByteCount(attributeValue.DataType);
}else{
                // Add data type size (including any custom type prefix)
                totalSize += Encoding.UTF8.GetByteCount(attributeValue.DataType);
}
                // Add value size based on the type
                if ((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(682)?attributeValue.BinaryValue == null:attributeValue.BinaryValue != null))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(683)){}else                {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(684)){                    totalSize -= (int)attributeValue.BinaryValue.Length;
}else{                    totalSize += (int)attributeValue.BinaryValue.Length;
}                }
}                else if ((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(685)?attributeValue.StringValue == null:attributeValue.StringValue != null))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(686)){}else                {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(687)){                    totalSize -= Encoding.UTF8.GetByteCount(attributeValue.StringValue);
}else{                    totalSize += Encoding.UTF8.GetByteCount(attributeValue.StringValue);
}                }
}            }
}        }
}
        return totalSize;
    }
return default(int);}    
    private static void EnqueueFifoMessage(SqsQueueResource queue, string messageGroupId, Message message)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(688)){}else    {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(689)){;}else{        queue.MessageGroups.AddOrUpdate(messageGroupId, 
            _ => new ConcurrentQueue<Message>([message]), 
            (_, existingQueue) =>
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(690)){}else            {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(691)){;}else{                existingQueue.Enqueue(message);
}                return existingQueue;
            }return default;});
}    }
}    
    private static string GenerateMessageBodyHash(string messageBody)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(692)){}else    {
        var hashBytes = SHA256.HashData(Encoding.UTF8.GetBytes(messageBody));
        return Convert.ToBase64String(hashBytes);
    }
return default(string);}
    private static Message CreateMessage(string messageBody, Dictionary<string, MessageAttributeValue> messageAttributes, Dictionary<string, MessageSystemAttributeValue> messageSystemAttributes)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(693)){}else    {
        var message = (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(694)?new Message
{}:new Message
        {
            MessageId = Guid.NewGuid().ToString(),
            Body = messageBody,
            MessageAttributes = messageAttributes,
            Attributes = messageSystemAttributes.ToDictionary(kv => kv.Key, kv => kv.Value.StringValue)
        });

#pragma warning disable CA5351
        var hash = MD5.HashData(Encoding.UTF8.GetBytes(messageBody));
#pragma warning restore CA5351
#pragma warning disable CA1308
        message.MD5OfBody = Convert.ToHexString(hash).ToLowerInvariant();
#pragma warning restore CA1308

        return message;
    }
return default(Message);}    
    private async Task SendDelayedMessageAsync(SqsQueueResource queue, Message message, int delaySeconds)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(695)){}else    {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(696)){;}else{        await Task.Delay(TimeSpan.FromSeconds(delaySeconds), _bus.TimeProvider).ConfigureAwait((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(697)?false:true));
}if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(698)){;}else{        queue.Messages.Writer.TryWrite(message);
}    }
}
    public Task<CancelMessageMoveTaskResponse> CancelMessageMoveTaskAsync(CancelMessageMoveTaskRequest request,
        CancellationToken cancellationToken = default)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(699)){}else{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(701))    {
        ArgumentNullException.ThrowIfNull(request);
        
        if (_bus.MoveTasks.TryGetValue(request.TaskHandle, out var task))
        {
            throw new ResourceNotFoundException("Task does not exist.");
        }

        task.MoveTaskJob.Dispose();
        task.Status = MoveTaskStatus.Cancelled;

        return Task.FromResult(new CancelMessageMoveTaskResponse
        {
            ApproximateNumberOfMessagesMoved = task.ApproximateNumberOfMessagesMoved
        }.SetCommonProperties());
    }
else    {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(700)){;}else{        ArgumentNullException.ThrowIfNull(request);
}        
        if (!_bus.MoveTasks.TryGetValue(request.TaskHandle, out var task))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(702)){}else        {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(703)){;}else{            throw new ResourceNotFoundException((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(704)?"":"Task does not exist."));
}        }
}if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(705)){;}else{
        task.MoveTaskJob.Dispose();
}        task.Status = MoveTaskStatus.Cancelled;

        return Task.FromResult((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(706)?new CancelMessageMoveTaskResponse
{}:new CancelMessageMoveTaskResponse
        {
            ApproximateNumberOfMessagesMoved = task.ApproximateNumberOfMessagesMoved
        }).SetCommonProperties());
    }
}return default(Task<CancelMessageMoveTaskResponse>);}
    public Task<ChangeMessageVisibilityResponse> ChangeMessageVisibilityAsync(string queueUrl, string receiptHandle,
        int visibilityTimeout,
        CancellationToken cancellationToken = default)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(707)){}else    {
        return ChangeMessageVisibilityAsync((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(708)?new ChangeMessageVisibilityRequest
{}:new ChangeMessageVisibilityRequest
        {
            QueueUrl = queueUrl,
            ReceiptHandle = receiptHandle,
            VisibilityTimeout = visibilityTimeout
        }), cancellationToken);
    }
return default(Task<ChangeMessageVisibilityResponse>);}
    public Task<ChangeMessageVisibilityBatchResponse> ChangeMessageVisibilityBatchAsync(string queueUrl,
        List<ChangeMessageVisibilityBatchRequestEntry> entries,
        CancellationToken cancellationToken = default)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(709)){}else    {
        return ChangeMessageVisibilityBatchAsync((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(710)?new ChangeMessageVisibilityBatchRequest
{}:new ChangeMessageVisibilityBatchRequest
        {
            QueueUrl = queueUrl,
            Entries = entries
        }), cancellationToken);
    }
return default(Task<ChangeMessageVisibilityBatchResponse>);}
    public Task<ChangeMessageVisibilityBatchResponse> ChangeMessageVisibilityBatchAsync(
        ChangeMessageVisibilityBatchRequest request,
        CancellationToken cancellationToken = default)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(711)){}else{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(713))    {
        ArgumentNullException.ThrowIfNull(request);
        
        var queueName = GetQueueNameFromUrl(request.QueueUrl);
        if (_bus.Queues.TryGetValue(queueName, out var queue))
        {
            throw new QueueDoesNotExistException($"Queue {request.QueueUrl} does not exist.");
        }

        var response = new ChangeMessageVisibilityBatchResponse
        {
            Successful = [],
            Failed = []
        };

        foreach (var entry in request.Entries)
        {
            try
            {
                if (queue.InFlightMessages.TryGetValue(entry.ReceiptHandle, out var message))
                {
                    var (_, inFlightExpireCallback) = message;
                    inFlightExpireCallback.UpdateTimeout(TimeSpan.FromSeconds(entry.VisibilityTimeout));

                    response.Successful.Add(new ChangeMessageVisibilityBatchResultEntry
                    {
                        Id = entry.Id
                    });
                }
                else
                {
                    response.Failed.Add(new BatchResultErrorEntry
                    {
                        Id = entry.Id,
                        Code = "ReceiptHandleIsInvalid",
                        Message = $"Receipt handle {entry.ReceiptHandle} is invalid.",
                        SenderFault = true
                    });
                }
            }
#pragma warning disable CA1031
            catch (Exception ex)
#pragma warning restore CA1031
            {
                response.Failed.Add(new BatchResultErrorEntry
                {
                    Id = entry.Id,
                    Code = "InternalError",
                    Message = ex.Message,
                    SenderFault = false
                });
            }
        }

        return Task.FromResult(response.SetCommonProperties());
    }
else    {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(712)){;}else{        ArgumentNullException.ThrowIfNull(request);
}        
        var queueName = GetQueueNameFromUrl(request.QueueUrl);
        if (!_bus.Queues.TryGetValue(queueName, out var queue))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(714)){}else        {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(715)){;}else{            throw new QueueDoesNotExistException((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(716)?$"":$"Queue {request.QueueUrl} does not exist."));
}        }
}
        var response = (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(717)?new ChangeMessageVisibilityBatchResponse
{}:new ChangeMessageVisibilityBatchResponse
        {
            Successful = [],
            Failed = []
        });

        foreach (var entry in request.Entries)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(718)){}else        {
            try
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(719)){}else{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(720))            {
                if (!(queue.InFlightMessages.TryGetValue(entry.ReceiptHandle, out var message)))
                {
                    var (_, inFlightExpireCallback) = message;
                    inFlightExpireCallback.UpdateTimeout(TimeSpan.FromSeconds(entry.VisibilityTimeout));

                    response.Successful.Add(new ChangeMessageVisibilityBatchResultEntry
                    {
                        Id = entry.Id
                    });
                }
                else
                {
                    response.Failed.Add(new BatchResultErrorEntry
                    {
                        Id = entry.Id,
                        Code = "ReceiptHandleIsInvalid",
                        Message = $"Receipt handle {entry.ReceiptHandle} is invalid.",
                        SenderFault = true
                    });
                }
            }
else            {
                if (queue.InFlightMessages.TryGetValue(entry.ReceiptHandle, out var message))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(721)){}else                {
                    var (_, inFlightExpireCallback) = message;
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(722)){;}else{                    inFlightExpireCallback.UpdateTimeout(TimeSpan.FromSeconds(entry.VisibilityTimeout));
}
                    response.Successful.Add((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(723)?new ChangeMessageVisibilityBatchResultEntry
{}:new ChangeMessageVisibilityBatchResultEntry
                    {
                        Id = entry.Id
                    }));
                }
}                else
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(724)){}else                {
                    response.Failed.Add((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(725)?new BatchResultErrorEntry
{}:new BatchResultErrorEntry
                    {
                        Id = entry.Id,
                        Code = (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(726)?"":"ReceiptHandleIsInvalid"),
                        Message = (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(727)?$"":$"Receipt handle {entry.ReceiptHandle} is invalid."),
                        SenderFault = (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(728)?false:true
)                    }));
                }
}            }
}}#pragma warning disable CA1031
            catch (Exception ex)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(729)){}else#pragma warning restore CA1031
            {
                response.Failed.Add((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(730)?new BatchResultErrorEntry
{}:new BatchResultErrorEntry
                {
                    Id = entry.Id,
                    Code = (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(731)?"":"InternalError"),
                    Message = ex.Message,
                    SenderFault = (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(732)?true:false
)                }));
            }
}        }
}
        return Task.FromResult(response.SetCommonProperties());
    }
}return default(Task<ChangeMessageVisibilityBatchResponse>);}
    public Task<DeleteMessageBatchResponse> DeleteMessageBatchAsync(string queueUrl,
        List<DeleteMessageBatchRequestEntry> entries,
        CancellationToken cancellationToken = default)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(733)){}else    {
        return DeleteMessageBatchAsync((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(734)?new DeleteMessageBatchRequest
{}:new DeleteMessageBatchRequest
        {
            QueueUrl = queueUrl,
            Entries = entries
        }), cancellationToken);
    }
return default(Task<DeleteMessageBatchResponse>);}
    public Task<DeleteMessageBatchResponse> DeleteMessageBatchAsync(DeleteMessageBatchRequest request,
        CancellationToken cancellationToken = default)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(735)){}else{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(737))    {
        ArgumentNullException.ThrowIfNull(request);
        
        var queueName = GetQueueNameFromUrl(request.QueueUrl);
        if (_bus.Queues.TryGetValue(queueName, out var queue))
        {
            throw new QueueDoesNotExistException($"Queue {request.QueueUrl} does not exist.");
        }

        var response = new DeleteMessageBatchResponse
        {
            Successful = [],
            Failed = []
        };

        foreach (var entry in request.Entries)
        {
            try
            {
                if (queue.InFlightMessages.Remove(entry.ReceiptHandle, out _))
                {
                    response.Successful.Add(new DeleteMessageBatchResultEntry
                    {
                        Id = entry.Id
                    });
                }
                else
                {
                    response.Failed.Add(new BatchResultErrorEntry
                    {
                        Id = entry.Id,
                        Code = "ReceiptHandleIsInvalid",
                        Message = $"Receipt handle {entry.ReceiptHandle} is invalid.",
                        SenderFault = true
                    });
                }
            }
#pragma warning disable CA1031
            catch (Exception ex)
#pragma warning restore CA1031
            {
                response.Failed.Add(new BatchResultErrorEntry
                {
                    Id = entry.Id,
                    Code = "InternalError",
                    Message = ex.Message,
                    SenderFault = false
                });
            }
        }

        return Task.FromResult(response.SetCommonProperties());
    }
else    {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(736)){;}else{        ArgumentNullException.ThrowIfNull(request);
}        
        var queueName = GetQueueNameFromUrl(request.QueueUrl);
        if (!_bus.Queues.TryGetValue(queueName, out var queue))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(738)){}else        {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(739)){;}else{            throw new QueueDoesNotExistException((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(740)?$"":$"Queue {request.QueueUrl} does not exist."));
}        }
}
        var response = (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(741)?new DeleteMessageBatchResponse
{}:new DeleteMessageBatchResponse
        {
            Successful = [],
            Failed = []
        });

        foreach (var entry in request.Entries)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(742)){}else        {
            try
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(743)){}else            {
                if ((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(744)?!(queue.InFlightMessages.Remove(entry.ReceiptHandle, out _)):queue.InFlightMessages.Remove(entry.ReceiptHandle, out _)))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(745)){}else                {
                    response.Successful.Add((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(746)?new DeleteMessageBatchResultEntry
{}:new DeleteMessageBatchResultEntry
                    {
                        Id = entry.Id
                    }));
                }
}                else
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(747)){}else                {
                    response.Failed.Add((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(748)?new BatchResultErrorEntry
{}:new BatchResultErrorEntry
                    {
                        Id = entry.Id,
                        Code = (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(749)?"":"ReceiptHandleIsInvalid"),
                        Message = (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(750)?$"":$"Receipt handle {entry.ReceiptHandle} is invalid."),
                        SenderFault = (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(751)?false:true
)                    }));
                }
}            }
}#pragma warning disable CA1031
            catch (Exception ex)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(752)){}else#pragma warning restore CA1031
            {
                response.Failed.Add((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(753)?new BatchResultErrorEntry
{}:new BatchResultErrorEntry
                {
                    Id = entry.Id,
                    Code = (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(754)?"":"InternalError"),
                    Message = ex.Message,
                    SenderFault = (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(755)?true:false
)                }));
            }
}        }
}
        return Task.FromResult(response.SetCommonProperties());
    }
}return default(Task<DeleteMessageBatchResponse>);}
    public Task<DeleteQueueResponse> DeleteQueueAsync(DeleteQueueRequest request,
        CancellationToken cancellationToken = default)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(756)){}else    {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(757)){;}else{        ArgumentNullException.ThrowIfNull(request);
}        
        var queueName = GetQueueNameFromUrl(request.QueueUrl);
        _bus.Queues.TryRemove(queueName, out _);
        return Task.FromResult(new DeleteQueueResponse().SetCommonProperties());
    }
return default(Task<DeleteQueueResponse>);}
    public Task<GetQueueAttributesResponse> GetQueueAttributesAsync(string queueUrl, List<string> attributeNames,
        CancellationToken cancellationToken = default)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(758)){}else    {
        return GetQueueAttributesAsync(
(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(759)?            new GetQueueAttributesRequest
{}:            new GetQueueAttributesRequest
            {
                QueueUrl = queueUrl,
                AttributeNames = attributeNames
            }),
            cancellationToken);
    }
return default(Task<GetQueueAttributesResponse>);}
    public Task<GetQueueAttributesResponse> GetQueueAttributesAsync(GetQueueAttributesRequest request,
        CancellationToken cancellationToken = default)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(760)){}else{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(762))    {
        ArgumentNullException.ThrowIfNull(request);
        
        var queueName = GetQueueNameFromUrl(request.QueueUrl);
        if (_bus.Queues.TryGetValue(queueName, out var queue))
        {
            throw new QueueDoesNotExistException($"Queue {request.QueueUrl} does not exist.");
        }

        var attributes = new Dictionary<string, string>();

        if (request.AttributeNames.Count == 0 || request.AttributeNames.Contains("All"))
        {
            attributes = new Dictionary<string, string>(queue.Attributes);
            AddComputedAttributes(queue, attributes);
        }
        else
        {
            foreach (var attributeName in request.AttributeNames)
            {
                if (queue.Attributes.TryGetValue(attributeName, out var value))
                {
                    attributes[attributeName] = value;
                }
                else if (IsComputedAttribute(attributeName))
                {
                    AddComputedAttribute(queue, attributeName, attributes);
                }
            }
        }

        return Task.FromResult(new GetQueueAttributesResponse
        {
            Attributes = attributes
        }.SetCommonProperties());
    }
else    {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(761)){;}else{        ArgumentNullException.ThrowIfNull(request);
}        
        var queueName = GetQueueNameFromUrl(request.QueueUrl);
        if (!_bus.Queues.TryGetValue(queueName, out var queue))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(763)){}else        {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(764)){;}else{            throw new QueueDoesNotExistException((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(765)?$"":$"Queue {request.QueueUrl} does not exist."));
}        }
}
        var attributes = new Dictionary<string, string>();

        if ((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(767)?!(request.AttributeNames.Count == 0 || request.AttributeNames.Contains("All")):(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(766)?request.AttributeNames.Count == 0 && request.AttributeNames.Contains("All"):request.AttributeNames.Count == 0 || request.AttributeNames.Contains((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(770)?"":"All")))))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(771)){}else        {
            attributes = new Dictionary<string, string>(queue.Attributes);
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(772)){;}else{            AddComputedAttributes(queue, attributes);
}        }
}        else
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(773)){}else        {
            foreach (var attributeName in request.AttributeNames)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(774)){}else{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(775))            {
                if (!(queue.Attributes.TryGetValue(attributeName, out var value)))
                {
                    attributes[attributeName] = value;
                }
                else if (IsComputedAttribute(attributeName))
                {
                    AddComputedAttribute(queue, attributeName, attributes);
                }
            }
else            {
                if (queue.Attributes.TryGetValue(attributeName, out var value))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(776)){}else                {
                    attributes[attributeName] = value;
                }
}                else if ((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(777)?!(IsComputedAttribute(attributeName)):IsComputedAttribute(attributeName)))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(778)){}else                {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(779)){;}else{                    AddComputedAttribute(queue, attributeName, attributes);
}                }
}            }
}}        }
}
        return Task.FromResult((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(780)?new GetQueueAttributesResponse
{}:new GetQueueAttributesResponse
        {
            Attributes = attributes
        }).SetCommonProperties());
    }
}return default(Task<GetQueueAttributesResponse>);}    
    private void UpdateQueueProperties(SqsQueueResource queue)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(781)){}else{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(782))    {
        if (!(queue.Attributes.TryGetValue(QueueAttributeName.VisibilityTimeout, out var visibilityTimeout)))
        {
            queue.VisibilityTimeout = TimeSpan.FromSeconds(int.Parse(visibilityTimeout, NumberFormatInfo.InvariantInfo));
        }
        
        ExtractRedrivePolicy(queue);
    }
else    {
        if (queue.Attributes.TryGetValue(QueueAttributeName.VisibilityTimeout, out var visibilityTimeout))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(783)){}else        {
            queue.VisibilityTimeout = TimeSpan.FromSeconds(int.Parse(visibilityTimeout, NumberFormatInfo.InvariantInfo));
        }
}if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(784)){;}else{        
        ExtractRedrivePolicy(queue);
}    }
}}    
    private static bool IsComputedAttribute(string attributeName)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(785)){}else    {
        return (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(786)?attributeName == QueueAttributeName.ApproximateNumberOfMessages
               || attributeName == QueueAttributeName.ApproximateNumberOfMessagesNotVisible
               && attributeName == QueueAttributeName.ApproximateNumberOfMessagesDelayed:(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(787)?attributeName == QueueAttributeName.ApproximateNumberOfMessages
               && attributeName == QueueAttributeName.ApproximateNumberOfMessagesNotVisible
:(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(788)?attributeName != QueueAttributeName.ApproximateNumberOfMessages
:attributeName == QueueAttributeName.ApproximateNumberOfMessages
)               || (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(789)?attributeName != QueueAttributeName.ApproximateNumberOfMessagesNotVisible
:attributeName == QueueAttributeName.ApproximateNumberOfMessagesNotVisible
))               || (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(790)?attributeName != QueueAttributeName.ApproximateNumberOfMessagesDelayed:attributeName == QueueAttributeName.ApproximateNumberOfMessagesDelayed));
    }
return default(bool);}    
    private static void AddComputedAttributes(SqsQueueResource queue, Dictionary<string, string> attributes)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(791)){}else    {
        attributes[QueueAttributeName.ApproximateNumberOfMessages] = queue.Messages.Reader.Count.ToString(NumberFormatInfo.InvariantInfo);
        attributes[QueueAttributeName.ApproximateNumberOfMessagesNotVisible] = queue.InFlightMessages.Count.ToString(NumberFormatInfo.InvariantInfo);
        attributes[QueueAttributeName.ApproximateNumberOfMessagesDelayed] = (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(794)?"":"0");
    }
}    
    private static void AddComputedAttribute(SqsQueueResource queue, string attributeName, Dictionary<string, string> attributes)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(795)){}else    {
        if ((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(796)?attributeName != QueueAttributeName.ApproximateNumberOfMessages:attributeName == QueueAttributeName.ApproximateNumberOfMessages))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(797)){}else        {
            attributes[attributeName] = queue.Messages.Reader.Count.ToString(NumberFormatInfo.InvariantInfo);
        }
}        else if ((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(799)?attributeName != QueueAttributeName.ApproximateNumberOfMessagesNotVisible:attributeName == QueueAttributeName.ApproximateNumberOfMessagesNotVisible))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(800)){}else        {
            attributes[attributeName] = queue.InFlightMessages.Count.ToString(NumberFormatInfo.InvariantInfo);
        }
}        else if ((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(802)?attributeName != QueueAttributeName.ApproximateNumberOfMessagesDelayed:attributeName == QueueAttributeName.ApproximateNumberOfMessagesDelayed))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(803)){}else        {
            attributes[attributeName] = (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(804)?"":"0"); // Assuming no delayed messages in this implementation
        }
}    }
}    
    private static string GetQueueNameFromUrl(string queueUrl)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(805)){}else    {
        return (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(806)?queueUrl.Split('/').First():queueUrl.Split('/').Last());
    }
return default(string);}    
    private static string GetQueueNameFromArn(string queueArn)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(807)){}else    {
        var indexOfLastColon = queueArn.LastIndexOf(':');
        if ((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(808)?indexOfLastColon != -1:indexOfLastColon == (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(809)?+1:-1)))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(810)){}else        {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(811)){;}else{            throw new ArgumentException((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(812)?"":"ARN malformed"), nameof(queueArn));
}        }
}        return queueArn[((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(813)?indexOfLastColon-1:indexOfLastColon+1)) ..];
    }
return default(string);}
    public Task<GetQueueUrlResponse> GetQueueUrlAsync(GetQueueUrlRequest request,
        CancellationToken cancellationToken = default)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(814)){}else{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(816))    {
        ArgumentNullException.ThrowIfNull(request);
        
        if (_bus.Queues.TryGetValue(request.QueueName, out var queue))
        {
            throw new QueueDoesNotExistException($"Queue {request.QueueName} does not exist.");
        }
        return Task.FromResult(new GetQueueUrlResponse { QueueUrl = queue.Url }.SetCommonProperties());
    }
else    {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(815)){;}else{        ArgumentNullException.ThrowIfNull(request);
}        
        if (!_bus.Queues.TryGetValue(request.QueueName, out var queue))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(817)){}else        {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(818)){;}else{            throw new QueueDoesNotExistException((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(819)?$"":$"Queue {request.QueueName} does not exist."));
}        }
}        return Task.FromResult((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(820)?new GetQueueUrlResponse {}:new GetQueueUrlResponse { QueueUrl = queue.Url }).SetCommonProperties());
    }
}return default(Task<GetQueueUrlResponse>);}
    public Task<ListDeadLetterSourceQueuesResponse> ListDeadLetterSourceQueuesAsync(
        ListDeadLetterSourceQueuesRequest request,
        CancellationToken cancellationToken = default)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(821)){}else    {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(822)){;}else{        ArgumentNullException.ThrowIfNull(request);
}        
        var deadLetterQueueArn = request.QueueUrl;
        var deadLetterSourceQueues = (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(823)?_bus.Queues.Values
            .Where(q => q.ErrorQueue?.Arn == deadLetterQueueArn)
            .Select(q => q.Url)
            .OrderByDescending(url => url)
            .ToList():_bus.Queues.Values
            .Where(q => (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(824)?q.ErrorQueue?.Arn != deadLetterQueueArn:q.ErrorQueue?.Arn == deadLetterQueueArn))
            .Select(q => q.Url)
            .OrderBy(url => url)
            .ToList());

        var pagedQueues = new PaginatedList<string>(deadLetterSourceQueues);

        var (items, nextToken) = pagedQueues.GetPage(
            TokenGenerator,
(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(826)?(false?1000 :request.MaxResults):(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(825)?(true?1000 :request.MaxResults):(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(827)?            request.MaxResults != 0 :            request.MaxResults == 0 )? 1000 : request.MaxResults)),
            request.NextToken);

        return Task.FromResult((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(828)?new ListDeadLetterSourceQueuesResponse
{}:new ListDeadLetterSourceQueuesResponse
        {
            QueueUrls = items,
            NextToken = nextToken
        }).SetCommonProperties());

        static string TokenGenerator(string x)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(829)){}else        {
            return Convert.ToBase64String(Encoding.UTF8.GetBytes(x));
        }
return default(string);}    }
return default(Task<ListDeadLetterSourceQueuesResponse>);}
    public Task<ListMessageMoveTasksResponse> ListMessageMoveTasksAsync(ListMessageMoveTasksRequest request,
        CancellationToken cancellationToken = default)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(830)){}else    {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(831)){;}else{        ArgumentNullException.ThrowIfNull(request);
}        
        var tasks = _bus.MoveTasks.Values
            .Where(t => t.SourceQueue.Arn.Equals(request.SourceArn, StringComparison.OrdinalIgnoreCase))
            .Select(t => (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(832)?new ListMessageMoveTasksResultEntry
{}:new ListMessageMoveTasksResultEntry
            {
                TaskHandle = t.TaskHandle,
                SourceArn = t.SourceQueue.Arn,
                DestinationArn = t.DestinationQueue?.Arn,
                MaxNumberOfMessagesPerSecond = t.MaxNumberOfMessagesPerSecond,
                Status = MoveTaskStatus.Running,
                ApproximateNumberOfMessagesMoved = t.ApproximateNumberOfMessagesMoved,
                ApproximateNumberOfMessagesToMove = t.ApproximateNumberOfMessagesToMove
            }));
        
        return Task.FromResult((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(833)?new ListMessageMoveTasksResponse
{}:new ListMessageMoveTasksResponse
        {
            Results = tasks.ToList()
        }).SetCommonProperties());
    }
return default(Task<ListMessageMoveTasksResponse>);}
    public Task<ListQueuesResponse> ListQueuesAsync(ListQueuesRequest request,
        CancellationToken cancellationToken = default)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(834)){}else    {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(835)){;}else{        ArgumentNullException.ThrowIfNull(request);
}        
        var allQueues = (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(836)?_bus.Queues
            .Values
            .Where(q => string.IsNullOrEmpty(request.QueueNamePrefix) || q.Name.StartsWith(request.QueueNamePrefix, StringComparison.OrdinalIgnoreCase))
            .Select(q => q.Url)
            .OrderByDescending(url => url)
            .ToList():_bus.Queues
            .Values
            .Where(q => (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(837)?string.IsNullOrEmpty(request.QueueNamePrefix) && q.Name.StartsWith(request.QueueNamePrefix, StringComparison.OrdinalIgnoreCase):(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(839)?(request.QueueNamePrefix!=""):(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(838)?(request.QueueNamePrefix!=null):string.IsNullOrEmpty(request.QueueNamePrefix) ))|| q.Name.StartsWith(request.QueueNamePrefix, StringComparison.OrdinalIgnoreCase)))
            .Select(q => q.Url)
            .OrderBy(url => url)
            .ToList());

        var pagedQueues = new PaginatedList<string>(allQueues);

        var (items, nextToken) = pagedQueues.GetPage(
            TokenGenerator, 
(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(841)?(false?1000 :request.MaxResults):(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(840)?(true?1000 :request.MaxResults):(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(842)?            request.MaxResults != 0 :            request.MaxResults == 0 )? 1000 : request.MaxResults)), 
            request.NextToken);

        return Task.FromResult((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(843)?new ListQueuesResponse
{}:new ListQueuesResponse
        {
            QueueUrls = items,
            NextToken = nextToken
        }).SetCommonProperties());

        static string TokenGenerator(string x)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(844)){}else        {
            return Convert.ToBase64String(Encoding.UTF8.GetBytes(x));
        }
return default(string);}    }
return default(Task<ListQueuesResponse>);}
    public Task<ListQueueTagsResponse> ListQueueTagsAsync(ListQueueTagsRequest request,
        CancellationToken cancellationToken = default)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(845)){}else{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(847))    {
        ArgumentNullException.ThrowIfNull(request);
        
        var queueName = GetQueueNameFromUrl(request.QueueUrl);
        if (_bus.Queues.TryGetValue(queueName, out var queue))
        {
            throw new QueueDoesNotExistException("Queue not found.");
        }
        
        return Task.FromResult(new ListQueueTagsResponse
        {
            Tags = new Dictionary<string, string>(queue.Tags)
        }.SetCommonProperties());
    }
else    {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(846)){;}else{        ArgumentNullException.ThrowIfNull(request);
}        
        var queueName = GetQueueNameFromUrl(request.QueueUrl);
        if (!_bus.Queues.TryGetValue(queueName, out var queue))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(848)){}else        {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(849)){;}else{            throw new QueueDoesNotExistException((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(850)?"":"Queue not found."));
}        }
}        
        return Task.FromResult((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(851)?new ListQueueTagsResponse
{}:new ListQueueTagsResponse
        {
            Tags = new Dictionary<string, string>(queue.Tags)
        }).SetCommonProperties());
    }
}return default(Task<ListQueueTagsResponse>);}
    public Task<PurgeQueueResponse> PurgeQueueAsync(string queueUrl, CancellationToken cancellationToken = default)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(852)){}else    {
        return PurgeQueueAsync((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(853)?new PurgeQueueRequest
{}:new PurgeQueueRequest
        {
            QueueUrl = queueUrl
        }), cancellationToken);
    }
return default(Task<PurgeQueueResponse>);}
    public Task<PurgeQueueResponse> PurgeQueueAsync(PurgeQueueRequest request,
        CancellationToken cancellationToken = default)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(854)){}else{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(856))    {
        ArgumentNullException.ThrowIfNull(request);
        
        var queueName = GetQueueNameFromUrl(request.QueueUrl);
        if (_bus.Queues.TryGetValue(queueName, out var queue))
        {
            throw new QueueDoesNotExistException($"Queue {request.QueueUrl} does not exist.");
        }

        while (queue.Messages.Reader.TryRead(out _))
        {
        }
        
        var inflightMessageReceipts = queue.InFlightMessages.Keys.ToList();
        
        foreach (var receipt in inflightMessageReceipts)
        {
            queue.InFlightMessages.Remove(receipt, out var inFlightInfo);
            var (_, expirationHandler) = inFlightInfo;
            expirationHandler.Dispose();
        }

        return Task.FromResult(new PurgeQueueResponse().SetCommonProperties());
    }
else    {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(855)){;}else{        ArgumentNullException.ThrowIfNull(request);
}        
        var queueName = GetQueueNameFromUrl(request.QueueUrl);
        if (!_bus.Queues.TryGetValue(queueName, out var queue))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(857)){}else        {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(858)){;}else{            throw new QueueDoesNotExistException((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(859)?$"":$"Queue {request.QueueUrl} does not exist."));
}        }
}
        while ((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(860)?!(queue.Messages.Reader.TryRead(out _)):queue.Messages.Reader.TryRead(out _)))
        {
        }
        
        var inflightMessageReceipts = queue.InFlightMessages.Keys.ToList();
        
        foreach (var receipt in inflightMessageReceipts)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(861)){}else        {
            queue.InFlightMessages.Remove(receipt, out var inFlightInfo);
            var (_, expirationHandler) = inFlightInfo;
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(862)){;}else{            expirationHandler.Dispose();
}        }
}
        return Task.FromResult(new PurgeQueueResponse().SetCommonProperties());
    }
}return default(Task<PurgeQueueResponse>);}
    public Task<RemovePermissionResponse> RemovePermissionAsync(string queueUrl, string label,
        CancellationToken cancellationToken = default)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(863)){}else    {
        return RemovePermissionAsync((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(864)?new RemovePermissionRequest
{}:new RemovePermissionRequest
        {
            QueueUrl = queueUrl,
            Label = label
        }), cancellationToken);
    }
return default(Task<RemovePermissionResponse>);}
    public Task<RemovePermissionResponse> RemovePermissionAsync(RemovePermissionRequest request,
        CancellationToken cancellationToken = default)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(865)){}else{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(867))    {
        ArgumentNullException.ThrowIfNull(request);
        
        var queueName = GetQueueNameFromUrl(request.QueueUrl);
        if (_bus.Queues.TryGetValue(queueName, out var queue))
        {
            throw new QueueDoesNotExistException($"Queue {request.QueueUrl} does not exist.");
        }

        var policy = queue.Attributes.TryGetValue("Policy", out var policyJson)
            ? Policy.FromJson(policyJson)
            : new Policy($"{queue.Arn}/SQSDefaultPolicy");

        var statementToRemove = policy.Statements.FirstOrDefault(s => s.Id == request.Label);
        if (statementToRemove == null)
        {
            throw new ArgumentException($"Value {request.Label} for parameter Label is invalid. Reason: can't find label.");
        }

        policy.Statements.Remove(statementToRemove);

        if (policy.Statements.Any())
        {
            queue.Attributes["Policy"] = policy.ToJson();
        }
        else
        {
            queue.Attributes.Remove("Policy");
        }
        
        return Task.FromResult(new RemovePermissionResponse().SetCommonProperties());
    }
else    {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(866)){;}else{        ArgumentNullException.ThrowIfNull(request);
}        
        var queueName = GetQueueNameFromUrl(request.QueueUrl);
        if (!_bus.Queues.TryGetValue(queueName, out var queue))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(868)){}else        {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(869)){;}else{            throw new QueueDoesNotExistException((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(870)?$"":$"Queue {request.QueueUrl} does not exist."));
}        }
}
        var policy = queue.Attributes.TryGetValue((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(873)?"":"Policy"), out var policyJson)
            ? Policy.FromJson(policyJson)
            : new Policy((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(874)?$"":$"{queue.Arn}/SQSDefaultPolicy"));

        var statementToRemove = (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(875)?policy.Statements.First(s => s.Id == request.Label):policy.Statements.FirstOrDefault(s => (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(876)?s.Id != request.Label:s.Id == request.Label)));
        if ((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(877)?statementToRemove != null:statementToRemove == null))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(878)){}else        {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(879)){;}else{            throw new ArgumentException((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(880)?$"":$"Value {request.Label} for parameter Label is invalid. Reason: can't find label."));
}        }
}if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(881)){;}else{
        policy.Statements.Remove(statementToRemove);
}
        if ((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(882)?!(policy.Statements.Any()):policy.Statements.Any()))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(884)){}else        {
            queue.Attributes[(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(885)?"":"Policy")] = policy.ToJson();
        }
}        else
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(886)){}else        {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(887)){;}else{            queue.Attributes.Remove((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(888)?"":"Policy"));
}        }
}        
        return Task.FromResult(new RemovePermissionResponse().SetCommonProperties());
    }
}return default(Task<RemovePermissionResponse>);}
    public Task<SendMessageBatchResponse> SendMessageBatchAsync(string queueUrl,
        List<SendMessageBatchRequestEntry> entries,
        CancellationToken cancellationToken = default)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(889)){}else    {
        return SendMessageBatchAsync((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(890)?new SendMessageBatchRequest
{}:new SendMessageBatchRequest
        {
            QueueUrl = queueUrl,
            Entries = entries
        }), cancellationToken);
    }
return default(Task<SendMessageBatchResponse>);}
    public Task<SendMessageBatchResponse> SendMessageBatchAsync(SendMessageBatchRequest request,
        CancellationToken cancellationToken = default)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(891)){}else{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(893))    {
        ArgumentNullException.ThrowIfNull(request);
        
        var queueName = GetQueueNameFromUrl(request.QueueUrl);
        if (_bus.Queues.TryGetValue(queueName, out var queue))
        {
            throw new QueueDoesNotExistException($"Queue {request.QueueUrl} does not exist.");
        }

        var response = new SendMessageBatchResponse
        {
            Successful = [],
            Failed = []
        };

        var totalSize = request.Entries.Sum(e => CalculateMessageSize(e.MessageBody, e.MessageAttributes));
        
        if (totalSize > MaxMessageSize)
        {
            throw new BatchRequestTooLongException(
                $"Batch size ({totalSize} bytes) exceeds the maximum allowed size ({MaxMessageSize} bytes)");
        }
        
        foreach (var entry in request.Entries)
        {
            var message = CreateMessage(entry.MessageBody, entry.MessageAttributes, entry.MessageSystemAttributes);

            if (entry.DelaySeconds > 0)
            {
                message.Attributes["DelaySeconds"] = entry.DelaySeconds.ToString(NumberFormatInfo.InvariantInfo);
                _ = SendDelayedMessageAsync(queue, message, entry.DelaySeconds);
            }
            else
            {
                queue.Messages.Writer.TryWrite(message);
            }

            response.Successful.Add(new SendMessageBatchResultEntry
            {
                Id = entry.Id,
                MessageId = message.MessageId,
                MD5OfMessageBody = message.MD5OfBody
            });
        }
        
        return Task.FromResult(response.SetCommonProperties());
    }
else    {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(892)){;}else{        ArgumentNullException.ThrowIfNull(request);
}        
        var queueName = GetQueueNameFromUrl(request.QueueUrl);
        if (!_bus.Queues.TryGetValue(queueName, out var queue))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(894)){}else        {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(895)){;}else{            throw new QueueDoesNotExistException((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(896)?$"":$"Queue {request.QueueUrl} does not exist."));
}        }
}
        var response = (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(897)?new SendMessageBatchResponse
{}:new SendMessageBatchResponse
        {
            Successful = [],
            Failed = []
        });

        var totalSize = (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(898)?request.Entries.Max(e => CalculateMessageSize(e.MessageBody, e.MessageAttributes)):request.Entries.Sum(e => CalculateMessageSize(e.MessageBody, e.MessageAttributes)));
        
        if ((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(901)?!(totalSize > MaxMessageSize):(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(900)?totalSize >= MaxMessageSize:(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(899)?totalSize < MaxMessageSize:totalSize > MaxMessageSize))))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(902)){}else        {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(903)){;}else{            throw new BatchRequestTooLongException(
(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(904)?$"":                $"Batch size ({totalSize} bytes) exceeds the maximum allowed size ({MaxMessageSize} bytes)"));
}        }
}        
        foreach (var entry in request.Entries)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(905)){}else        {
            var message = CreateMessage(entry.MessageBody, entry.MessageAttributes, entry.MessageSystemAttributes);

            if ((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(908)?!(entry.DelaySeconds > 0):(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(907)?entry.DelaySeconds >= 0:(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(906)?entry.DelaySeconds < 0:entry.DelaySeconds > 0))))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(909)){}else            {
                message.Attributes[(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(910)?"":"DelaySeconds")] = entry.DelaySeconds.ToString(NumberFormatInfo.InvariantInfo);
                _ = SendDelayedMessageAsync(queue, message, entry.DelaySeconds);
            }
}            else
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(911)){}else            {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(912)){;}else{                queue.Messages.Writer.TryWrite(message);
}            }
}
            response.Successful.Add((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(913)?new SendMessageBatchResultEntry
{}:new SendMessageBatchResultEntry
            {
                Id = entry.Id,
                MessageId = message.MessageId,
                MD5OfMessageBody = message.MD5OfBody
            }));
        }
}        
        return Task.FromResult(response.SetCommonProperties());
    }
}return default(Task<SendMessageBatchResponse>);}
    public Task<SetQueueAttributesResponse> SetQueueAttributesAsync(string queueUrl,
        Dictionary<string, string> attributes,
        CancellationToken cancellationToken = default)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(914)){}else    {
        return SetQueueAttributesAsync((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(915)?new SetQueueAttributesRequest
{}:new SetQueueAttributesRequest
        {
            QueueUrl = queueUrl,
            Attributes = attributes
        }), cancellationToken);
    }
return default(Task<SetQueueAttributesResponse>);}
    public Task<SetQueueAttributesResponse> SetQueueAttributesAsync(SetQueueAttributesRequest request,
        CancellationToken cancellationToken = default)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(916)){}else{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(918))    {
        ArgumentNullException.ThrowIfNull(request);
        
        var queueName = GetQueueNameFromUrl(request.QueueUrl);
        if (_bus.Queues.TryGetValue(queueName, out var queue))
        {
            throw new QueueDoesNotExistException($"Queue {request.QueueUrl} does not exist.");
        }
        
        foreach (var (key, value) in request.Attributes)
        {
            queue.Attributes[key] = value;
        }
        
        UpdateQueueProperties(queue);
        
        return Task.FromResult(new SetQueueAttributesResponse
        {
            HttpStatusCode = HttpStatusCode.OK
        }.SetCommonProperties());
    }
else    {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(917)){;}else{        ArgumentNullException.ThrowIfNull(request);
}        
        var queueName = GetQueueNameFromUrl(request.QueueUrl);
        if (!_bus.Queues.TryGetValue(queueName, out var queue))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(919)){}else        {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(920)){;}else{            throw new QueueDoesNotExistException((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(921)?$"":$"Queue {request.QueueUrl} does not exist."));
}        }
}        
        foreach (var (key, value) in request.Attributes)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(922)){}else        {
            queue.Attributes[key] = value;
        }
}if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(923)){;}else{        
        UpdateQueueProperties(queue);
}        
        return Task.FromResult((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(924)?new SetQueueAttributesResponse
{}:new SetQueueAttributesResponse
        {
            HttpStatusCode = HttpStatusCode.OK
        }).SetCommonProperties());
    }
}return default(Task<SetQueueAttributesResponse>);}
    private void ExtractRedrivePolicy(SqsQueueResource queue)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(925)){}else{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(926))    {
        if (!(queue.Attributes.TryGetValue(QueueAttributeName.RedrivePolicy, out var redrivePolicy)))
        {
            var policy = JsonDocument.Parse(redrivePolicy);
            var deadLetterTargetArn = policy.RootElement.GetProperty("deadLetterTargetArn").GetString();
            var maxReceiveCount = 0;
            var maxReceiveCountProperty = policy.RootElement.GetProperty("maxReceiveCount");
            if (maxReceiveCountProperty.ValueKind == JsonValueKind.Number)
            {
                maxReceiveCount = maxReceiveCountProperty.GetInt32();
            }
            else
            {
                var maxReceiveCountString = maxReceiveCountProperty.GetString();
                if (maxReceiveCountString != null)
                {
                    maxReceiveCount = int.Parse(maxReceiveCountString, NumberFormatInfo.InvariantInfo);
                }
            }
            
            if (deadLetterTargetArn != null && maxReceiveCount > 0)
            {
                var deadLetterTargetQueueName = deadLetterTargetArn.Split(':').Last();
                if (!_bus.Queues.TryGetValue(deadLetterTargetQueueName, out var errorQueue))
                {
                    throw new InvalidOperationException("Dead letter queue not found");
                }

                queue.ErrorQueue = errorQueue;
                queue.MaxReceiveCount = maxReceiveCount;
            }
        }
    }
else    {
        if (queue.Attributes.TryGetValue(QueueAttributeName.RedrivePolicy, out var redrivePolicy))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(927)){}else        {
            var policy = JsonDocument.Parse(redrivePolicy);
            var deadLetterTargetArn = policy.RootElement.GetProperty((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(928)?"":"deadLetterTargetArn")).GetString();
            var maxReceiveCount = 0;
            var maxReceiveCountProperty = policy.RootElement.GetProperty((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(929)?"":"maxReceiveCount"));
            if ((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(930)?maxReceiveCountProperty.ValueKind != JsonValueKind.Number:maxReceiveCountProperty.ValueKind == JsonValueKind.Number))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(931)){}else            {
                maxReceiveCount = maxReceiveCountProperty.GetInt32();
            }
}            else
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(932)){}else            {
                var maxReceiveCountString = maxReceiveCountProperty.GetString();
                if ((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(933)?maxReceiveCountString == null:maxReceiveCountString != null))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(934)){}else                {
                    maxReceiveCount = int.Parse(maxReceiveCountString, NumberFormatInfo.InvariantInfo);
                }
}            }
}            
            if ((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(936)?!(deadLetterTargetArn != null && maxReceiveCount > 0):(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(935)?deadLetterTargetArn != null || maxReceiveCount > 0:(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(937)?deadLetterTargetArn == null :deadLetterTargetArn != null )&& (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(939)?maxReceiveCount >= 0:(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(938)?maxReceiveCount < 0:maxReceiveCount > 0)))))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(940)){}else{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(942))            {
                var deadLetterTargetQueueName = deadLetterTargetArn.Split(':').Last();
                if (_bus.Queues.TryGetValue(deadLetterTargetQueueName, out var errorQueue))
                {
                    throw new InvalidOperationException("Dead letter queue not found");
                }

                queue.ErrorQueue = errorQueue;
                queue.MaxReceiveCount = maxReceiveCount;
            }
else            {
                var deadLetterTargetQueueName = (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(941)?deadLetterTargetArn.Split(':').First():deadLetterTargetArn.Split(':').Last());
                if (!_bus.Queues.TryGetValue(deadLetterTargetQueueName, out var errorQueue))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(943)){}else                {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(944)){;}else{                    throw new InvalidOperationException((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(945)?"":"Dead letter queue not found"));
}                }
}
                queue.ErrorQueue = errorQueue;
                queue.MaxReceiveCount = maxReceiveCount;
            }
}}        }
}    }
}}
    public Task<StartMessageMoveTaskResponse> StartMessageMoveTaskAsync(StartMessageMoveTaskRequest request,
        CancellationToken cancellationToken = default)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(946)){}else{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(948))    {
        ArgumentNullException.ThrowIfNull(request);
        
        var sourceQueueName = GetQueueNameFromArn(request.SourceArn);
        if (_bus.Queues.TryGetValue(sourceQueueName, out var sourceQueue))
        {
            throw new ResourceNotFoundException("Source queue not found.");
        }

        if (_bus.MoveTasks.Values
                .Any(t => t.SourceQueue.Arn.Equals(request.SourceArn, StringComparison.OrdinalIgnoreCase) && t.Status == MoveTaskStatus.Running))
        {
            throw new UnsupportedOperationException("Move task already running for the source queue.");
        }

        var deadLetterQueues =
            _bus.Queues.Values
                .Select(q => q.ErrorQueue?.Arn)
                .Where(arn => arn is not null);
        
        if (!deadLetterQueues.Contains(sourceQueue.Arn))
        {
            throw new InvalidOperationException("Source queue is not a dead letter queue.");
        }

        SqsQueueResource? destinationQueue = null;
        if (request.DestinationArn is not null)
        {
            var destinationQueueName = GetQueueNameFromArn(request.DestinationArn);
            if (!_bus.Queues.TryGetValue(destinationQueueName, out destinationQueue))
            {
                throw new ResourceNotFoundException("Destination queue not found.");
            }
        }

        var approximateNumberOfMessages = 
            sourceQueue.Attributes.GetValueOrDefault(QueueAttributeName.ApproximateNumberOfMessages, "0");
        
        var moveTask = new SqsMoveTask
        {
            TaskHandle = Guid.NewGuid().ToString(),
            SourceQueue = sourceQueue,
            DestinationQueue = destinationQueue,
            MaxNumberOfMessagesPerSecond = request.MaxNumberOfMessagesPerSecond,
            ApproximateNumberOfMessagesMoved = 0,
            ApproximateNumberOfMessagesToMove = int.Parse(approximateNumberOfMessages, NumberFormatInfo.InvariantInfo),
            MoveTaskJob = new SqsMoveTaskJob(_bus.TimeProvider, sourceQueue, destinationQueue, _bus, request.MaxNumberOfMessagesPerSecond),
            Status = MoveTaskStatus.Running
        };
        
        _bus.MoveTasks.TryAdd(moveTask.TaskHandle, moveTask);

        return Task.FromResult(new StartMessageMoveTaskResponse
        {
            TaskHandle = moveTask.TaskHandle
        }.SetCommonProperties());
    }
else    {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(947)){;}else{        ArgumentNullException.ThrowIfNull(request);
}        
        var sourceQueueName = GetQueueNameFromArn(request.SourceArn);
        if (!_bus.Queues.TryGetValue(sourceQueueName, out var sourceQueue))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(949)){}else        {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(950)){;}else{            throw new ResourceNotFoundException((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(951)?"":"Source queue not found."));
}        }
}
        if ((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(952)?!(_bus.MoveTasks.Values
                .Any(t => t.SourceQueue.Arn.Equals(request.SourceArn, StringComparison.OrdinalIgnoreCase) && t.Status == MoveTaskStatus.Running)):(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(953)?_bus.MoveTasks.Values
                .All(t => t.SourceQueue.Arn.Equals(request.SourceArn, StringComparison.OrdinalIgnoreCase) && t.Status == MoveTaskStatus.Running):_bus.MoveTasks.Values
                .Any(t => (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(954)?t.SourceQueue.Arn.Equals(request.SourceArn, StringComparison.OrdinalIgnoreCase) || t.Status == MoveTaskStatus.Running:t.SourceQueue.Arn.Equals(request.SourceArn, StringComparison.OrdinalIgnoreCase) && (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(955)?t.Status != MoveTaskStatus.Running:t.Status == MoveTaskStatus.Running))))))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(956)){}else        {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(957)){;}else{            throw new UnsupportedOperationException((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(958)?"":"Move task already running for the source queue."));
}        }
}
        var deadLetterQueues =
            _bus.Queues.Values
                .Select(q => q.ErrorQueue?.Arn)
                .Where(arn => (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(959)?arn is null:arn is not null));
        
        if ((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(960)?deadLetterQueues.Contains(sourceQueue.Arn):!deadLetterQueues.Contains(sourceQueue.Arn)))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(961)){}else        {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(962)){;}else{            throw new InvalidOperationException((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(963)?"":"Source queue is not a dead letter queue."));
}        }
}
        SqsQueueResource? destinationQueue = null;
        if ((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(964)?request.DestinationArn is null:request.DestinationArn is not null))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(965)){}else        {
            var destinationQueueName = GetQueueNameFromArn(request.DestinationArn);
            if ((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(966)?_bus.Queues.TryGetValue(destinationQueueName, out destinationQueue):!_bus.Queues.TryGetValue(destinationQueueName, out destinationQueue)))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(967)){}else            {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(968)){;}else{                throw new ResourceNotFoundException((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(969)?"":"Destination queue not found."));
}            }
}        }
}
        var approximateNumberOfMessages = 
            sourceQueue.Attributes.GetValueOrDefault(QueueAttributeName.ApproximateNumberOfMessages, (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(970)?"":"0"));
        
        var moveTask = new SqsMoveTask
        {
            TaskHandle = Guid.NewGuid().ToString(),
            SourceQueue = sourceQueue,
            DestinationQueue = destinationQueue,
            MaxNumberOfMessagesPerSecond = request.MaxNumberOfMessagesPerSecond,
            ApproximateNumberOfMessagesMoved = 0,
            ApproximateNumberOfMessagesToMove = int.Parse(approximateNumberOfMessages, NumberFormatInfo.InvariantInfo),
            MoveTaskJob = new SqsMoveTaskJob(_bus.TimeProvider, sourceQueue, destinationQueue, _bus, request.MaxNumberOfMessagesPerSecond),
            Status = MoveTaskStatus.Running
        };
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(972)){;}else{        
        _bus.MoveTasks.TryAdd(moveTask.TaskHandle, moveTask);
}
        return Task.FromResult((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(973)?new StartMessageMoveTaskResponse
{}:new StartMessageMoveTaskResponse
        {
            TaskHandle = moveTask.TaskHandle
        }).SetCommonProperties());
    }
}return default(Task<StartMessageMoveTaskResponse>);}
    public Task<TagQueueResponse> TagQueueAsync(TagQueueRequest request, CancellationToken cancellationToken = default)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(974)){}else{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(976))    {
        ArgumentNullException.ThrowIfNull(request);
        
        var queueName = GetQueueNameFromUrl(request.QueueUrl);
        if (_bus.Queues.TryGetValue(queueName, out var queue))
        {
            throw new QueueDoesNotExistException("Queue not found.");
        }
        
        foreach (var tag in request.Tags)
        {
            if (tag.Value is not null)
            {
                queue.Tags[tag.Key] = tag.Value;
            }
        }
        
        return Task.FromResult(new TagQueueResponse().SetCommonProperties());
    }
else    {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(975)){;}else{        ArgumentNullException.ThrowIfNull(request);
}        
        var queueName = GetQueueNameFromUrl(request.QueueUrl);
        if (!_bus.Queues.TryGetValue(queueName, out var queue))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(977)){}else        {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(978)){;}else{            throw new QueueDoesNotExistException((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(979)?"":"Queue not found."));
}        }
}        
        foreach (var tag in request.Tags)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(980)){}else        {
            if ((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(981)?tag.Value is null:tag.Value is not null))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(982)){}else            {
                queue.Tags[tag.Key] = tag.Value;
            }
}        }
}        
        return Task.FromResult(new TagQueueResponse().SetCommonProperties());
    }
}return default(Task<TagQueueResponse>);}
    public Task<UntagQueueResponse> UntagQueueAsync(UntagQueueRequest request,
        CancellationToken cancellationToken = default)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(983)){}else{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(985))    {
        ArgumentNullException.ThrowIfNull(request);
        
        var queueName = GetQueueNameFromUrl(request.QueueUrl);
        if (_bus.Queues.TryGetValue(queueName, out var queue))
        {
            throw new QueueDoesNotExistException("Queue not found.");
        }
        
        foreach (var tagKey in request.TagKeys)
        {
            queue.Tags.Remove(tagKey);
        }
        
        return Task.FromResult(new UntagQueueResponse().SetCommonProperties());
    }
else    {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(984)){;}else{        ArgumentNullException.ThrowIfNull(request);
}        
        var queueName = GetQueueNameFromUrl(request.QueueUrl);
        if (!_bus.Queues.TryGetValue(queueName, out var queue))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(986)){}else        {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(987)){;}else{            throw new QueueDoesNotExistException((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(988)?"":"Queue not found."));
}        }
}        
        foreach (var tagKey in request.TagKeys)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(989)){}else        {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(990)){;}else{            queue.Tags.Remove(tagKey);
}        }
}        
        return Task.FromResult(new UntagQueueResponse().SetCommonProperties());
    }
}return default(Task<UntagQueueResponse>);}
    public Task<AddPermissionResponse> AddPermissionAsync(string queueUrl, string label, List<string> awsAccountIds,
        List<string> actions, CancellationToken cancellationToken)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(991)){}else    {
        return AddPermissionAsync((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(992)?new AddPermissionRequest
{}:new AddPermissionRequest
        {
            QueueUrl = queueUrl,
            Label = label,
            AWSAccountIds = awsAccountIds,
            Actions = actions
        }), cancellationToken);
    }
return default(Task<AddPermissionResponse>);}
    public Task<AddPermissionResponse> AddPermissionAsync(AddPermissionRequest request,
        CancellationToken cancellationToken)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(993)){}else{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(995))    {
        ArgumentNullException.ThrowIfNull(request);
        
        var queueName = GetQueueNameFromUrl(request.QueueUrl);
        if (_bus.Queues.TryGetValue(queueName, out var queue))
        {
            throw new QueueDoesNotExistException("Queue not found.");
        }
        
        var policy = queue.Attributes.TryGetValue("Policy", out var policyJson)
            ? Policy.FromJson(policyJson)
            : new Policy($"{queue.Arn}/SQSDefaultPolicy");

        var statement = new Statement(Statement.StatementEffect.Allow)
        {
            Id = request.Label,
            Actions = request.Actions.Select(action => new ActionIdentifier($"SQS:{action}")).ToList()
        };

        statement.Resources.Add(new Resource(queue.Arn));
        
        foreach (var accountId in request.AWSAccountIds)
        {
            statement.Principals.Add(new Principal($"arn:aws:iam::{accountId}:root"));
        }

        if (policy.CheckIfStatementExists(statement))
        {
            throw new ArgumentException($"Value {request.Label} for parameter Label is invalid. Reason: Already exists.");
        }

        policy.Statements.Add(statement);
        queue.Attributes["Policy"] = policy.ToJson();
        
        return Task.FromResult(new AddPermissionResponse().SetCommonProperties());
    }
else    {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(994)){;}else{        ArgumentNullException.ThrowIfNull(request);
}        
        var queueName = GetQueueNameFromUrl(request.QueueUrl);
        if (!_bus.Queues.TryGetValue(queueName, out var queue))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(996)){}else        {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(997)){;}else{            throw new QueueDoesNotExistException((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(998)?"":"Queue not found."));
}        }
}        
        var policy = queue.Attributes.TryGetValue((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(1001)?"":"Policy"), out var policyJson)
            ? Policy.FromJson(policyJson)
            : new Policy((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(1002)?$"":$"{queue.Arn}/SQSDefaultPolicy"));

        var statement = (StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(1003)?new Statement(Statement.StatementEffect.Allow)
{}:new Statement(Statement.StatementEffect.Allow)
        {
            Id = request.Label,
            Actions = request.Actions.Select(action => new ActionIdentifier((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(1004)?$"":$"SQS:{action}"))).ToList()
        });
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(1005)){;}else{
        statement.Resources.Add(new Resource(queue.Arn));
}        
        foreach (var accountId in request.AWSAccountIds)
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(1006)){}else        {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(1007)){;}else{            statement.Principals.Add(new Principal((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(1008)?$"":$"arn:aws:iam::{accountId}:root")));
}        }
}
        if ((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(1009)?!(policy.CheckIfStatementExists(statement)):policy.CheckIfStatementExists(statement)))
{if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(1010)){}else        {
if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(1011)){;}else{            throw new ArgumentException((StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(1012)?$"":$"Value {request.Label} for parameter Label is invalid. Reason: Already exists."));
}        }
}if(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(1013)){;}else{
        policy.Statements.Add(statement);
}        queue.Attributes[(StrykerJDagWlyLhuvvoy5.MutantControl.IsActive(1014)?"":"Policy")] = policy.ToJson();
        
        return Task.FromResult(new AddPermissionResponse().SetCommonProperties());
    }
}return default(Task<AddPermissionResponse>);}    
    [UnsafeAccessor(UnsafeAccessorKind.Constructor)]
    private static extern SQSPaginatorFactory GetPaginatorFactory(IAmazonSQS client);

    public ISQSPaginatorFactory Paginators => _paginators.Value;
}
[12:29:58 DBG] Compilation successful
[12:29:58 DBG] Injected the mutated assembly file into /Users/stuart.lang/RiderProjects/ConsoleApp9/artifacts/bin/LocalSqsSnsMessaging.Tests.Shared/debug/LocalSqsSnsMessaging.dll
[12:29:58 DBG] Injected the mutated assembly file into /Users/stuart.lang/RiderProjects/ConsoleApp9/artifacts/bin/LocalSqsSnsMessaging.Tests/debug/LocalSqsSnsMessaging.dll
[12:29:58 DBG] Injected the mutated assembly file into /Users/stuart.lang/RiderProjects/ConsoleApp9/artifacts/bin/LocalSqsSnsMessaging.Tests.Verification/debug/LocalSqsSnsMessaging.dll
[12:29:58 INF] 1070 mutants created
[12:29:58 INF] Capture mutant coverage using 'CoverageBasedTest' mode.
[12:29:58 VRB] Runner 1: testing assembly Buildalyzer.AnalyzerResult.
[12:29:59 VRB] Runner 1: [Error] Testhost process for source(s) '/Users/stuart.lang/RiderProjects/ConsoleApp9/artifacts/bin/LocalSqsSnsMessaging.Tests.Shared/debug/LocalSqsSnsMessaging.Tests.Shared.dll' exited with error: . Please check the diagnostic logs for more information.
[12:29:59 VRB] Runner 1: [Error] Testhost process for source(s) '/Users/stuart.lang/RiderProjects/ConsoleApp9/artifacts/bin/LocalSqsSnsMessaging.Tests.Shared/debug/LocalSqsSnsMessaging.Tests.Shared.dll' exited with error: . Please check the diagnostic logs for more information.
[12:29:59 DBG] Runner 1: Received testrun complete.
[12:29:59 DBG] Runner 1: Test session finished.
[12:29:59 VRB] Runner 1: testing assembly Buildalyzer.AnalyzerResult.
[12:29:59 VRB] Runner 1: [Debug] [xUnit.net 00:00:00.00] xUnit.net VSTest Adapter v3.0.0-pre.42+8174918c5e (64-bit .NET 8.0.8)
[12:29:59 VRB] Runner 1: [Debug] [xUnit.net 00:00:00.14]   Discovering: LocalSqsSnsMessaging.Tests
[12:29:59 VRB] Runner 1: [Debug] [xUnit.net 00:00:00.30]   Discovered:  LocalSqsSnsMessaging.Tests
[12:29:59 VRB] Runner 1: [Debug] [xUnit.net 00:00:00.45]   Starting:    LocalSqsSnsMessaging.Tests
[12:30:00 VRB] Runner 1: [Debug] [xUnit.net 00:00:00.77]   Finished:    LocalSqsSnsMessaging.Tests
[12:30:00 DBG] Runner 1: Received testrun complete.
[12:30:00 DBG] Runner 1: Test session finished.
[12:30:00 VRB] Runner 1: testing assembly Buildalyzer.AnalyzerResult.
[12:30:00 VRB] Runner 1: [Debug] [xUnit.net 00:00:00.00] xUnit.net VSTest Adapter v3.0.0-pre.42+8174918c5e (64-bit .NET 8.0.8)
[12:30:00 VRB] Runner 1: [Debug] [xUnit.net 00:00:00.12]   Discovering: LocalSqsSnsMessaging.Tests.Verification
[12:30:00 VRB] Runner 1: [Debug] [xUnit.net 00:00:00.27]   Discovered:  LocalSqsSnsMessaging.Tests.Verification
[12:30:00 VRB] Runner 1: [Warning] No test matches the given testcase filter `(FullyQualifiedName~LocalSqsSnsMessaging.Tests.LocalAwsMessaging)` in /Users/stuart.lang/RiderProjects/ConsoleApp9/artifacts/bin/LocalSqsSnsMessaging.Tests.Verification/debug/LocalSqsSnsMessaging.Tests.Verification.dll
[12:30:00 DBG] Runner 1: Received testrun complete.
[12:30:00 DBG] Runner 1: Test session finished.
[12:30:00 DBG] VsTestRunner: Coverage collector log: Did not find type StrykerJDagWlyLhuvvoy5.MutantControl. Mutated assembly may not be covered by any test..
[12:30:00 DBG] Mutant 0 is not covered by any test.
[12:30:00 DBG] Mutant 1 is not covered by any test.
[12:30:00 DBG] Mutant 2 is not covered by any test.
[12:30:00 DBG] Mutant 3 is not covered by any test.
[12:30:00 DBG] Mutant 4 is not covered by any test.
[12:30:00 DBG] Mutant 5 is not covered by any test.
[12:30:00 DBG] Mutant 6 is not covered by any test.
[12:30:00 DBG] Mutant 7 is not covered by any test.
[12:30:00 DBG] Mutant 8 is not covered by any test.
[12:30:00 DBG] Mutant 9 is not covered by any test.
[12:30:00 DBG] Mutant 10 is not covered by any test.
[12:30:00 DBG] Mutant 11 is not covered by any test.
[12:30:00 DBG] Mutant 12 is not covered by any test.
[12:30:00 DBG] Mutant 13 is not covered by any test.
[12:30:00 DBG] Mutant 14 is not covered by any test.
[12:30:00 DBG] Mutant 15 is not covered by any test.
[12:30:00 DBG] Mutant 16 is not covered by any test.
[12:30:00 DBG] Mutant 17 is not covered by any test.
[12:30:00 DBG] Mutant 18 is not covered by any test.
[12:30:00 DBG] Mutant 19 is not covered by any test.
[12:30:00 DBG] Mutant 20 is not covered by any test.
[12:30:00 DBG] Mutant 21 will be tested against (0) tests.
[12:30:00 DBG] Mutant 22 is not covered by any test.
[12:30:00 DBG] Mutant 23 is not covered by any test.
[12:30:00 DBG] Mutant 24 is not covered by any test.
[12:30:00 DBG] Mutant 25 will be tested against (0) tests.
[12:30:00 DBG] Mutant 26 is not covered by any test.
[12:30:00 DBG] Mutant 27 is not covered by any test.
[12:30:00 DBG] Mutant 28 is not covered by any test.
[12:30:00 DBG] Mutant 29 is not covered by any test.
[12:30:00 DBG] Mutant 30 is not covered by any test.
[12:30:00 DBG] Mutant 31 is not covered by any test.
[12:30:00 DBG] Mutant 32 is not covered by any test.
[12:30:00 DBG] Mutant 33 is not covered by any test.
[12:30:00 DBG] Mutant 34 is not covered by any test.
[12:30:00 DBG] Mutant 35 is not covered by any test.
[12:30:00 DBG] Mutant 36 is not covered by any test.
[12:30:00 DBG] Mutant 37 is not covered by any test.
[12:30:00 DBG] Mutant 38 is not covered by any test.
[12:30:00 DBG] Mutant 39 is not covered by any test.
[12:30:00 DBG] Mutant 40 is not covered by any test.
[12:30:00 DBG] Mutant 41 is not covered by any test.
[12:30:00 DBG] Mutant 42 is not covered by any test.
[12:30:00 DBG] Mutant 43 is not covered by any test.
[12:30:00 DBG] Mutant 44 is not covered by any test.
[12:30:00 DBG] Mutant 45 is not covered by any test.
[12:30:00 DBG] Mutant 46 is not covered by any test.
[12:30:00 DBG] Mutant 47 is not covered by any test.
[12:30:00 DBG] Mutant 48 is not covered by any test.
[12:30:00 DBG] Mutant 49 is not covered by any test.
[12:30:00 DBG] Mutant 50 is not covered by any test.
[12:30:00 DBG] Mutant 51 is not covered by any test.
[12:30:00 DBG] Mutant 52 is not covered by any test.
[12:30:00 DBG] Mutant 53 is not covered by any test.
[12:30:00 DBG] Mutant 54 is not covered by any test.
[12:30:00 DBG] Mutant 55 is not covered by any test.
[12:30:00 DBG] Mutant 56 is not covered by any test.
[12:30:00 DBG] Mutant 57 is not covered by any test.
[12:30:00 DBG] Mutant 58 is not covered by any test.
[12:30:00 DBG] Mutant 59 is not covered by any test.
[12:30:00 DBG] Mutant 60 is not covered by any test.
[12:30:00 DBG] Mutant 61 is not covered by any test.
[12:30:00 DBG] Mutant 62 is not covered by any test.
[12:30:00 DBG] Mutant 63 is not covered by any test.
[12:30:00 DBG] Mutant 64 is not covered by any test.
[12:30:00 DBG] Mutant 65 is not covered by any test.
[12:30:00 DBG] Mutant 66 is not covered by any test.
[12:30:00 DBG] Mutant 67 is not covered by any test.
[12:30:00 DBG] Mutant 68 is not covered by any test.
[12:30:00 DBG] Mutant 69 is not covered by any test.
[12:30:00 DBG] Mutant 70 is not covered by any test.
[12:30:00 DBG] Mutant 71 is not covered by any test.
[12:30:00 DBG] Mutant 72 will be tested against (0) tests.
[12:30:00 DBG] Mutant 73 is not covered by any test.
[12:30:00 DBG] Mutant 74 is not covered by any test.
[12:30:00 DBG] Mutant 75 is not covered by any test.
[12:30:00 DBG] Mutant 76 is not covered by any test.
[12:30:00 DBG] Mutant 77 is not covered by any test.
[12:30:00 DBG] Mutant 78 is not covered by any test.
[12:30:00 DBG] Mutant 79 is not covered by any test.
[12:30:00 DBG] Mutant 80 is not covered by any test.
[12:30:00 DBG] Mutant 81 is not covered by any test.
[12:30:00 DBG] Mutant 82 is not covered by any test.
[12:30:00 DBG] Mutant 83 is not covered by any test.
[12:30:00 DBG] Mutant 84 is not covered by any test.
[12:30:00 DBG] Mutant 85 is not covered by any test.
[12:30:00 DBG] Mutant 86 is not covered by any test.
[12:30:00 DBG] Mutant 87 is not covered by any test.
[12:30:00 DBG] Mutant 88 is not covered by any test.
[12:30:00 DBG] Mutant 89 is not covered by any test.
[12:30:00 DBG] Mutant 90 is not covered by any test.
[12:30:00 DBG] Mutant 91 is not covered by any test.
[12:30:00 DBG] Mutant 92 is not covered by any test.
[12:30:00 DBG] Mutant 93 is not covered by any test.
[12:30:00 DBG] Mutant 94 is not covered by any test.
[12:30:00 DBG] Mutant 95 is not covered by any test.
[12:30:00 DBG] Mutant 96 is not covered by any test.
[12:30:00 DBG] Mutant 97 is not covered by any test.
[12:30:00 DBG] Mutant 98 is not covered by any test.
[12:30:00 DBG] Mutant 99 is not covered by any test.
[12:30:00 DBG] Mutant 100 is not covered by any test.
[12:30:00 DBG] Mutant 101 is not covered by any test.
[12:30:00 DBG] Mutant 102 is not covered by any test.
[12:30:00 DBG] Mutant 103 is not covered by any test.
[12:30:00 DBG] Mutant 104 is not covered by any test.
[12:30:00 DBG] Mutant 105 is not covered by any test.
[12:30:00 DBG] Mutant 106 is not covered by any test.
[12:30:00 DBG] Mutant 107 is not covered by any test.
[12:30:00 DBG] Mutant 108 is not covered by any test.
[12:30:00 DBG] Mutant 109 is not covered by any test.
[12:30:00 DBG] Mutant 110 is not covered by any test.
[12:30:00 DBG] Mutant 111 is not covered by any test.
[12:30:00 DBG] Mutant 112 is not covered by any test.
[12:30:00 DBG] Mutant 113 is not covered by any test.
[12:30:00 DBG] Mutant 114 is not covered by any test.
[12:30:00 DBG] Mutant 115 is not covered by any test.
[12:30:00 DBG] Mutant 116 is not covered by any test.
[12:30:00 DBG] Mutant 117 is not covered by any test.
[12:30:00 DBG] Mutant 118 is not covered by any test.
[12:30:00 DBG] Mutant 119 is not covered by any test.
[12:30:00 DBG] Mutant 120 is not covered by any test.
[12:30:00 DBG] Mutant 121 is not covered by any test.
[12:30:00 DBG] Mutant 122 is not covered by any test.
[12:30:00 DBG] Mutant 123 is not covered by any test.
[12:30:00 DBG] Mutant 124 is not covered by any test.
[12:30:00 DBG] Mutant 125 is not covered by any test.
[12:30:00 DBG] Mutant 126 is not covered by any test.
[12:30:00 DBG] Mutant 127 is not covered by any test.
[12:30:00 DBG] Mutant 128 is not covered by any test.
[12:30:00 DBG] Mutant 129 is not covered by any test.
[12:30:00 DBG] Mutant 130 is not covered by any test.
[12:30:00 DBG] Mutant 131 is not covered by any test.
[12:30:00 DBG] Mutant 132 is not covered by any test.
[12:30:00 DBG] Mutant 133 is not covered by any test.
[12:30:00 DBG] Mutant 134 is not covered by any test.
[12:30:00 DBG] Mutant 135 is not covered by any test.
[12:30:00 DBG] Mutant 136 is not covered by any test.
[12:30:00 DBG] Mutant 137 is not covered by any test.
[12:30:00 DBG] Mutant 138 is not covered by any test.
[12:30:00 DBG] Mutant 139 is not covered by any test.
[12:30:00 DBG] Mutant 140 is not covered by any test.
[12:30:00 DBG] Mutant 141 is not covered by any test.
[12:30:00 DBG] Mutant 142 is not covered by any test.
[12:30:00 DBG] Mutant 143 is not covered by any test.
[12:30:00 DBG] Mutant 144 is not covered by any test.
[12:30:00 DBG] Mutant 145 is not covered by any test.
[12:30:00 DBG] Mutant 146 is not covered by any test.
[12:30:00 DBG] Mutant 147 is not covered by any test.
[12:30:00 DBG] Mutant 148 is not covered by any test.
[12:30:00 DBG] Mutant 149 is not covered by any test.
[12:30:00 DBG] Mutant 150 is not covered by any test.
[12:30:00 DBG] Mutant 151 is not covered by any test.
[12:30:00 DBG] Mutant 152 is not covered by any test.
[12:30:00 DBG] Mutant 153 is not covered by any test.
[12:30:00 DBG] Mutant 154 is not covered by any test.
[12:30:00 DBG] Mutant 155 is not covered by any test.
[12:30:00 DBG] Mutant 156 is not covered by any test.
[12:30:00 DBG] Mutant 157 is not covered by any test.
[12:30:00 DBG] Mutant 158 is not covered by any test.
[12:30:00 DBG] Mutant 159 is not covered by any test.
[12:30:00 DBG] Mutant 160 is not covered by any test.
[12:30:00 DBG] Mutant 161 is not covered by any test.
[12:30:00 DBG] Mutant 162 is not covered by any test.
[12:30:00 DBG] Mutant 163 is not covered by any test.
[12:30:00 DBG] Mutant 164 is not covered by any test.
[12:30:00 DBG] Mutant 165 is not covered by any test.
[12:30:00 DBG] Mutant 166 is not covered by any test.
[12:30:00 DBG] Mutant 167 is not covered by any test.
[12:30:00 DBG] Mutant 168 is not covered by any test.
[12:30:00 DBG] Mutant 169 is not covered by any test.
[12:30:00 DBG] Mutant 170 is not covered by any test.
[12:30:00 DBG] Mutant 171 is not covered by any test.
[12:30:00 DBG] Mutant 172 is not covered by any test.
[12:30:00 DBG] Mutant 173 is not covered by any test.
[12:30:00 DBG] Mutant 174 is not covered by any test.
[12:30:00 DBG] Mutant 175 is not covered by any test.
[12:30:00 DBG] Mutant 176 is not covered by any test.
[12:30:00 DBG] Mutant 177 is not covered by any test.
[12:30:00 DBG] Mutant 178 is not covered by any test.
[12:30:00 DBG] Mutant 179 is not covered by any test.
[12:30:00 DBG] Mutant 180 is not covered by any test.
[12:30:00 DBG] Mutant 181 is not covered by any test.
[12:30:00 DBG] Mutant 182 is not covered by any test.
[12:30:00 DBG] Mutant 183 is not covered by any test.
[12:30:00 DBG] Mutant 184 is not covered by any test.
[12:30:00 DBG] Mutant 185 is not covered by any test.
[12:30:00 DBG] Mutant 186 is not covered by any test.
[12:30:00 DBG] Mutant 187 is not covered by any test.
[12:30:00 DBG] Mutant 188 will be tested against (0) tests.
[12:30:00 DBG] Mutant 189 will be tested against (0) tests.
[12:30:00 DBG] Mutant 190 is not covered by any test.
[12:30:00 DBG] Mutant 191 is not covered by any test.
[12:30:00 DBG] Mutant 192 is not covered by any test.
[12:30:00 DBG] Mutant 193 is not covered by any test.
[12:30:00 DBG] Mutant 194 is not covered by any test.
[12:30:00 DBG] Mutant 195 is not covered by any test.
[12:30:00 DBG] Mutant 196 is not covered by any test.
[12:30:00 DBG] Mutant 197 is not covered by any test.
[12:30:00 DBG] Mutant 198 is not covered by any test.
[12:30:00 DBG] Mutant 199 is not covered by any test.
[12:30:00 DBG] Mutant 200 will be tested against (0) tests.
[12:30:00 DBG] Mutant 201 is not covered by any test.
[12:30:00 DBG] Mutant 202 is not covered by any test.
[12:30:00 DBG] Mutant 203 is not covered by any test.
[12:30:00 DBG] Mutant 204 is not covered by any test.
[12:30:00 DBG] Mutant 205 is not covered by any test.
[12:30:00 DBG] Mutant 206 is not covered by any test.
[12:30:00 DBG] Mutant 207 is not covered by any test.
[12:30:00 DBG] Mutant 208 is not covered by any test.
[12:30:00 DBG] Mutant 209 is not covered by any test.
[12:30:00 DBG] Mutant 210 is not covered by any test.
[12:30:00 DBG] Mutant 211 is not covered by any test.
[12:30:00 DBG] Mutant 212 is not covered by any test.
[12:30:00 DBG] Mutant 213 is not covered by any test.
[12:30:00 DBG] Mutant 214 is not covered by any test.
[12:30:00 DBG] Mutant 215 is not covered by any test.
[12:30:00 DBG] Mutant 216 is not covered by any test.
[12:30:00 DBG] Mutant 217 is not covered by any test.
[12:30:00 DBG] Mutant 218 is not covered by any test.
[12:30:00 DBG] Mutant 219 is not covered by any test.
[12:30:00 DBG] Mutant 220 is not covered by any test.
[12:30:00 DBG] Mutant 221 is not covered by any test.
[12:30:00 DBG] Mutant 222 is not covered by any test.
[12:30:00 DBG] Mutant 223 is not covered by any test.
[12:30:00 DBG] Mutant 224 is not covered by any test.
[12:30:00 DBG] Mutant 225 is not covered by any test.
[12:30:00 DBG] Mutant 226 is not covered by any test.
[12:30:00 DBG] Mutant 227 is not covered by any test.
[12:30:00 DBG] Mutant 228 is not covered by any test.
[12:30:00 DBG] Mutant 229 is not covered by any test.
[12:30:00 DBG] Mutant 230 is not covered by any test.
[12:30:00 DBG] Mutant 231 is not covered by any test.
[12:30:00 DBG] Mutant 232 is not covered by any test.
[12:30:00 DBG] Mutant 233 is not covered by any test.
[12:30:00 DBG] Mutant 234 is not covered by any test.
[12:30:00 DBG] Mutant 235 is not covered by any test.
[12:30:00 DBG] Mutant 236 is not covered by any test.
[12:30:00 DBG] Mutant 237 is not covered by any test.
[12:30:00 DBG] Mutant 238 is not covered by any test.
[12:30:00 DBG] Mutant 239 is not covered by any test.
[12:30:00 DBG] Mutant 240 is not covered by any test.
[12:30:00 DBG] Mutant 241 is not covered by any test.
[12:30:00 DBG] Mutant 242 is not covered by any test.
[12:30:00 DBG] Mutant 243 is not covered by any test.
[12:30:00 DBG] Mutant 244 is not covered by any test.
[12:30:00 DBG] Mutant 245 is not covered by any test.
[12:30:00 DBG] Mutant 246 is not covered by any test.
[12:30:00 DBG] Mutant 247 is not covered by any test.
[12:30:00 DBG] Mutant 248 is not covered by any test.
[12:30:00 DBG] Mutant 249 is not covered by any test.
[12:30:00 DBG] Mutant 250 will be tested against (0) tests.
[12:30:00 DBG] Mutant 251 will be tested against (0) tests.
[12:30:00 DBG] Mutant 252 is not covered by any test.
[12:30:00 DBG] Mutant 253 will be tested against (0) tests.
[12:30:00 DBG] Mutant 254 will be tested against (0) tests.
[12:30:00 DBG] Mutant 255 is not covered by any test.
[12:30:00 DBG] Mutant 256 is not covered by any test.
[12:30:00 DBG] Mutant 257 will be tested against (0) tests.
[12:30:00 DBG] Mutant 258 is not covered by any test.
[12:30:00 DBG] Mutant 259 is not covered by any test.
[12:30:00 DBG] Mutant 260 is not covered by any test.
[12:30:00 DBG] Mutant 261 is not covered by any test.
[12:30:00 DBG] Mutant 262 is not covered by any test.
[12:30:00 DBG] Mutant 263 is not covered by any test.
[12:30:00 DBG] Mutant 264 is not covered by any test.
[12:30:00 DBG] Mutant 265 is not covered by any test.
[12:30:00 DBG] Mutant 266 is not covered by any test.
[12:30:00 DBG] Mutant 267 is not covered by any test.
[12:30:00 DBG] Mutant 268 is not covered by any test.
[12:30:00 DBG] Mutant 269 is not covered by any test.
[12:30:00 DBG] Mutant 270 is not covered by any test.
[12:30:00 DBG] Mutant 271 is not covered by any test.
[12:30:00 DBG] Mutant 272 is not covered by any test.
[12:30:00 DBG] Mutant 273 is not covered by any test.
[12:30:00 DBG] Mutant 274 is not covered by any test.
[12:30:00 DBG] Mutant 275 is not covered by any test.
[12:30:00 DBG] Mutant 276 is not covered by any test.
[12:30:00 DBG] Mutant 277 is not covered by any test.
[12:30:00 DBG] Mutant 278 is not covered by any test.
[12:30:00 DBG] Mutant 279 is not covered by any test.
[12:30:00 DBG] Mutant 280 is not covered by any test.
[12:30:00 DBG] Mutant 281 is not covered by any test.
[12:30:00 DBG] Mutant 282 is not covered by any test.
[12:30:00 DBG] Mutant 283 is not covered by any test.
[12:30:00 DBG] Mutant 284 is not covered by any test.
[12:30:00 DBG] Mutant 285 is not covered by any test.
[12:30:00 DBG] Mutant 286 is not covered by any test.
[12:30:00 DBG] Mutant 287 is not covered by any test.
[12:30:00 DBG] Mutant 288 is not covered by any test.
[12:30:00 DBG] Mutant 289 is not covered by any test.
[12:30:00 DBG] Mutant 290 is not covered by any test.
[12:30:00 DBG] Mutant 291 is not covered by any test.
[12:30:00 DBG] Mutant 292 is not covered by any test.
[12:30:00 DBG] Mutant 293 is not covered by any test.
[12:30:00 DBG] Mutant 294 is not covered by any test.
[12:30:00 DBG] Mutant 295 is not covered by any test.
[12:30:00 DBG] Mutant 296 is not covered by any test.
[12:30:00 DBG] Mutant 297 is not covered by any test.
[12:30:00 DBG] Mutant 298 is not covered by any test.
[12:30:00 DBG] Mutant 299 is not covered by any test.
[12:30:00 DBG] Mutant 300 is not covered by any test.
[12:30:00 DBG] Mutant 301 is not covered by any test.
[12:30:00 DBG] Mutant 302 is not covered by any test.
[12:30:00 DBG] Mutant 303 is not covered by any test.
[12:30:00 DBG] Mutant 304 is not covered by any test.
[12:30:00 DBG] Mutant 305 is not covered by any test.
[12:30:00 DBG] Mutant 306 is not covered by any test.
[12:30:00 DBG] Mutant 307 will be tested against (0) tests.
[12:30:00 DBG] Mutant 308 will be tested against (0) tests.
[12:30:00 DBG] Mutant 309 is not covered by any test.
[12:30:00 DBG] Mutant 310 is not covered by any test.
[12:30:00 DBG] Mutant 311 is not covered by any test.
[12:30:00 DBG] Mutant 312 is not covered by any test.
[12:30:00 DBG] Mutant 313 is not covered by any test.
[12:30:00 DBG] Mutant 314 is not covered by any test.
[12:30:00 DBG] Mutant 315 is not covered by any test.
[12:30:00 DBG] Mutant 316 is not covered by any test.
[12:30:00 DBG] Mutant 317 is not covered by any test.
[12:30:00 DBG] Mutant 318 is not covered by any test.
[12:30:00 DBG] Mutant 319 is not covered by any test.
[12:30:00 DBG] Mutant 320 is not covered by any test.
[12:30:00 DBG] Mutant 321 will be tested against (0) tests.
[12:30:00 DBG] Mutant 322 will be tested against (0) tests.
[12:30:00 DBG] Mutant 323 is not covered by any test.
[12:30:00 DBG] Mutant 324 is not covered by any test.
[12:30:00 DBG] Mutant 325 is not covered by any test.
[12:30:00 DBG] Mutant 326 is not covered by any test.
[12:30:00 DBG] Mutant 327 is not covered by any test.
[12:30:00 DBG] Mutant 328 is not covered by any test.
[12:30:00 DBG] Mutant 329 is not covered by any test.
[12:30:00 DBG] Mutant 330 is not covered by any test.
[12:30:00 DBG] Mutant 331 is not covered by any test.
[12:30:00 DBG] Mutant 332 is not covered by any test.
[12:30:00 DBG] Mutant 333 is not covered by any test.
[12:30:00 DBG] Mutant 334 is not covered by any test.
[12:30:00 DBG] Mutant 335 is not covered by any test.
[12:30:00 DBG] Mutant 336 is not covered by any test.
[12:30:00 DBG] Mutant 337 will be tested against (all) tests.
[12:30:00 DBG] Mutant 338 is not covered by any test.
[12:30:00 DBG] Mutant 339 is not covered by any test.
[12:30:00 DBG] Mutant 340 is not covered by any test.
[12:30:00 DBG] Mutant 341 is not covered by any test.
[12:30:00 DBG] Mutant 342 is not covered by any test.
[12:30:00 DBG] Mutant 343 is not covered by any test.
[12:30:00 DBG] Mutant 344 is not covered by any test.
[12:30:00 DBG] Mutant 345 is not covered by any test.
[12:30:00 DBG] Mutant 346 is not covered by any test.
[12:30:00 DBG] Mutant 347 is not covered by any test.
[12:30:00 DBG] Mutant 348 is not covered by any test.
[12:30:00 DBG] Mutant 349 is not covered by any test.
[12:30:00 DBG] Mutant 350 is not covered by any test.
[12:30:00 DBG] Mutant 351 is not covered by any test.
[12:30:00 DBG] Mutant 352 is not covered by any test.
[12:30:00 DBG] Mutant 353 is not covered by any test.
[12:30:00 DBG] Mutant 354 is not covered by any test.
[12:30:00 DBG] Mutant 355 is not covered by any test.
[12:30:00 DBG] Mutant 356 is not covered by any test.
[12:30:00 DBG] Mutant 357 is not covered by any test.
[12:30:00 DBG] Mutant 358 is not covered by any test.
[12:30:00 DBG] Mutant 359 is not covered by any test.
[12:30:00 DBG] Mutant 360 is not covered by any test.
[12:30:00 DBG] Mutant 361 is not covered by any test.
[12:30:00 DBG] Mutant 362 is not covered by any test.
[12:30:00 DBG] Mutant 363 is not covered by any test.
[12:30:00 DBG] Mutant 364 is not covered by any test.
[12:30:00 DBG] Mutant 365 is not covered by any test.
[12:30:00 DBG] Mutant 366 is not covered by any test.
[12:30:00 DBG] Mutant 367 is not covered by any test.
[12:30:00 DBG] Mutant 368 is not covered by any test.
[12:30:00 DBG] Mutant 369 is not covered by any test.
[12:30:00 DBG] Mutant 370 is not covered by any test.
[12:30:00 DBG] Mutant 371 is not covered by any test.
[12:30:00 DBG] Mutant 372 is not covered by any test.
[12:30:00 DBG] Mutant 373 is not covered by any test.
[12:30:00 DBG] Mutant 374 is not covered by any test.
[12:30:00 DBG] Mutant 375 is not covered by any test.
[12:30:00 DBG] Mutant 376 is not covered by any test.
[12:30:00 DBG] Mutant 377 is not covered by any test.
[12:30:00 DBG] Mutant 378 is not covered by any test.
[12:30:00 DBG] Mutant 379 is not covered by any test.
[12:30:00 DBG] Mutant 380 is not covered by any test.
[12:30:00 DBG] Mutant 381 is not covered by any test.
[12:30:00 DBG] Mutant 382 is not covered by any test.
[12:30:00 DBG] Mutant 383 is not covered by any test.
[12:30:00 DBG] Mutant 384 is not covered by any test.
[12:30:00 DBG] Mutant 385 is not covered by any test.
[12:30:00 DBG] Mutant 386 is not covered by any test.
[12:30:00 DBG] Mutant 387 is not covered by any test.
[12:30:00 DBG] Mutant 388 is not covered by any test.
[12:30:00 DBG] Mutant 389 is not covered by any test.
[12:30:00 DBG] Mutant 390 is not covered by any test.
[12:30:00 DBG] Mutant 391 is not covered by any test.
[12:30:00 DBG] Mutant 392 is not covered by any test.
[12:30:00 DBG] Mutant 393 is not covered by any test.
[12:30:00 DBG] Mutant 394 is not covered by any test.
[12:30:00 DBG] Mutant 395 is not covered by any test.
[12:30:00 DBG] Mutant 396 is not covered by any test.
[12:30:00 DBG] Mutant 397 is not covered by any test.
[12:30:00 DBG] Mutant 398 is not covered by any test.
[12:30:00 DBG] Mutant 399 is not covered by any test.
[12:30:00 DBG] Mutant 400 is not covered by any test.
[12:30:00 DBG] Mutant 401 is not covered by any test.
[12:30:00 DBG] Mutant 402 is not covered by any test.
[12:30:00 DBG] Mutant 403 is not covered by any test.
[12:30:00 DBG] Mutant 404 is not covered by any test.
[12:30:00 DBG] Mutant 405 is not covered by any test.
[12:30:00 DBG] Mutant 406 is not covered by any test.
[12:30:00 DBG] Mutant 407 is not covered by any test.
[12:30:00 DBG] Mutant 408 is not covered by any test.
[12:30:00 DBG] Mutant 409 will be tested against (0) tests.
[12:30:00 DBG] Mutant 410 is not covered by any test.
[12:30:00 DBG] Mutant 411 is not covered by any test.
[12:30:00 DBG] Mutant 412 will be tested against (0) tests.
[12:30:00 DBG] Mutant 413 is not covered by any test.
[12:30:00 DBG] Mutant 414 is not covered by any test.
[12:30:00 DBG] Mutant 415 is not covered by any test.
[12:30:00 DBG] Mutant 416 is not covered by any test.
[12:30:00 DBG] Mutant 417 is not covered by any test.
[12:30:00 DBG] Mutant 418 is not covered by any test.
[12:30:00 DBG] Mutant 419 is not covered by any test.
[12:30:00 DBG] Mutant 420 is not covered by any test.
[12:30:00 DBG] Mutant 421 is not covered by any test.
[12:30:00 DBG] Mutant 422 is not covered by any test.
[12:30:00 DBG] Mutant 423 is not covered by any test.
[12:30:00 DBG] Mutant 424 is not covered by any test.
[12:30:00 DBG] Mutant 425 is not covered by any test.
[12:30:00 DBG] Mutant 426 is not covered by any test.
[12:30:00 DBG] Mutant 427 is not covered by any test.
[12:30:00 DBG] Mutant 428 is not covered by any test.
[12:30:00 DBG] Mutant 429 is not covered by any test.
[12:30:00 DBG] Mutant 430 is not covered by any test.
[12:30:00 DBG] Mutant 431 is not covered by any test.
[12:30:00 DBG] Mutant 432 is not covered by any test.
[12:30:00 DBG] Mutant 433 is not covered by any test.
[12:30:00 DBG] Mutant 434 is not covered by any test.
[12:30:00 DBG] Mutant 435 is not covered by any test.
[12:30:00 DBG] Mutant 436 is not covered by any test.
[12:30:00 DBG] Mutant 437 is not covered by any test.
[12:30:00 DBG] Mutant 438 is not covered by any test.
[12:30:00 DBG] Mutant 439 is not covered by any test.
[12:30:00 DBG] Mutant 440 is not covered by any test.
[12:30:00 DBG] Mutant 441 is not covered by any test.
[12:30:00 DBG] Mutant 442 is not covered by any test.
[12:30:00 DBG] Mutant 443 is not covered by any test.
[12:30:00 DBG] Mutant 444 is not covered by any test.
[12:30:00 DBG] Mutant 445 is not covered by any test.
[12:30:00 DBG] Mutant 446 is not covered by any test.
[12:30:00 DBG] Mutant 447 is not covered by any test.
[12:30:00 DBG] Mutant 448 is not covered by any test.
[12:30:00 DBG] Mutant 449 is not covered by any test.
[12:30:00 DBG] Mutant 450 is not covered by any test.
[12:30:00 DBG] Mutant 451 is not covered by any test.
[12:30:00 DBG] Mutant 452 is not covered by any test.
[12:30:00 DBG] Mutant 453 is not covered by any test.
[12:30:00 DBG] Mutant 454 is not covered by any test.
[12:30:00 DBG] Mutant 455 is not covered by any test.
[12:30:00 DBG] Mutant 456 is not covered by any test.
[12:30:00 DBG] Mutant 457 is not covered by any test.
[12:30:00 DBG] Mutant 458 is not covered by any test.
[12:30:00 DBG] Mutant 459 is not covered by any test.
[12:30:00 DBG] Mutant 460 is not covered by any test.
[12:30:00 DBG] Mutant 461 is not covered by any test.
[12:30:00 DBG] Mutant 462 is not covered by any test.
[12:30:00 DBG] Mutant 463 is not covered by any test.
[12:30:00 DBG] Mutant 464 is not covered by any test.
[12:30:00 DBG] Mutant 465 is not covered by any test.
[12:30:00 DBG] Mutant 466 is not covered by any test.
[12:30:00 DBG] Mutant 467 is not covered by any test.
[12:30:00 DBG] Mutant 468 is not covered by any test.
[12:30:00 DBG] Mutant 469 is not covered by any test.
[12:30:00 DBG] Mutant 470 is not covered by any test.
[12:30:00 DBG] Mutant 471 is not covered by any test.
[12:30:00 DBG] Mutant 472 is not covered by any test.
[12:30:00 DBG] Mutant 473 is not covered by any test.
[12:30:00 DBG] Mutant 474 is not covered by any test.
[12:30:00 DBG] Mutant 475 is not covered by any test.
[12:30:00 DBG] Mutant 476 is not covered by any test.
[12:30:00 DBG] Mutant 477 is not covered by any test.
[12:30:00 DBG] Mutant 478 is not covered by any test.
[12:30:00 DBG] Mutant 479 is not covered by any test.
[12:30:00 DBG] Mutant 480 is not covered by any test.
[12:30:00 DBG] Mutant 481 is not covered by any test.
[12:30:00 DBG] Mutant 482 is not covered by any test.
[12:30:00 DBG] Mutant 483 is not covered by any test.
[12:30:00 DBG] Mutant 484 is not covered by any test.
[12:30:00 DBG] Mutant 485 is not covered by any test.
[12:30:00 DBG] Mutant 486 is not covered by any test.
[12:30:00 DBG] Mutant 487 is not covered by any test.
[12:30:00 DBG] Mutant 488 is not covered by any test.
[12:30:00 DBG] Mutant 489 is not covered by any test.
[12:30:00 DBG] Mutant 490 is not covered by any test.
[12:30:00 DBG] Mutant 491 is not covered by any test.
[12:30:00 DBG] Mutant 492 will be tested against (0) tests.
[12:30:00 DBG] Mutant 493 will be tested against (0) tests.
[12:30:00 DBG] Mutant 494 will be tested against (0) tests.
[12:30:00 DBG] Mutant 495 is not covered by any test.
[12:30:00 DBG] Mutant 496 is not covered by any test.
[12:30:00 DBG] Mutant 497 is not covered by any test.
[12:30:00 DBG] Mutant 498 is not covered by any test.
[12:30:00 DBG] Mutant 499 is not covered by any test.
[12:30:00 DBG] Mutant 500 is not covered by any test.
[12:30:00 DBG] Mutant 501 is not covered by any test.
[12:30:00 DBG] Mutant 502 is not covered by any test.
[12:30:00 DBG] Mutant 503 is not covered by any test.
[12:30:00 DBG] Mutant 504 is not covered by any test.
[12:30:00 DBG] Mutant 505 is not covered by any test.
[12:30:00 DBG] Mutant 506 is not covered by any test.
[12:30:00 DBG] Mutant 507 is not covered by any test.
[12:30:00 DBG] Mutant 508 is not covered by any test.
[12:30:00 DBG] Mutant 509 is not covered by any test.
[12:30:00 DBG] Mutant 510 is not covered by any test.
[12:30:00 DBG] Mutant 511 is not covered by any test.
[12:30:00 DBG] Mutant 512 is not covered by any test.
[12:30:00 DBG] Mutant 513 is not covered by any test.
[12:30:00 DBG] Mutant 514 is not covered by any test.
[12:30:00 DBG] Mutant 515 is not covered by any test.
[12:30:00 DBG] Mutant 516 is not covered by any test.
[12:30:00 DBG] Mutant 517 is not covered by any test.
[12:30:00 DBG] Mutant 518 is not covered by any test.
[12:30:00 DBG] Mutant 519 is not covered by any test.
[12:30:00 DBG] Mutant 520 is not covered by any test.
[12:30:00 DBG] Mutant 521 is not covered by any test.
[12:30:00 DBG] Mutant 522 is not covered by any test.
[12:30:00 DBG] Mutant 523 is not covered by any test.
[12:30:00 DBG] Mutant 524 is not covered by any test.
[12:30:00 DBG] Mutant 525 is not covered by any test.
[12:30:00 DBG] Mutant 526 is not covered by any test.
[12:30:00 DBG] Mutant 527 is not covered by any test.
[12:30:00 DBG] Mutant 528 is not covered by any test.
[12:30:00 DBG] Mutant 529 is not covered by any test.
[12:30:00 DBG] Mutant 530 is not covered by any test.
[12:30:00 DBG] Mutant 531 is not covered by any test.
[12:30:00 DBG] Mutant 532 is not covered by any test.
[12:30:00 DBG] Mutant 533 is not covered by any test.
[12:30:00 DBG] Mutant 534 is not covered by any test.
[12:30:00 DBG] Mutant 535 is not covered by any test.
[12:30:00 DBG] Mutant 536 is not covered by any test.
[12:30:00 DBG] Mutant 537 is not covered by any test.
[12:30:00 DBG] Mutant 538 is not covered by any test.
[12:30:00 DBG] Mutant 539 is not covered by any test.
[12:30:00 DBG] Mutant 540 is not covered by any test.
[12:30:00 DBG] Mutant 541 is not covered by any test.
[12:30:00 DBG] Mutant 542 is not covered by any test.
[12:30:00 DBG] Mutant 543 is not covered by any test.
[12:30:00 DBG] Mutant 544 is not covered by any test.
[12:30:00 DBG] Mutant 545 is not covered by any test.
[12:30:00 DBG] Mutant 546 is not covered by any test.
[12:30:00 DBG] Mutant 547 is not covered by any test.
[12:30:00 DBG] Mutant 548 is not covered by any test.
[12:30:00 DBG] Mutant 549 is not covered by any test.
[12:30:00 DBG] Mutant 550 is not covered by any test.
[12:30:00 DBG] Mutant 551 is not covered by any test.
[12:30:00 DBG] Mutant 552 is not covered by any test.
[12:30:00 DBG] Mutant 553 is not covered by any test.
[12:30:00 DBG] Mutant 554 is not covered by any test.
[12:30:00 DBG] Mutant 555 is not covered by any test.
[12:30:00 DBG] Mutant 556 is not covered by any test.
[12:30:00 DBG] Mutant 557 will be tested against (0) tests.
[12:30:00 DBG] Mutant 558 is not covered by any test.
[12:30:00 DBG] Mutant 559 will be tested against (0) tests.
[12:30:00 DBG] Mutant 560 is not covered by any test.
[12:30:00 DBG] Mutant 561 is not covered by any test.
[12:30:00 DBG] Mutant 562 is not covered by any test.
[12:30:00 DBG] Mutant 563 is not covered by any test.
[12:30:00 DBG] Mutant 564 is not covered by any test.
[12:30:00 DBG] Mutant 565 is not covered by any test.
[12:30:00 DBG] Mutant 566 is not covered by any test.
[12:30:00 DBG] Mutant 567 is not covered by any test.
[12:30:00 DBG] Mutant 568 is not covered by any test.
[12:30:00 DBG] Mutant 569 is not covered by any test.
[12:30:00 DBG] Mutant 570 is not covered by any test.
[12:30:00 DBG] Mutant 571 is not covered by any test.
[12:30:00 DBG] Mutant 572 is not covered by any test.
[12:30:00 DBG] Mutant 573 will be tested against (0) tests.
[12:30:00 DBG] Mutant 574 is not covered by any test.
[12:30:00 DBG] Mutant 575 is not covered by any test.
[12:30:00 DBG] Mutant 576 will be tested against (0) tests.
[12:30:00 DBG] Mutant 577 is not covered by any test.
[12:30:00 DBG] Mutant 578 is not covered by any test.
[12:30:00 DBG] Mutant 579 is not covered by any test.
[12:30:00 DBG] Mutant 580 is not covered by any test.
[12:30:00 DBG] Mutant 581 is not covered by any test.
[12:30:00 DBG] Mutant 582 is not covered by any test.
[12:30:00 DBG] Mutant 583 is not covered by any test.
[12:30:00 DBG] Mutant 584 is not covered by any test.
[12:30:00 DBG] Mutant 585 is not covered by any test.
[12:30:00 DBG] Mutant 586 is not covered by any test.
[12:30:00 DBG] Mutant 587 is not covered by any test.
[12:30:00 DBG] Mutant 588 is not covered by any test.
[12:30:00 DBG] Mutant 589 will be tested against (0) tests.
[12:30:00 DBG] Mutant 590 is not covered by any test.
[12:30:00 DBG] Mutant 591 is not covered by any test.
[12:30:00 DBG] Mutant 592 will be tested against (0) tests.
[12:30:00 DBG] Mutant 593 is not covered by any test.
[12:30:00 DBG] Mutant 594 is not covered by any test.
[12:30:00 DBG] Mutant 595 is not covered by any test.
[12:30:00 DBG] Mutant 596 is not covered by any test.
[12:30:00 DBG] Mutant 597 is not covered by any test.
[12:30:00 DBG] Mutant 598 will be tested against (0) tests.
[12:30:00 DBG] Mutant 599 is not covered by any test.
[12:30:00 DBG] Mutant 600 is not covered by any test.
[12:30:00 DBG] Mutant 601 will be tested against (0) tests.
[12:30:00 DBG] Mutant 602 is not covered by any test.
[12:30:00 DBG] Mutant 603 is not covered by any test.
[12:30:00 DBG] Mutant 604 is not covered by any test.
[12:30:00 DBG] Mutant 605 is not covered by any test.
[12:30:00 DBG] Mutant 606 is not covered by any test.
[12:30:00 DBG] Mutant 607 is not covered by any test.
[12:30:00 DBG] Mutant 608 is not covered by any test.
[12:30:00 DBG] Mutant 609 is not covered by any test.
[12:30:00 DBG] Mutant 610 is not covered by any test.
[12:30:00 DBG] Mutant 611 is not covered by any test.
[12:30:00 DBG] Mutant 612 is not covered by any test.
[12:30:00 DBG] Mutant 613 is not covered by any test.
[12:30:00 DBG] Mutant 614 is not covered by any test.
[12:30:00 DBG] Mutant 615 is not covered by any test.
[12:30:00 DBG] Mutant 616 is not covered by any test.
[12:30:00 DBG] Mutant 617 is not covered by any test.
[12:30:00 DBG] Mutant 618 is not covered by any test.
[12:30:00 DBG] Mutant 619 is not covered by any test.
[12:30:00 DBG] Mutant 620 is not covered by any test.
[12:30:00 DBG] Mutant 621 is not covered by any test.
[12:30:00 DBG] Mutant 622 will be tested against (0) tests.
[12:30:00 DBG] Mutant 623 will be tested against (0) tests.
[12:30:00 DBG] Mutant 624 is not covered by any test.
[12:30:00 DBG] Mutant 625 is not covered by any test.
[12:30:00 DBG] Mutant 626 is not covered by any test.
[12:30:00 DBG] Mutant 627 is not covered by any test.
[12:30:00 DBG] Mutant 628 is not covered by any test.
[12:30:00 DBG] Mutant 629 is not covered by any test.
[12:30:00 DBG] Mutant 630 is not covered by any test.
[12:30:00 DBG] Mutant 631 is not covered by any test.
[12:30:00 DBG] Mutant 632 is not covered by any test.
[12:30:00 DBG] Mutant 633 is not covered by any test.
[12:30:00 DBG] Mutant 634 is not covered by any test.
[12:30:00 DBG] Mutant 635 is not covered by any test.
[12:30:00 DBG] Mutant 636 is not covered by any test.
[12:30:00 DBG] Mutant 637 is not covered by any test.
[12:30:00 DBG] Mutant 638 is not covered by any test.
[12:30:00 DBG] Mutant 639 is not covered by any test.
[12:30:00 DBG] Mutant 640 is not covered by any test.
[12:30:00 DBG] Mutant 641 is not covered by any test.
[12:30:00 DBG] Mutant 642 is not covered by any test.
[12:30:00 DBG] Mutant 643 is not covered by any test.
[12:30:00 DBG] Mutant 644 is not covered by any test.
[12:30:00 DBG] Mutant 645 is not covered by any test.
[12:30:00 DBG] Mutant 646 is not covered by any test.
[12:30:00 DBG] Mutant 647 is not covered by any test.
[12:30:00 DBG] Mutant 648 is not covered by any test.
[12:30:00 DBG] Mutant 649 is not covered by any test.
[12:30:00 DBG] Mutant 650 is not covered by any test.
[12:30:00 DBG] Mutant 651 is not covered by any test.
[12:30:00 DBG] Mutant 652 is not covered by any test.
[12:30:00 DBG] Mutant 653 is not covered by any test.
[12:30:00 DBG] Mutant 654 is not covered by any test.
[12:30:00 DBG] Mutant 655 is not covered by any test.
[12:30:00 DBG] Mutant 656 is not covered by any test.
[12:30:00 DBG] Mutant 657 is not covered by any test.
[12:30:00 DBG] Mutant 658 is not covered by any test.
[12:30:00 DBG] Mutant 659 is not covered by any test.
[12:30:00 DBG] Mutant 660 is not covered by any test.
[12:30:00 DBG] Mutant 661 is not covered by any test.
[12:30:00 DBG] Mutant 662 is not covered by any test.
[12:30:00 DBG] Mutant 663 is not covered by any test.
[12:30:00 DBG] Mutant 664 is not covered by any test.
[12:30:00 DBG] Mutant 665 is not covered by any test.
[12:30:00 DBG] Mutant 666 is not covered by any test.
[12:30:00 DBG] Mutant 667 is not covered by any test.
[12:30:00 DBG] Mutant 668 is not covered by any test.
[12:30:00 DBG] Mutant 669 is not covered by any test.
[12:30:00 DBG] Mutant 670 is not covered by any test.
[12:30:00 DBG] Mutant 671 is not covered by any test.
[12:30:00 DBG] Mutant 672 is not covered by any test.
[12:30:00 DBG] Mutant 673 is not covered by any test.
[12:30:00 DBG] Mutant 674 is not covered by any test.
[12:30:00 DBG] Mutant 675 is not covered by any test.
[12:30:00 DBG] Mutant 676 is not covered by any test.
[12:30:00 DBG] Mutant 677 is not covered by any test.
[12:30:00 DBG] Mutant 678 is not covered by any test.
[12:30:00 DBG] Mutant 679 is not covered by any test.
[12:30:00 DBG] Mutant 680 is not covered by any test.
[12:30:00 DBG] Mutant 681 is not covered by any test.
[12:30:00 DBG] Mutant 682 is not covered by any test.
[12:30:00 DBG] Mutant 683 is not covered by any test.
[12:30:00 DBG] Mutant 684 is not covered by any test.
[12:30:00 DBG] Mutant 685 is not covered by any test.
[12:30:00 DBG] Mutant 686 is not covered by any test.
[12:30:00 DBG] Mutant 687 is not covered by any test.
[12:30:00 DBG] Mutant 688 is not covered by any test.
[12:30:00 DBG] Mutant 689 is not covered by any test.
[12:30:00 DBG] Mutant 690 is not covered by any test.
[12:30:00 DBG] Mutant 691 is not covered by any test.
[12:30:00 DBG] Mutant 692 is not covered by any test.
[12:30:00 DBG] Mutant 693 is not covered by any test.
[12:30:00 DBG] Mutant 694 is not covered by any test.
[12:30:00 DBG] Mutant 695 is not covered by any test.
[12:30:00 DBG] Mutant 696 is not covered by any test.
[12:30:00 DBG] Mutant 697 is not covered by any test.
[12:30:00 DBG] Mutant 698 is not covered by any test.
[12:30:00 DBG] Mutant 699 is not covered by any test.
[12:30:00 DBG] Mutant 700 is not covered by any test.
[12:30:00 DBG] Mutant 701 is not covered by any test.
[12:30:00 DBG] Mutant 702 is not covered by any test.
[12:30:00 DBG] Mutant 703 is not covered by any test.
[12:30:00 DBG] Mutant 704 is not covered by any test.
[12:30:01 DBG] Mutant 705 is not covered by any test.
[12:30:01 DBG] Mutant 706 is not covered by any test.
[12:30:01 DBG] Mutant 707 is not covered by any test.
[12:30:01 DBG] Mutant 708 is not covered by any test.
[12:30:01 DBG] Mutant 709 is not covered by any test.
[12:30:01 DBG] Mutant 710 is not covered by any test.
[12:30:01 DBG] Mutant 711 is not covered by any test.
[12:30:01 DBG] Mutant 712 is not covered by any test.
[12:30:01 DBG] Mutant 713 is not covered by any test.
[12:30:01 DBG] Mutant 714 is not covered by any test.
[12:30:01 DBG] Mutant 715 is not covered by any test.
[12:30:01 DBG] Mutant 716 is not covered by any test.
[12:30:01 DBG] Mutant 717 is not covered by any test.
[12:30:01 DBG] Mutant 718 is not covered by any test.
[12:30:01 DBG] Mutant 719 is not covered by any test.
[12:30:01 DBG] Mutant 720 is not covered by any test.
[12:30:01 DBG] Mutant 721 is not covered by any test.
[12:30:01 DBG] Mutant 722 is not covered by any test.
[12:30:01 DBG] Mutant 723 is not covered by any test.
[12:30:01 DBG] Mutant 724 is not covered by any test.
[12:30:01 DBG] Mutant 725 is not covered by any test.
[12:30:01 DBG] Mutant 726 is not covered by any test.
[12:30:01 DBG] Mutant 727 is not covered by any test.
[12:30:01 DBG] Mutant 728 is not covered by any test.
[12:30:01 DBG] Mutant 729 is not covered by any test.
[12:30:01 DBG] Mutant 730 is not covered by any test.
[12:30:01 DBG] Mutant 731 is not covered by any test.
[12:30:01 DBG] Mutant 732 is not covered by any test.
[12:30:01 DBG] Mutant 733 is not covered by any test.
[12:30:01 DBG] Mutant 734 is not covered by any test.
[12:30:01 DBG] Mutant 735 is not covered by any test.
[12:30:01 DBG] Mutant 736 is not covered by any test.
[12:30:01 DBG] Mutant 737 is not covered by any test.
[12:30:01 DBG] Mutant 738 is not covered by any test.
[12:30:01 DBG] Mutant 739 is not covered by any test.
[12:30:01 DBG] Mutant 740 is not covered by any test.
[12:30:01 DBG] Mutant 741 is not covered by any test.
[12:30:01 DBG] Mutant 742 is not covered by any test.
[12:30:01 DBG] Mutant 743 is not covered by any test.
[12:30:01 DBG] Mutant 744 is not covered by any test.
[12:30:01 DBG] Mutant 745 is not covered by any test.
[12:30:01 DBG] Mutant 746 is not covered by any test.
[12:30:01 DBG] Mutant 747 is not covered by any test.
[12:30:01 DBG] Mutant 748 is not covered by any test.
[12:30:01 DBG] Mutant 749 is not covered by any test.
[12:30:01 DBG] Mutant 750 is not covered by any test.
[12:30:01 DBG] Mutant 751 is not covered by any test.
[12:30:01 DBG] Mutant 752 is not covered by any test.
[12:30:01 DBG] Mutant 753 is not covered by any test.
[12:30:01 DBG] Mutant 754 is not covered by any test.
[12:30:01 DBG] Mutant 755 is not covered by any test.
[12:30:01 DBG] Mutant 756 is not covered by any test.
[12:30:01 DBG] Mutant 757 is not covered by any test.
[12:30:01 DBG] Mutant 758 is not covered by any test.
[12:30:01 DBG] Mutant 759 is not covered by any test.
[12:30:01 DBG] Mutant 760 is not covered by any test.
[12:30:01 DBG] Mutant 761 is not covered by any test.
[12:30:01 DBG] Mutant 762 is not covered by any test.
[12:30:01 DBG] Mutant 763 is not covered by any test.
[12:30:01 DBG] Mutant 764 is not covered by any test.
[12:30:01 DBG] Mutant 765 is not covered by any test.
[12:30:01 DBG] Mutant 766 is not covered by any test.
[12:30:01 DBG] Mutant 767 is not covered by any test.
[12:30:01 DBG] Mutant 768 will be tested against (0) tests.
[12:30:01 DBG] Mutant 769 will be tested against (0) tests.
[12:30:01 DBG] Mutant 770 is not covered by any test.
[12:30:01 DBG] Mutant 771 is not covered by any test.
[12:30:01 DBG] Mutant 772 is not covered by any test.
[12:30:01 DBG] Mutant 773 is not covered by any test.
[12:30:01 DBG] Mutant 774 is not covered by any test.
[12:30:01 DBG] Mutant 775 is not covered by any test.
[12:30:01 DBG] Mutant 776 is not covered by any test.
[12:30:01 DBG] Mutant 777 is not covered by any test.
[12:30:01 DBG] Mutant 778 is not covered by any test.
[12:30:01 DBG] Mutant 779 is not covered by any test.
[12:30:01 DBG] Mutant 780 is not covered by any test.
[12:30:01 DBG] Mutant 781 is not covered by any test.
[12:30:01 DBG] Mutant 782 is not covered by any test.
[12:30:01 DBG] Mutant 783 is not covered by any test.
[12:30:01 DBG] Mutant 784 is not covered by any test.
[12:30:01 DBG] Mutant 785 is not covered by any test.
[12:30:01 DBG] Mutant 786 is not covered by any test.
[12:30:01 DBG] Mutant 787 is not covered by any test.
[12:30:01 DBG] Mutant 788 is not covered by any test.
[12:30:01 DBG] Mutant 789 is not covered by any test.
[12:30:01 DBG] Mutant 790 is not covered by any test.
[12:30:01 DBG] Mutant 791 is not covered by any test.
[12:30:01 DBG] Mutant 792 will be tested against (0) tests.
[12:30:01 DBG] Mutant 793 will be tested against (0) tests.
[12:30:01 DBG] Mutant 794 is not covered by any test.
[12:30:01 DBG] Mutant 795 is not covered by any test.
[12:30:01 DBG] Mutant 796 is not covered by any test.
[12:30:01 DBG] Mutant 797 is not covered by any test.
[12:30:01 DBG] Mutant 798 will be tested against (0) tests.
[12:30:01 DBG] Mutant 799 is not covered by any test.
[12:30:01 DBG] Mutant 800 is not covered by any test.
[12:30:01 DBG] Mutant 801 will be tested against (0) tests.
[12:30:01 DBG] Mutant 802 is not covered by any test.
[12:30:01 DBG] Mutant 803 is not covered by any test.
[12:30:01 DBG] Mutant 804 is not covered by any test.
[12:30:01 DBG] Mutant 805 is not covered by any test.
[12:30:01 DBG] Mutant 806 is not covered by any test.
[12:30:01 DBG] Mutant 807 is not covered by any test.
[12:30:01 DBG] Mutant 808 is not covered by any test.
[12:30:01 DBG] Mutant 809 is not covered by any test.
[12:30:01 DBG] Mutant 810 is not covered by any test.
[12:30:01 DBG] Mutant 811 is not covered by any test.
[12:30:01 DBG] Mutant 812 is not covered by any test.
[12:30:01 DBG] Mutant 813 is not covered by any test.
[12:30:01 DBG] Mutant 814 is not covered by any test.
[12:30:01 DBG] Mutant 815 is not covered by any test.
[12:30:01 DBG] Mutant 816 is not covered by any test.
[12:30:01 DBG] Mutant 817 is not covered by any test.
[12:30:01 DBG] Mutant 818 is not covered by any test.
[12:30:01 DBG] Mutant 819 is not covered by any test.
[12:30:01 DBG] Mutant 820 is not covered by any test.
[12:30:01 DBG] Mutant 821 is not covered by any test.
[12:30:01 DBG] Mutant 822 is not covered by any test.
[12:30:01 DBG] Mutant 823 is not covered by any test.
[12:30:01 DBG] Mutant 824 is not covered by any test.
[12:30:01 DBG] Mutant 825 is not covered by any test.
[12:30:01 DBG] Mutant 826 is not covered by any test.
[12:30:01 DBG] Mutant 827 is not covered by any test.
[12:30:01 DBG] Mutant 828 is not covered by any test.
[12:30:01 DBG] Mutant 829 is not covered by any test.
[12:30:01 DBG] Mutant 830 is not covered by any test.
[12:30:01 DBG] Mutant 831 is not covered by any test.
[12:30:01 DBG] Mutant 832 is not covered by any test.
[12:30:01 DBG] Mutant 833 is not covered by any test.
[12:30:01 DBG] Mutant 834 is not covered by any test.
[12:30:01 DBG] Mutant 835 is not covered by any test.
[12:30:01 DBG] Mutant 836 is not covered by any test.
[12:30:01 DBG] Mutant 837 is not covered by any test.
[12:30:01 DBG] Mutant 838 is not covered by any test.
[12:30:01 DBG] Mutant 839 is not covered by any test.
[12:30:01 DBG] Mutant 840 is not covered by any test.
[12:30:01 DBG] Mutant 841 is not covered by any test.
[12:30:01 DBG] Mutant 842 is not covered by any test.
[12:30:01 DBG] Mutant 843 is not covered by any test.
[12:30:01 DBG] Mutant 844 is not covered by any test.
[12:30:01 DBG] Mutant 845 is not covered by any test.
[12:30:01 DBG] Mutant 846 is not covered by any test.
[12:30:01 DBG] Mutant 847 is not covered by any test.
[12:30:01 DBG] Mutant 848 is not covered by any test.
[12:30:01 DBG] Mutant 849 is not covered by any test.
[12:30:01 DBG] Mutant 850 is not covered by any test.
[12:30:01 DBG] Mutant 851 is not covered by any test.
[12:30:01 DBG] Mutant 852 is not covered by any test.
[12:30:01 DBG] Mutant 853 is not covered by any test.
[12:30:01 DBG] Mutant 854 is not covered by any test.
[12:30:01 DBG] Mutant 855 is not covered by any test.
[12:30:01 DBG] Mutant 856 is not covered by any test.
[12:30:01 DBG] Mutant 857 is not covered by any test.
[12:30:01 DBG] Mutant 858 is not covered by any test.
[12:30:01 DBG] Mutant 859 is not covered by any test.
[12:30:01 DBG] Mutant 860 is not covered by any test.
[12:30:01 DBG] Mutant 861 is not covered by any test.
[12:30:01 DBG] Mutant 862 is not covered by any test.
[12:30:01 DBG] Mutant 863 is not covered by any test.
[12:30:01 DBG] Mutant 864 is not covered by any test.
[12:30:01 DBG] Mutant 865 is not covered by any test.
[12:30:01 DBG] Mutant 866 is not covered by any test.
[12:30:01 DBG] Mutant 867 is not covered by any test.
[12:30:01 DBG] Mutant 868 is not covered by any test.
[12:30:01 DBG] Mutant 869 is not covered by any test.
[12:30:01 DBG] Mutant 870 is not covered by any test.
[12:30:01 DBG] Mutant 871 will be tested against (0) tests.
[12:30:01 DBG] Mutant 872 will be tested against (0) tests.
[12:30:01 DBG] Mutant 873 is not covered by any test.
[12:30:01 DBG] Mutant 874 is not covered by any test.
[12:30:01 DBG] Mutant 875 is not covered by any test.
[12:30:01 DBG] Mutant 876 is not covered by any test.
[12:30:01 DBG] Mutant 877 is not covered by any test.
[12:30:01 DBG] Mutant 878 is not covered by any test.
[12:30:01 DBG] Mutant 879 is not covered by any test.
[12:30:01 DBG] Mutant 880 is not covered by any test.
[12:30:01 DBG] Mutant 881 is not covered by any test.
[12:30:01 DBG] Mutant 882 is not covered by any test.
[12:30:01 DBG] Mutant 883 will be tested against (0) tests.
[12:30:01 DBG] Mutant 884 is not covered by any test.
[12:30:01 DBG] Mutant 885 is not covered by any test.
[12:30:01 DBG] Mutant 886 is not covered by any test.
[12:30:01 DBG] Mutant 887 is not covered by any test.
[12:30:01 DBG] Mutant 888 is not covered by any test.
[12:30:01 DBG] Mutant 889 is not covered by any test.
[12:30:01 DBG] Mutant 890 is not covered by any test.
[12:30:01 DBG] Mutant 891 is not covered by any test.
[12:30:01 DBG] Mutant 892 is not covered by any test.
[12:30:01 DBG] Mutant 893 is not covered by any test.
[12:30:01 DBG] Mutant 894 is not covered by any test.
[12:30:01 DBG] Mutant 895 is not covered by any test.
[12:30:01 DBG] Mutant 896 is not covered by any test.
[12:30:01 DBG] Mutant 897 is not covered by any test.
[12:30:01 DBG] Mutant 898 is not covered by any test.
[12:30:01 DBG] Mutant 899 is not covered by any test.
[12:30:01 DBG] Mutant 900 is not covered by any test.
[12:30:01 DBG] Mutant 901 is not covered by any test.
[12:30:01 DBG] Mutant 902 is not covered by any test.
[12:30:01 DBG] Mutant 903 is not covered by any test.
[12:30:01 DBG] Mutant 904 is not covered by any test.
[12:30:01 DBG] Mutant 905 is not covered by any test.
[12:30:01 DBG] Mutant 906 is not covered by any test.
[12:30:01 DBG] Mutant 907 is not covered by any test.
[12:30:01 DBG] Mutant 908 is not covered by any test.
[12:30:01 DBG] Mutant 909 is not covered by any test.
[12:30:01 DBG] Mutant 910 is not covered by any test.
[12:30:01 DBG] Mutant 911 is not covered by any test.
[12:30:01 DBG] Mutant 912 is not covered by any test.
[12:30:01 DBG] Mutant 913 is not covered by any test.
[12:30:01 DBG] Mutant 914 is not covered by any test.
[12:30:01 DBG] Mutant 915 is not covered by any test.
[12:30:01 DBG] Mutant 916 is not covered by any test.
[12:30:01 DBG] Mutant 917 is not covered by any test.
[12:30:01 DBG] Mutant 918 is not covered by any test.
[12:30:01 DBG] Mutant 919 is not covered by any test.
[12:30:01 DBG] Mutant 920 is not covered by any test.
[12:30:01 DBG] Mutant 921 is not covered by any test.
[12:30:01 DBG] Mutant 922 is not covered by any test.
[12:30:01 DBG] Mutant 923 is not covered by any test.
[12:30:01 DBG] Mutant 924 is not covered by any test.
[12:30:01 DBG] Mutant 925 is not covered by any test.
[12:30:01 DBG] Mutant 926 is not covered by any test.
[12:30:01 DBG] Mutant 927 is not covered by any test.
[12:30:01 DBG] Mutant 928 is not covered by any test.
[12:30:01 DBG] Mutant 929 is not covered by any test.
[12:30:01 DBG] Mutant 930 is not covered by any test.
[12:30:01 DBG] Mutant 931 is not covered by any test.
[12:30:01 DBG] Mutant 932 is not covered by any test.
[12:30:01 DBG] Mutant 933 is not covered by any test.
[12:30:01 DBG] Mutant 934 is not covered by any test.
[12:30:01 DBG] Mutant 935 is not covered by any test.
[12:30:01 DBG] Mutant 936 is not covered by any test.
[12:30:01 DBG] Mutant 937 is not covered by any test.
[12:30:01 DBG] Mutant 938 is not covered by any test.
[12:30:01 DBG] Mutant 939 is not covered by any test.
[12:30:01 DBG] Mutant 940 is not covered by any test.
[12:30:01 DBG] Mutant 941 is not covered by any test.
[12:30:01 DBG] Mutant 942 is not covered by any test.
[12:30:01 DBG] Mutant 943 is not covered by any test.
[12:30:01 DBG] Mutant 944 is not covered by any test.
[12:30:01 DBG] Mutant 945 is not covered by any test.
[12:30:01 DBG] Mutant 946 is not covered by any test.
[12:30:01 DBG] Mutant 947 is not covered by any test.
[12:30:01 DBG] Mutant 948 is not covered by any test.
[12:30:01 DBG] Mutant 949 is not covered by any test.
[12:30:01 DBG] Mutant 950 is not covered by any test.
[12:30:01 DBG] Mutant 951 is not covered by any test.
[12:30:01 DBG] Mutant 952 is not covered by any test.
[12:30:01 DBG] Mutant 953 is not covered by any test.
[12:30:01 DBG] Mutant 954 is not covered by any test.
[12:30:01 DBG] Mutant 955 is not covered by any test.
[12:30:01 DBG] Mutant 956 is not covered by any test.
[12:30:01 DBG] Mutant 957 is not covered by any test.
[12:30:01 DBG] Mutant 958 is not covered by any test.
[12:30:01 DBG] Mutant 959 is not covered by any test.
[12:30:01 DBG] Mutant 960 is not covered by any test.
[12:30:01 DBG] Mutant 961 is not covered by any test.
[12:30:01 DBG] Mutant 962 is not covered by any test.
[12:30:01 DBG] Mutant 963 is not covered by any test.
[12:30:01 DBG] Mutant 964 is not covered by any test.
[12:30:01 DBG] Mutant 965 is not covered by any test.
[12:30:01 DBG] Mutant 966 is not covered by any test.
[12:30:01 DBG] Mutant 967 is not covered by any test.
[12:30:01 DBG] Mutant 968 is not covered by any test.
[12:30:01 DBG] Mutant 969 is not covered by any test.
[12:30:01 DBG] Mutant 970 is not covered by any test.
[12:30:01 DBG] Mutant 971 will be tested against (0) tests.
[12:30:01 DBG] Mutant 972 is not covered by any test.
[12:30:01 DBG] Mutant 973 is not covered by any test.
[12:30:01 DBG] Mutant 974 is not covered by any test.
[12:30:01 DBG] Mutant 975 is not covered by any test.
[12:30:01 DBG] Mutant 976 is not covered by any test.
[12:30:01 DBG] Mutant 977 is not covered by any test.
[12:30:01 DBG] Mutant 978 is not covered by any test.
[12:30:01 DBG] Mutant 979 is not covered by any test.
[12:30:01 DBG] Mutant 980 is not covered by any test.
[12:30:01 DBG] Mutant 981 is not covered by any test.
[12:30:01 DBG] Mutant 982 is not covered by any test.
[12:30:01 DBG] Mutant 983 is not covered by any test.
[12:30:01 DBG] Mutant 984 is not covered by any test.
[12:30:01 DBG] Mutant 985 is not covered by any test.
[12:30:01 DBG] Mutant 986 is not covered by any test.
[12:30:01 DBG] Mutant 987 is not covered by any test.
[12:30:01 DBG] Mutant 988 is not covered by any test.
[12:30:01 DBG] Mutant 989 is not covered by any test.
[12:30:01 DBG] Mutant 990 is not covered by any test.
[12:30:01 DBG] Mutant 991 is not covered by any test.
[12:30:01 DBG] Mutant 992 is not covered by any test.
[12:30:01 DBG] Mutant 993 is not covered by any test.
[12:30:01 DBG] Mutant 994 is not covered by any test.
[12:30:01 DBG] Mutant 995 is not covered by any test.
[12:30:01 DBG] Mutant 996 is not covered by any test.
[12:30:01 DBG] Mutant 997 is not covered by any test.
[12:30:01 DBG] Mutant 998 is not covered by any test.
[12:30:01 DBG] Mutant 999 will be tested against (0) tests.
[12:30:01 DBG] Mutant 1000 will be tested against (0) tests.
[12:30:01 DBG] Mutant 1001 is not covered by any test.
[12:30:01 DBG] Mutant 1002 is not covered by any test.
[12:30:01 DBG] Mutant 1003 is not covered by any test.
[12:30:01 DBG] Mutant 1004 is not covered by any test.
[12:30:01 DBG] Mutant 1005 is not covered by any test.
[12:30:01 DBG] Mutant 1006 is not covered by any test.
[12:30:01 DBG] Mutant 1007 is not covered by any test.
[12:30:01 DBG] Mutant 1008 is not covered by any test.
[12:30:01 DBG] Mutant 1009 is not covered by any test.
[12:30:01 DBG] Mutant 1010 is not covered by any test.
[12:30:01 DBG] Mutant 1011 is not covered by any test.
[12:30:01 DBG] Mutant 1012 is not covered by any test.
[12:30:01 DBG] Mutant 1013 is not covered by any test.
[12:30:01 DBG] Mutant 1014 is not covered by any test.
[12:30:01 DBG] Mutant 1015 is not covered by any test.
[12:30:01 DBG] Mutant 1016 is not covered by any test.
[12:30:01 DBG] Mutant 1017 is not covered by any test.
[12:30:01 DBG] Mutant 1018 is not covered by any test.
[12:30:01 DBG] Mutant 1019 is not covered by any test.
[12:30:01 DBG] Mutant 1020 is not covered by any test.
[12:30:01 DBG] Mutant 1021 is not covered by any test.
[12:30:01 DBG] Mutant 1022 is not covered by any test.
[12:30:01 DBG] Mutant 1023 is not covered by any test.
[12:30:01 DBG] Mutant 1024 is not covered by any test.
[12:30:01 DBG] Mutant 1025 is not covered by any test.
[12:30:01 DBG] Mutant 1026 is not covered by any test.
[12:30:01 DBG] Mutant 1027 is not covered by any test.
[12:30:01 DBG] Mutant 1028 is not covered by any test.
[12:30:01 DBG] Mutant 1029 is not covered by any test.
[12:30:01 DBG] Mutant 1030 is not covered by any test.
[12:30:01 DBG] Mutant 1031 is not covered by any test.
[12:30:01 DBG] Mutant 1032 is not covered by any test.
[12:30:01 DBG] Mutant 1033 is not covered by any test.
[12:30:01 DBG] Mutant 1034 is not covered by any test.
[12:30:01 DBG] Mutant 1035 is not covered by any test.
[12:30:01 DBG] Mutant 1036 is not covered by any test.
[12:30:01 DBG] Mutant 1037 is not covered by any test.
[12:30:01 DBG] Mutant 1038 is not covered by any test.
[12:30:01 DBG] Mutant 1039 is not covered by any test.
[12:30:01 DBG] Mutant 1040 is not covered by any test.
[12:30:01 DBG] Mutant 1041 is not covered by any test.
[12:30:01 DBG] Mutant 1042 is not covered by any test.
[12:30:01 DBG] Mutant 1043 is not covered by any test.
[12:30:01 DBG] Mutant 1044 is not covered by any test.
[12:30:01 DBG] Mutant 1045 is not covered by any test.
[12:30:01 DBG] Mutant 1046 is not covered by any test.
[12:30:01 DBG] Mutant 1047 is not covered by any test.
[12:30:01 DBG] Mutant 1048 is not covered by any test.
[12:30:01 DBG] Mutant 1049 is not covered by any test.
[12:30:01 DBG] Mutant 1050 is not covered by any test.
[12:30:01 DBG] Mutant 1051 is not covered by any test.
[12:30:01 DBG] Mutant 1052 is not covered by any test.
[12:30:01 DBG] Mutant 1053 is not covered by any test.
[12:30:01 DBG] Mutant 1054 is not covered by any test.
[12:30:01 DBG] Mutant 1055 is not covered by any test.
[12:30:01 DBG] Mutant 1056 is not covered by any test.
[12:30:01 DBG] Mutant 1057 is not covered by any test.
[12:30:01 DBG] Mutant 1058 is not covered by any test.
[12:30:01 DBG] Mutant 1059 is not covered by any test.
[12:30:01 DBG] Mutant 1060 is not covered by any test.
[12:30:01 DBG] Mutant 1061 is not covered by any test.
[12:30:01 DBG] Mutant 1062 is not covered by any test.
[12:30:01 DBG] Mutant 1063 is not covered by any test.
[12:30:01 DBG] Mutant 1064 is not covered by any test.
[12:30:01 DBG] Mutant 1065 is not covered by any test.
[12:30:01 DBG] Mutant 1066 is not covered by any test.
[12:30:01 DBG] Mutant 1067 is not covered by any test.
[12:30:01 DBG] Mutant 1068 is not covered by any test.
[12:30:01 DBG] Mutant 1069 is not covered by any test.
[38;5;14mHint: by passing "--open-report or -o" the report will open automatically and [0m
[38;5;14mupdate the report in real-time.[0m
[12:30:01 INF] 42    mutants got status CompileError. Reason: Mutant caused compile errors
[12:30:01 INF] 751   mutants got status NoCoverage.   Reason: Not covered by any test.
[12:30:01 INF] 276   mutants got status Ignored.      Reason: Removed by block already covered filter
[12:30:01 INF] 1069  total mutants are skipped for the above mentioned reasons
[12:30:01 INF] 1     total mutants will be tested
[12:30:01 DBG] Mutations will be tested in 1 test runs.
[12:30:01 VRB] Testing 337: Boolean mutation.
[12:30:01 DBG] Runner 1: Testing [337: Boolean mutation]
[12:30:01 VRB] Runner 1: against all tests..
[12:30:01 DBG] Runner 1: Using 7665 ms as test run timeout
[12:30:01 VRB] Runner 1: testing assembly Buildalyzer.AnalyzerResult.
[12:30:01 VRB] Runner 1: [Error] Testhost process for source(s) '/Users/stuart.lang/RiderProjects/ConsoleApp9/artifacts/bin/LocalSqsSnsMessaging.Tests.Shared/debug/LocalSqsSnsMessaging.Tests.Shared.dll' exited with error: . Please check the diagnostic logs for more information.
[12:30:01 VRB] Runner 1: [Error] Testhost process for source(s) '/Users/stuart.lang/RiderProjects/ConsoleApp9/artifacts/bin/LocalSqsSnsMessaging.Tests.Shared/debug/LocalSqsSnsMessaging.Tests.Shared.dll' exited with error: . Please check the diagnostic logs for more information.
[12:30:01 DBG] Runner 1: Received testrun complete.
[12:30:01 DBG] Runner 1: Test session finished.
[12:30:01 VRB] Runner 1: testing assembly Buildalyzer.AnalyzerResult.
[12:30:01 VRB] Runner 1: [Debug] [xUnit.net 00:00:00.00] xUnit.net VSTest Adapter v3.0.0-pre.42+8174918c5e (64-bit .NET 8.0.8)
[12:30:01 VRB] Runner 1: [Debug] [xUnit.net 00:00:00.12]   Discovering: LocalSqsSnsMessaging.Tests
[12:30:01 VRB] Runner 1: [Debug] [xUnit.net 00:00:00.26]   Discovered:  LocalSqsSnsMessaging.Tests
[12:30:01 VRB] Runner 1: [Debug] [xUnit.net 00:00:00.39]   Starting:    LocalSqsSnsMessaging.Tests
[12:30:02 VRB] Runner 1: [Debug] [xUnit.net 00:00:00.72]   Finished:    LocalSqsSnsMessaging.Tests
[12:30:02 DBG] Runner 1: Received testrun complete.
[12:30:02 DBG] Runner 1: Test session finished.
[12:30:02 VRB] Runner 1: testing assembly Buildalyzer.AnalyzerResult.
[12:30:02 VRB] Runner 1: [Debug] [xUnit.net 00:00:00.00] xUnit.net VSTest Adapter v3.0.0-pre.42+8174918c5e (64-bit .NET 8.0.8)
[12:30:02 VRB] Runner 1: [Debug] [xUnit.net 00:00:00.12]   Discovering: LocalSqsSnsMessaging.Tests.Verification
[12:30:02 VRB] Runner 1: [Debug] [xUnit.net 00:00:00.30]   Discovered:  LocalSqsSnsMessaging.Tests.Verification
[12:30:02 VRB] Runner 1: [Warning] No test matches the given testcase filter `(FullyQualifiedName~LocalSqsSnsMessaging.Tests.LocalAwsMessaging)` in /Users/stuart.lang/RiderProjects/ConsoleApp9/artifacts/bin/LocalSqsSnsMessaging.Tests.Verification/debug/LocalSqsSnsMessaging.Tests.Verification.dll
[12:30:03 DBG] Runner 1: Received testrun complete.
[12:30:03 DBG] Runner 1: Test session finished.
[12:30:03 DBG] Test run for 337: Boolean mutation is success 
[12:30:03 VRB] Messages for 337: Boolean mutation: 
LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsChangeMessageVisibilityAsyncLocalAwsMessagingTests.ChangeMessageVisibilityAsync_SetToZero_MakesMessageImmediatelyAvailable

LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsChangeMessageVisibilityAsyncLocalAwsMessagingTests.ChangeMessageVisibilityAsync_ValidRequest_ChangesVisibilityTimeout

LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsChangeMessageVisibilityAsyncLocalAwsMessagingTests.ChangeMessageVisibilityAsync_InvalidReceiptHandle_ThrowsException

LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsChangeMessageVisibilityAsyncLocalAwsMessagingTests.ChangeMessageVisibilityAsync_ChangeMultipleTimes_LastChangeApplies

LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsChangeMessageVisibilityAsyncLocalAwsMessagingTests.ChangeMessageVisibilityAsync_MessageNotInFlight_ThrowsException

LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsQueueTagsLocalAwsMessagingTests.ListQueueTagsAsync_NoTags_ReturnsEmptyDictionary

LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsQueueTagsLocalAwsMessagingTests.TagQueueAsync_MaximumTags_Success

LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsQueueTagsLocalAwsMessagingTests.TagQueueAsync_UpdateTagToEmptyValue_Success

LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsQueueTagsLocalAwsMessagingTests.TagQueueAsync_InvalidQueueUrl_ThrowsException

LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsQueueTagsLocalAwsMessagingTests.UntagQueueAsync_ExistingTags_TagsAreRemoved

LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsQueueTagsLocalAwsMessagingTests.TagQueueAsync_ValidTags_TagsAreApplied

LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsQueueTagsLocalAwsMessagingTests.UntagQueueAsync_NonexistentTags_NoError

LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsQueueTagsLocalAwsMessagingTests.TagQueueAsync_NullTagValue_Success

LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsQueueTagsLocalAwsMessagingTests.TagQueueAsync_UpdateExistingTag_TagValueIsUpdated

LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsQueueTagsLocalAwsMessagingTests.TagQueueAsync_EmptyTagValue_Success

LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsReceiveMessageAsyncTestsLocalAwsMessaging.ReceiveMessageAsync_DelayedMessageBecomesVisible

LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsReceiveMessageAsyncTestsLocalAwsMessaging.ReceiveMessageAsync_RespectVisibilityTimeout

LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsReceiveMessageAsyncTestsLocalAwsMessaging.ReceiveMessageAsync_ApproximateReceiveCount_ResetAfterDelete

LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsReceiveMessageAsyncTestsLocalAwsMessaging.AddPermissionAsync_ValidRequest_AddsPermissionToPolicy

LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsReceiveMessageAsyncTestsLocalAwsMessaging.RemovePermissionAsync_LabelDoesNotExist_ThrowsArgumentException

LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsReceiveMessageAsyncTestsLocalAwsMessaging.ReceiveMessageAsync_NoMessageSystemAttributes_NoAttributesReturned

LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsReceiveMessageAsyncTestsLocalAwsMessaging.ReceiveMessageAsync_NoMessages_ReturnsEmptyList

LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsReceiveMessageAsyncTestsLocalAwsMessaging.ReceiveMessageAsync_Timeout_ReturnsEmptyList

LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsReceiveMessageAsyncTestsLocalAwsMessaging.SendMessageAsync_CustomAttributeTypeNames_CountTowardsLimit

LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsReceiveMessageAsyncTestsLocalAwsMessaging.ReceiveMessageAsync_ApproximateReceiveCount_MultipleMessages

LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsReceiveMessageAsyncTestsLocalAwsMessaging.SendMessageAsync_MultipleAttributesExactlyAtLimit_Succeeds

LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsReceiveMessageAsyncTestsLocalAwsMessaging.AddPermissionAsync_DuplicateLabel_ThrowsArgumentException

LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsReceiveMessageAsyncTestsLocalAwsMessaging.ReceiveMessageAsync_WaitsForMessages_ReturnsMessagesWhenAvailable

LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsReceiveMessageAsyncTestsLocalAwsMessaging.SendMessageAsync_BatchWithAttributeSizeLimits_PartialBatchFailure

LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsReceiveMessageAsyncTestsLocalAwsMessaging.ReceiveMessageAsync_MultipleMessages_CorrectAttributesReturnedForEach

LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsReceiveMessageAsyncTestsLocalAwsMessaging.SendMessageAsync_MessageAttributeFullSizeCalculation_ThrowsException

LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsReceiveMessageAsyncTestsLocalAwsMessaging.RemovePermissionAsync_ValidRequest_RemovesPermissionFromPolicy

LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsReceiveMessageAsyncTestsLocalAwsMessaging.RemovePermissionAsync_QueueDoesNotExist_ThrowsQueueDoesNotExistException

LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsReceiveMessageAsyncTestsLocalAwsMessaging.ReceiveMessageAsync_ApproximateReceiveCount_IncreasesWithEachReceive

LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsReceiveMessageAsyncTestsLocalAwsMessaging.ReceiveMessageAsync_MessageNotMovedToErrorQueue_IfDeletedBeforeMaxReceives

LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsReceiveMessageAsyncTestsLocalAwsMessaging.SendMessageAsync_MessageExceedsMaximumSize_ThrowsInvalidMessageContentsException

LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsReceiveMessageAsyncTestsLocalAwsMessaging.AddAndRemovePermission_MultiplePermissions_ManagesCorrectly

LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsReceiveMessageAsyncTestsLocalAwsMessaging.ReceiveMessageAsync_AllMessageSystemAttributes_AllAttributesReturned

LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsReceiveMessageAsyncTestsLocalAwsMessaging.ReceiveMessageAsync_QueueNotFound_ThrowsQueueDoesNotExistException

LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsReceiveMessageAsyncTestsLocalAwsMessaging.ReceiveMessageAsync_SpecificMessageSystemAttributes_OnlyRequestedAttributesReturned

LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsReceiveMessageAsyncTestsLocalAwsMessaging.ReceiveMessageAsync_MultipleMessagesWithDifferentDelays

LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsReceiveMessageAsyncTestsLocalAwsMessaging.SendMessageAsync_BinaryAttributeSize_Succeeds

LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsReceiveMessageAsyncTestsLocalAwsMessaging.ReceiveMessageAsync_CancellationRequested_ReturnsEmptyList

LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsReceiveMessageAsyncTestsLocalAwsMessaging.ReceiveMessageAsync_MessagesAvailable_ReturnsMessages

LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsReceiveMessageAsyncTestsLocalAwsMessaging.ReceiveMessageAsync_MessageMovedToErrorQueue_AfterMaxReceives

LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsReceiveMessageAsyncTestsLocalAwsMessaging.AddPermissionAsync_QueueDoesNotExist_ThrowsQueueDoesNotExistException

LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SnsPublishAsyncTestsLocalAwsMessaging.GetSubscriptionAttributes_ForNonExistentSubscription_ShouldThrowException

LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SnsPublishAsyncTestsLocalAwsMessaging.SetTopicAttributes_ForNonExistentTopic_ShouldThrowException

LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SnsPublishAsyncTestsLocalAwsMessaging.SetTopicAttributes_ShouldSetAndRetrieveAttributes

LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SnsPublishAsyncTestsLocalAwsMessaging.SetSubscriptionAttributes_ShouldUpdateAttributes

LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SnsPublishAsyncTestsLocalAwsMessaging.PublishAsync_ToFifoTopic_WithMultipleMessageGroups_ShouldMaintainOrderWithinGroups

LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SnsPublishAsyncTestsLocalAwsMessaging.PublishAsync_WithRawDelivery_ShouldDeliverMessageDirectly

LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SnsPublishAsyncTestsLocalAwsMessaging.ListSubscriptionsByTopicAsync_ShouldReturnSubscriptionsForSpecificTopic

LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SnsPublishAsyncTestsLocalAwsMessaging.PublishAsync_ToFifoTopic_ShouldPreventDuplicates

LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SnsPublishAsyncTestsLocalAwsMessaging.PublishAsync_MessageAttributesExceedMaximumSize_ThrowsInvalidParameterException

LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SnsPublishAsyncTestsLocalAwsMessaging.PublishAsync_ToFifoTopic_ShouldDeliverMessageToFifoQueue_InOrder

Received messages in order:
Body: First message
MessageId: 
SequenceNumber: 63270616209326224968
MessageDeduplicationId: Dedup1
MessageGroupId: TestGroup
SentTimestamp: 1730809802231
---
Body: Second message
MessageId: 
SequenceNumber: 63270616209326224969
MessageDeduplicationId: Dedup2
MessageGroupId: TestGroup
SentTimestamp: 1730809802231
---
Body: Third message
MessageId: 
SequenceNumber: 63270616209326224970
MessageDeduplicationId: Dedup3
MessageGroupId: TestGroup
SentTimestamp: 1730809802231
---
LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SnsPublishAsyncTestsLocalAwsMessaging.PublishAsync_ExactlyMaximumSize_Succeeds

LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SnsPublishAsyncTestsLocalAwsMessaging.PublishAsync_WithRawDelivery_ShouldCalculateMD5OfBody

LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SnsPublishAsyncTestsLocalAwsMessaging.ListSubscriptionsAsync_ShouldReturnAllSubscriptions

LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SnsPublishAsyncTestsLocalAwsMessaging.ListSubscriptionsAsync_WithMoreThan100Subscriptions_ShouldReturnPaginatedResults

LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SnsPublishAsyncTestsLocalAwsMessaging.PublishAsync_WithSubjectAndMessageAttributes_ExceedsLimit_ThrowsInvalidParameterException

LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SnsPublishAsyncTestsLocalAwsMessaging.PublishAsync_WithNonExistentTopic_ShouldThrowException

LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SnsPublishAsyncTestsLocalAwsMessaging.PublishAsync_MessageExceedsMaximumSize_ThrowsInvalidParameterException

LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SnsPublishAsyncTestsLocalAwsMessaging.GetSubscriptionAttributes_ShouldRetrieveCorrectAttributes

LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SnsPublishAsyncTestsLocalAwsMessaging.PublishAsync_WithNonRawDelivery_ShouldWrapMessageInSNSFormat

LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsFifoTestsLocalAwsMessaging.FifoQueue_ContentBasedDeduplication

LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsFifoTestsLocalAwsMessaging.FifoQueue_HighThroughputMode

LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsFifoTestsLocalAwsMessaging.CreateFifoQueue_SetsCorrectAttributes

LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsFifoTestsLocalAwsMessaging.FifoQueue_EnforcesMessageGroupOrdering

LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsFifoTestsLocalAwsMessaging.FifoQueue_MessageDeduplication

LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsFifoTestsLocalAwsMessaging.SendMessageToFifoQueue_RequiresMessageGroupId

LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsStartMessageMoveTaskAsyncLocalAwsMessagingTests.StartMessageMoveTaskAsync_ValidRequest_MovesMessage

LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsStartMessageMoveTaskAsyncLocalAwsMessagingTests.ListMessageMoveTasks_ReturnsAllActiveTasks

LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsStartMessageMoveTaskAsyncLocalAwsMessagingTests.CancelMessageMoveTaskAsync_ValidTaskHandle_StopsTask

LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsStartMessageMoveTaskAsyncLocalAwsMessagingTests.StartMessageMoveTaskAsync_InvalidDestinationQueue_ThrowsException

LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsStartMessageMoveTaskAsyncLocalAwsMessagingTests.StartMessageMoveTaskAsync_EmptyDLQ_NoMessagesMoved

LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsStartMessageMoveTaskAsyncLocalAwsMessagingTests.StartingTwoMessageMoveTasksForTheSameQueue_Throws

LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsStartMessageMoveTaskAsyncLocalAwsMessagingTests.StartMessageMoveTaskAsync_NonDLQSource_ThrowsException

LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsStartMessageMoveTaskAsyncLocalAwsMessagingTests.StartMessageMoveTaskAsync_NoDestinationArn_MovesToOriginalSource

LocalSqsSnsMessaging.Tests.LocalAwsMessaging.SqsStartMessageMoveTaskAsyncLocalAwsMessagingTests.StartMessageMoveTaskAsync_MaxNumberOfMessagesPerSecond_RespectsLimit



Killed:   [38;5;13m0[0m
Survived: [38;5;13m1[0m
Timeout:  [38;5;13m0[0m

[38;5;2mYour html report has been generated at:[0m
]8;id=343157929;file:///Users/stuart.lang/RiderProjects/ConsoleApp9/StrykerOutput/2024-11-05.12-29-44/reports/mutation-report.html\[38;5;2m/Users/stuart.lang/RiderProjects/ConsoleApp9/StrykerOutput/2024-11-05.12-29-44/r[0m]8;;\
]8;id=668640536;file:///Users/stuart.lang/RiderProjects/ConsoleApp9/StrykerOutput/2024-11-05.12-29-44/reports/mutation-report.html\[38;5;2meports/mutation-report.html[0m]8;;\
[38;5;2mYou can open it in your browser of choice.[0m
[12:30:04 INF] Time Elapsed 00:00:19.3035698
[12:30:04 INF] The final mutation score is 0.00 %
